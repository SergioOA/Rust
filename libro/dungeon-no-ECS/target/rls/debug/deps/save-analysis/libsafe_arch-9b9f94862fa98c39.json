{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=9b9f94862fa98c39","-C","extra-filename=-9b9f94862fa98c39","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\birdgame\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\birdgame\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Users\\sergi\\Desktop\\Rust\\birdgame\\target\\rls\\debug\\deps\\libbytemuck-44ad714c42406760.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\birdgame\\target\\rls\\debug\\deps\\libsafe_arch-9b9f94862fa98c39.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[15248136224374969066,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[6665665547877275723,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":12154,"line_start":1,"line_end":286,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":91}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12442,"byte_end":12495,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12496,"byte_end":12499,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12500,"byte_end":12579,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12580,"byte_end":12653,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12654,"byte_end":12722,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12723,"byte_end":12739,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12740,"byte_end":12771,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12772,"byte_end":12775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12776,"byte_end":12788,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12789,"byte_end":12867,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12868,"byte_end":12934,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":12935,"byte_end":13003,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13004,"byte_end":13080,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13081,"byte_end":13124,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13125,"byte_end":13198,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13199,"byte_end":13279,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13280,"byte_end":13354,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13355,"byte_end":13430,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13431,"byte_end":13508,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13509,"byte_end":13512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13513,"byte_end":13530,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13531,"byte_end":13608,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13609,"byte_end":13683,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13684,"byte_end":13763,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13764,"byte_end":13820,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13821,"byte_end":13824,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13825,"byte_end":13895,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13896,"byte_end":13975,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":13976,"byte_end":14056,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14057,"byte_end":14120,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14121,"byte_end":14124,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14125,"byte_end":14199,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14200,"byte_end":14280,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14281,"byte_end":14355,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14356,"byte_end":14434,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14435,"byte_end":14497,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14498,"byte_end":14562,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14563,"byte_end":14566,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14567,"byte_end":14592,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14593,"byte_end":14669,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14670,"byte_end":14673,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14674,"byte_end":14713,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14714,"byte_end":14794,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14795,"byte_end":14875,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14876,"byte_end":14912,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14913,"byte_end":14954,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":14955,"byte_end":15029,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15030,"byte_end":15107,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15108,"byte_end":15187,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15188,"byte_end":15247,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15248,"byte_end":15293,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15294,"byte_end":15365,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15366,"byte_end":15422,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15423,"byte_end":15455,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15456,"byte_end":15535,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15536,"byte_end":15615,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15616,"byte_end":15673,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15674,"byte_end":15745,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15746,"byte_end":15813,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15814,"byte_end":15872,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15873,"byte_end":15951,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":15952,"byte_end":16031,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16032,"byte_end":16112,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16113,"byte_end":16191,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16192,"byte_end":16237,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16238,"byte_end":16318,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16319,"byte_end":16395,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16396,"byte_end":16408,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16409,"byte_end":16485,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16486,"byte_end":16564,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16565,"byte_end":16645,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16646,"byte_end":16665,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16666,"byte_end":16688,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16689,"byte_end":16766,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16767,"byte_end":16839,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16840,"byte_end":16920,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16921,"byte_end":16987,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":16988,"byte_end":17065,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17066,"byte_end":17114,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17115,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17194,"byte_end":17270,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17271,"byte_end":17350,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17351,"byte_end":17430,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17431,"byte_end":17492,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17493,"byte_end":17564,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17565,"byte_end":17602,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17603,"byte_end":17682,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17683,"byte_end":17763,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17764,"byte_end":17796,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17797,"byte_end":17861,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17862,"byte_end":17927,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17928,"byte_end":17997,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":17998,"byte_end":18075,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18076,"byte_end":18147,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18148,"byte_end":18225,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18226,"byte_end":18305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18306,"byte_end":18380,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18381,"byte_end":18393,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18394,"byte_end":18471,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18472,"byte_end":18551,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18552,"byte_end":18583,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18584,"byte_end":18659,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18660,"byte_end":18730,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18731,"byte_end":18811,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18812,"byte_end":18891,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18892,"byte_end":18968,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":18969,"byte_end":19042,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19043,"byte_end":19123,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19124,"byte_end":19200,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19201,"byte_end":19279,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19280,"byte_end":19343,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19420,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19421,"byte_end":19498,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19499,"byte_end":19578,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19579,"byte_end":19641,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19642,"byte_end":19718,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19719,"byte_end":19735,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19736,"byte_end":19815,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19816,"byte_end":19851,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19852,"byte_end":19926,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19927,"byte_end":19980,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":19981,"byte_end":20058,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20059,"byte_end":20139,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20140,"byte_end":20218,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20219,"byte_end":20284,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20285,"byte_end":20365,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20366,"byte_end":20444,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20445,"byte_end":20500,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20501,"byte_end":20581,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20582,"byte_end":20638,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20639,"byte_end":20719,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20720,"byte_end":20795,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20796,"byte_end":20873,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20874,"byte_end":20951,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":20952,"byte_end":21030,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21031,"byte_end":21098,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21099,"byte_end":21119,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21120,"byte_end":21200,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21201,"byte_end":21272,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21273,"byte_end":21352,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21353,"byte_end":21381,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21382,"byte_end":21408,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21409,"byte_end":21465,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21466,"byte_end":21543,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21544,"byte_end":21622,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21623,"byte_end":21682,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21683,"byte_end":21705,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21706,"byte_end":21785,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21786,"byte_end":21866,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21867,"byte_end":21945,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21946,"byte_end":21964,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":21965,"byte_end":22029,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22030,"byte_end":22107,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22108,"byte_end":22182,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22183,"byte_end":22222,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22223,"byte_end":22302,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22303,"byte_end":22383,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22384,"byte_end":22427,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22428,"byte_end":22507,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22508,"byte_end":22588,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22589,"byte_end":22666,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22746,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22747,"byte_end":22770,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22771,"byte_end":22851,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\naming_conventions.rs","byte_start":22852,"byte_end":22898,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623311,"byte_end":9623315,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9622988,"byte_end":9623048,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623049,"byte_end":9623052,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623053,"byte_end":9623131,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623132,"byte_end":9623205,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623206,"byte_end":9623247,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623248,"byte_end":9623268,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623269,"byte_end":9623299,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623316,"byte_end":9623326,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623879,"byte_end":9623887,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623710,"byte_end":9623748,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623751,"byte_end":9623754,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623757,"byte_end":9623835,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623838,"byte_end":9623849,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623852,"byte_end":9623869,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624114,"byte_end":9624124,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623931,"byte_end":9623967,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623970,"byte_end":9623973,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623976,"byte_end":9624053,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624056,"byte_end":9624070,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624073,"byte_end":9624084,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624087,"byte_end":9624104,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624358,"byte_end":9624365,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624174,"byte_end":9624237,"line_start":53,"line_end":53,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624240,"byte_end":9624243,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624246,"byte_end":9624314,"line_start":55,"line_end":55,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624317,"byte_end":9624328,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624331,"byte_end":9624348,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624623,"byte_end":9624632,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624435,"byte_end":9624498,"line_start":62,"line_end":62,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624501,"byte_end":9624504,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624507,"byte_end":9624579,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624582,"byte_end":9624593,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624596,"byte_end":9624613,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630306,"byte_end":9630311,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9629983,"byte_end":9630043,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630044,"byte_end":9630047,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630048,"byte_end":9630126,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630127,"byte_end":9630200,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630201,"byte_end":9630242,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630243,"byte_end":9630263,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630264,"byte_end":9630294,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630312,"byte_end":9630323,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630885,"byte_end":9630893,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630715,"byte_end":9630754,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630757,"byte_end":9630760,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630763,"byte_end":9630841,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630844,"byte_end":9630855,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630858,"byte_end":9630875,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631122,"byte_end":9631132,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630937,"byte_end":9630974,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630977,"byte_end":9630980,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630983,"byte_end":9631061,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631064,"byte_end":9631078,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631081,"byte_end":9631092,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631095,"byte_end":9631112,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631363,"byte_end":9631370,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631182,"byte_end":9631246,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631249,"byte_end":9631252,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631255,"byte_end":9631319,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631322,"byte_end":9631333,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631336,"byte_end":9631353,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631625,"byte_end":9631634,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631440,"byte_end":9631504,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631507,"byte_end":9631510,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631513,"byte_end":9631581,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631584,"byte_end":9631595,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631598,"byte_end":9631615,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637144,"byte_end":9637149,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636664,"byte_end":9636720,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636721,"byte_end":9636724,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636725,"byte_end":9636798,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636799,"byte_end":9636877,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636878,"byte_end":9636896,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636897,"byte_end":9636977,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9636978,"byte_end":9637055,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637056,"byte_end":9637080,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637081,"byte_end":9637101,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637102,"byte_end":9637132,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637150,"byte_end":9637161,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645493,"byte_end":9645497,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645169,"byte_end":9645230,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645231,"byte_end":9645234,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645235,"byte_end":9645313,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645314,"byte_end":9645387,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645388,"byte_end":9645429,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645430,"byte_end":9645450,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645451,"byte_end":9645481,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645498,"byte_end":9645508,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646061,"byte_end":9646069,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645892,"byte_end":9645930,"line_start":32,"line_end":32,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645933,"byte_end":9645936,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645939,"byte_end":9646017,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646020,"byte_end":9646031,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646034,"byte_end":9646051,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646296,"byte_end":9646306,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646113,"byte_end":9646149,"line_start":41,"line_end":41,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646152,"byte_end":9646155,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646158,"byte_end":9646235,"line_start":43,"line_end":43,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646238,"byte_end":9646252,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646255,"byte_end":9646266,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646269,"byte_end":9646286,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646535,"byte_end":9646542,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646350,"byte_end":9646413,"line_start":51,"line_end":51,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646416,"byte_end":9646419,"line_start":52,"line_end":52,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646422,"byte_end":9646491,"line_start":53,"line_end":53,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646494,"byte_end":9646505,"line_start":54,"line_end":54,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646508,"byte_end":9646525,"line_start":55,"line_end":55,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646801,"byte_end":9646810,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646612,"byte_end":9646675,"line_start":60,"line_end":60,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646678,"byte_end":9646681,"line_start":61,"line_end":61,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646684,"byte_end":9646757,"line_start":62,"line_end":62,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646760,"byte_end":9646771,"line_start":63,"line_end":63,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646774,"byte_end":9646791,"line_start":64,"line_end":64,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652603,"byte_end":9652608,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652279,"byte_end":9652340,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652341,"byte_end":9652344,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652345,"byte_end":9652423,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652424,"byte_end":9652497,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652498,"byte_end":9652539,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652540,"byte_end":9652560,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652561,"byte_end":9652591,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652609,"byte_end":9652620,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653182,"byte_end":9653190,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653012,"byte_end":9653051,"line_start":32,"line_end":32,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653054,"byte_end":9653057,"line_start":33,"line_end":33,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653060,"byte_end":9653138,"line_start":34,"line_end":34,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653141,"byte_end":9653152,"line_start":35,"line_end":35,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653155,"byte_end":9653172,"line_start":36,"line_end":36,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653419,"byte_end":9653429,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653234,"byte_end":9653271,"line_start":41,"line_end":41,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653274,"byte_end":9653277,"line_start":42,"line_end":42,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653280,"byte_end":9653358,"line_start":43,"line_end":43,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653361,"byte_end":9653375,"line_start":44,"line_end":44,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653378,"byte_end":9653389,"line_start":45,"line_end":45,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653392,"byte_end":9653409,"line_start":46,"line_end":46,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653660,"byte_end":9653667,"line_start":58,"line_end":58,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653479,"byte_end":9653543,"line_start":53,"line_end":53,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653546,"byte_end":9653549,"line_start":54,"line_end":54,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653552,"byte_end":9653616,"line_start":55,"line_end":55,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653619,"byte_end":9653630,"line_start":56,"line_end":56,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653633,"byte_end":9653650,"line_start":57,"line_end":57,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653922,"byte_end":9653931,"line_start":67,"line_end":67,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653737,"byte_end":9653801,"line_start":62,"line_end":62,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653804,"byte_end":9653807,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653810,"byte_end":9653878,"line_start":64,"line_end":64,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653881,"byte_end":9653892,"line_start":65,"line_end":65,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653895,"byte_end":9653912,"line_start":66,"line_end":66,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659441,"byte_end":9659446,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9658961,"byte_end":9659017,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659018,"byte_end":9659021,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659022,"byte_end":9659095,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659096,"byte_end":9659174,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659175,"byte_end":9659193,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659194,"byte_end":9659274,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659275,"byte_end":9659352,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659353,"byte_end":9659377,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659378,"byte_end":9659398,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659399,"byte_end":9659429,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659447,"byte_end":9659458,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667743,"byte_end":9667751,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667403,"byte_end":9667424,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667425,"byte_end":9667432,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667433,"byte_end":9667456,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667457,"byte_end":9667508,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667509,"byte_end":9667560,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667561,"byte_end":9667599,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667600,"byte_end":9667642,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667643,"byte_end":9667650,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667651,"byte_end":9667662,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667663,"byte_end":9667680,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668186,"byte_end":9668196,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667823,"byte_end":9667867,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667868,"byte_end":9667875,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667876,"byte_end":9667899,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667900,"byte_end":9667951,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9667952,"byte_end":9668003,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668004,"byte_end":9668044,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668045,"byte_end":9668085,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668086,"byte_end":9668093,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668094,"byte_end":9668105,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668106,"byte_end":9668123,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668608,"byte_end":9668619,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668268,"byte_end":9668288,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668289,"byte_end":9668296,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668297,"byte_end":9668320,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668321,"byte_end":9668372,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668373,"byte_end":9668424,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668425,"byte_end":9668466,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668467,"byte_end":9668507,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668508,"byte_end":9668515,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668516,"byte_end":9668527,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668528,"byte_end":9668545,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669037,"byte_end":9669051,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668691,"byte_end":9668714,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668715,"byte_end":9668722,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668723,"byte_end":9668746,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668747,"byte_end":9668798,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668799,"byte_end":9668850,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668851,"byte_end":9668895,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668896,"byte_end":9668936,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668937,"byte_end":9668944,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668945,"byte_end":9668956,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9668957,"byte_end":9668974,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669499,"byte_end":9669515,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669126,"byte_end":9669148,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669149,"byte_end":9669152,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669153,"byte_end":9669169,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669170,"byte_end":9669177,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669178,"byte_end":9669201,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669202,"byte_end":9669253,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669254,"byte_end":9669305,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669306,"byte_end":9669351,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669352,"byte_end":9669398,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669399,"byte_end":9669406,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669407,"byte_end":9669418,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669419,"byte_end":9669436,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669994,"byte_end":9670012,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669589,"byte_end":9669634,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669635,"byte_end":9669638,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669639,"byte_end":9669655,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669656,"byte_end":9669663,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669664,"byte_end":9669687,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669688,"byte_end":9669739,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669740,"byte_end":9669791,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669792,"byte_end":9669839,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669840,"byte_end":9669893,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669894,"byte_end":9669901,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669902,"byte_end":9669913,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9669914,"byte_end":9669931,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670466,"byte_end":9670482,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670086,"byte_end":9670108,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670109,"byte_end":9670112,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670113,"byte_end":9670129,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670130,"byte_end":9670137,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670138,"byte_end":9670161,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670162,"byte_end":9670213,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670214,"byte_end":9670265,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670266,"byte_end":9670311,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670312,"byte_end":9670365,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670366,"byte_end":9670373,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670374,"byte_end":9670385,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670386,"byte_end":9670403,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670989,"byte_end":9671007,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670556,"byte_end":9670601,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670602,"byte_end":9670605,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670606,"byte_end":9670622,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670623,"byte_end":9670630,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670631,"byte_end":9670654,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670655,"byte_end":9670706,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670707,"byte_end":9670758,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670759,"byte_end":9670806,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670807,"byte_end":9670888,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670889,"byte_end":9670896,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670897,"byte_end":9670908,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9670909,"byte_end":9670926,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671453,"byte_end":9671469,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671081,"byte_end":9671102,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671103,"byte_end":9671106,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671107,"byte_end":9671123,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671124,"byte_end":9671131,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671132,"byte_end":9671155,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671156,"byte_end":9671207,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671208,"byte_end":9671259,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671260,"byte_end":9671305,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671306,"byte_end":9671352,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671353,"byte_end":9671360,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671361,"byte_end":9671372,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671373,"byte_end":9671390,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671975,"byte_end":9671993,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671543,"byte_end":9671587,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671588,"byte_end":9671591,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671592,"byte_end":9671608,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671609,"byte_end":9671616,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671617,"byte_end":9671640,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671641,"byte_end":9671692,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671693,"byte_end":9671744,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671745,"byte_end":9671792,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671793,"byte_end":9671874,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671875,"byte_end":9671882,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671883,"byte_end":9671894,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9671895,"byte_end":9671912,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672440,"byte_end":9672456,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672067,"byte_end":9672089,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672090,"byte_end":9672093,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672094,"byte_end":9672110,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672111,"byte_end":9672118,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672119,"byte_end":9672142,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672143,"byte_end":9672194,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672195,"byte_end":9672246,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672247,"byte_end":9672292,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672293,"byte_end":9672339,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672340,"byte_end":9672347,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672348,"byte_end":9672359,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672360,"byte_end":9672377,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672963,"byte_end":9672981,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672530,"byte_end":9672575,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672576,"byte_end":9672579,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672580,"byte_end":9672596,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672597,"byte_end":9672604,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672605,"byte_end":9672628,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672629,"byte_end":9672680,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672681,"byte_end":9672732,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672733,"byte_end":9672780,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672781,"byte_end":9672862,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672863,"byte_end":9672870,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672871,"byte_end":9672882,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9672883,"byte_end":9672900,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673420,"byte_end":9673436,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673055,"byte_end":9673076,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673077,"byte_end":9673080,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673081,"byte_end":9673097,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673098,"byte_end":9673105,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673106,"byte_end":9673129,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673130,"byte_end":9673181,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673182,"byte_end":9673233,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673234,"byte_end":9673279,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673280,"byte_end":9673319,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673320,"byte_end":9673327,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673328,"byte_end":9673339,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673340,"byte_end":9673357,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673942,"byte_end":9673960,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673510,"byte_end":9673554,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673555,"byte_end":9673558,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673559,"byte_end":9673575,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673576,"byte_end":9673583,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673584,"byte_end":9673607,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673608,"byte_end":9673659,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673660,"byte_end":9673711,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673712,"byte_end":9673759,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673760,"byte_end":9673841,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673842,"byte_end":9673849,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673850,"byte_end":9673861,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9673862,"byte_end":9673879,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674408,"byte_end":9674425,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674034,"byte_end":9674056,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674057,"byte_end":9674060,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674061,"byte_end":9674077,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674078,"byte_end":9674085,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674086,"byte_end":9674109,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674110,"byte_end":9674161,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674162,"byte_end":9674213,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674214,"byte_end":9674260,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674261,"byte_end":9674307,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674308,"byte_end":9674315,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674316,"byte_end":9674327,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674328,"byte_end":9674345,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674899,"byte_end":9674918,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674500,"byte_end":9674545,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674546,"byte_end":9674549,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674550,"byte_end":9674566,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674567,"byte_end":9674574,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674575,"byte_end":9674598,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674599,"byte_end":9674650,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674651,"byte_end":9674702,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674703,"byte_end":9674751,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674752,"byte_end":9674798,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674799,"byte_end":9674806,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674807,"byte_end":9674818,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674819,"byte_end":9674836,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675363,"byte_end":9675380,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9674993,"byte_end":9675018,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675019,"byte_end":9675022,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675023,"byte_end":9675039,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675040,"byte_end":9675047,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675048,"byte_end":9675071,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675072,"byte_end":9675123,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675124,"byte_end":9675175,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675176,"byte_end":9675222,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675223,"byte_end":9675262,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675263,"byte_end":9675270,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675271,"byte_end":9675282,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675283,"byte_end":9675300,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675885,"byte_end":9675904,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675455,"byte_end":9675503,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675504,"byte_end":9675507,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675508,"byte_end":9675524,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675525,"byte_end":9675532,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675533,"byte_end":9675556,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675557,"byte_end":9675608,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675609,"byte_end":9675660,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675661,"byte_end":9675709,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675710,"byte_end":9675784,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675785,"byte_end":9675792,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675793,"byte_end":9675804,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675805,"byte_end":9675822,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676355,"byte_end":9676372,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9675979,"byte_end":9676003,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676004,"byte_end":9676007,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676008,"byte_end":9676024,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676025,"byte_end":9676032,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676033,"byte_end":9676056,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676057,"byte_end":9676108,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676109,"byte_end":9676160,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676161,"byte_end":9676207,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676208,"byte_end":9676254,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676255,"byte_end":9676262,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676263,"byte_end":9676274,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676275,"byte_end":9676292,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676876,"byte_end":9676895,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676447,"byte_end":9676494,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676495,"byte_end":9676498,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676499,"byte_end":9676515,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676516,"byte_end":9676523,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676524,"byte_end":9676547,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676548,"byte_end":9676599,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676600,"byte_end":9676651,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676652,"byte_end":9676700,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676701,"byte_end":9676775,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676776,"byte_end":9676783,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676784,"byte_end":9676795,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676796,"byte_end":9676813,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677347,"byte_end":9677364,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676970,"byte_end":9676995,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9676996,"byte_end":9676999,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677000,"byte_end":9677016,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677017,"byte_end":9677024,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677025,"byte_end":9677048,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677049,"byte_end":9677100,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677101,"byte_end":9677152,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677153,"byte_end":9677199,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677200,"byte_end":9677246,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677247,"byte_end":9677254,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677255,"byte_end":9677266,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677267,"byte_end":9677284,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677869,"byte_end":9677888,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677439,"byte_end":9677487,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677488,"byte_end":9677491,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677492,"byte_end":9677508,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677509,"byte_end":9677516,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677517,"byte_end":9677540,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677541,"byte_end":9677592,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677593,"byte_end":9677644,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677645,"byte_end":9677693,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677694,"byte_end":9677768,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677769,"byte_end":9677776,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677777,"byte_end":9677788,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677789,"byte_end":9677806,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678346,"byte_end":9678363,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677963,"byte_end":9677987,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677988,"byte_end":9677991,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9677992,"byte_end":9678008,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678009,"byte_end":9678016,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678017,"byte_end":9678040,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678041,"byte_end":9678092,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678093,"byte_end":9678144,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678145,"byte_end":9678191,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678192,"byte_end":9678245,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678246,"byte_end":9678253,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678254,"byte_end":9678265,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678266,"byte_end":9678283,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678867,"byte_end":9678886,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678438,"byte_end":9678485,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678486,"byte_end":9678489,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678490,"byte_end":9678506,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678507,"byte_end":9678514,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678515,"byte_end":9678538,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678539,"byte_end":9678590,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678591,"byte_end":9678642,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678643,"byte_end":9678691,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678692,"byte_end":9678766,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678767,"byte_end":9678774,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678775,"byte_end":9678786,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678787,"byte_end":9678804,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679376,"byte_end":9679398,"line_start":418,"line_end":418,"column_start":8,"column_end":30},"name":"cmp_ordinary_mask_m128","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128","value":"pub fn cmp_ordinary_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9678961,"byte_end":9679006,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679007,"byte_end":9679010,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679011,"byte_end":9679027,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679028,"byte_end":9679035,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679036,"byte_end":9679059,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679060,"byte_end":9679121,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679122,"byte_end":9679183,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordinary_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679184,"byte_end":9679235,"line_start":412,"line_end":412,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679236,"byte_end":9679275,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679276,"byte_end":9679283,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679284,"byte_end":9679295,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679296,"byte_end":9679313,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679950,"byte_end":9679974,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"cmp_ordinary_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordinary_mask_m128_s","value":"pub fn cmp_ordinary_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679473,"byte_end":9679541,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679542,"byte_end":9679545,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679546,"byte_end":9679562,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679563,"byte_end":9679570,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679571,"byte_end":9679594,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679595,"byte_end":9679646,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679647,"byte_end":9679713,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordinary_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679714,"byte_end":9679767,"line_start":429,"line_end":429,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679768,"byte_end":9679849,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679850,"byte_end":9679857,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679858,"byte_end":9679869,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9679870,"byte_end":9679887,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680469,"byte_end":9680488,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680049,"byte_end":9680088,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680089,"byte_end":9680092,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680093,"byte_end":9680109,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680110,"byte_end":9680117,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680118,"byte_end":9680141,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680142,"byte_end":9680203,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680204,"byte_end":9680265,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680266,"byte_end":9680314,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680315,"byte_end":9680368,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680369,"byte_end":9680376,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680377,"byte_end":9680388,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680389,"byte_end":9680406,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681026,"byte_end":9681047,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680565,"byte_end":9680627,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680628,"byte_end":9680631,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680632,"byte_end":9680648,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680649,"byte_end":9680656,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680657,"byte_end":9680680,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680681,"byte_end":9680732,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680733,"byte_end":9680799,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680800,"byte_end":9680850,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680851,"byte_end":9680925,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680926,"byte_end":9680933,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680934,"byte_end":9680945,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9680946,"byte_end":9680963,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681453,"byte_end":9681470,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681124,"byte_end":9681146,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681147,"byte_end":9681150,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681151,"byte_end":9681168,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681169,"byte_end":9681176,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681177,"byte_end":9681200,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681201,"byte_end":9681252,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681253,"byte_end":9681304,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681305,"byte_end":9681352,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681353,"byte_end":9681360,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681361,"byte_end":9681372,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681373,"byte_end":9681390,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681883,"byte_end":9681900,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681538,"byte_end":9681576,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681577,"byte_end":9681580,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681581,"byte_end":9681598,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681599,"byte_end":9681606,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681607,"byte_end":9681630,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681631,"byte_end":9681682,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681683,"byte_end":9681734,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681735,"byte_end":9681782,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681783,"byte_end":9681790,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681791,"byte_end":9681802,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681803,"byte_end":9681820,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682301,"byte_end":9682318,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681968,"byte_end":9681994,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681995,"byte_end":9681998,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9681999,"byte_end":9682016,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682017,"byte_end":9682024,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682025,"byte_end":9682048,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682049,"byte_end":9682100,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682101,"byte_end":9682152,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682153,"byte_end":9682200,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682201,"byte_end":9682208,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682209,"byte_end":9682220,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682221,"byte_end":9682238,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682728,"byte_end":9682745,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682386,"byte_end":9682421,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682422,"byte_end":9682425,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682426,"byte_end":9682443,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682444,"byte_end":9682451,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682452,"byte_end":9682475,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682476,"byte_end":9682527,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682528,"byte_end":9682579,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682580,"byte_end":9682627,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682628,"byte_end":9682635,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682636,"byte_end":9682647,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682648,"byte_end":9682665,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683143,"byte_end":9683160,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682813,"byte_end":9682836,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682837,"byte_end":9682840,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682841,"byte_end":9682858,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682859,"byte_end":9682866,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682867,"byte_end":9682890,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682891,"byte_end":9682942,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682943,"byte_end":9682994,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9682995,"byte_end":9683042,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683043,"byte_end":9683050,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683051,"byte_end":9683062,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683063,"byte_end":9683080,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683562,"byte_end":9683580,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683228,"byte_end":9683254,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683255,"byte_end":9683258,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683259,"byte_end":9683276,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683277,"byte_end":9683284,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683285,"byte_end":9683308,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683309,"byte_end":9683360,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683361,"byte_end":9683412,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683413,"byte_end":9683461,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683462,"byte_end":9683469,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683470,"byte_end":9683481,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683482,"byte_end":9683499,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684081,"byte_end":9684107,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683649,"byte_end":9683714,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683715,"byte_end":9683722,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683723,"byte_end":9683746,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683747,"byte_end":9683798,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683799,"byte_end":9683859,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683860,"byte_end":9683900,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683901,"byte_end":9683908,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683909,"byte_end":9683948,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683949,"byte_end":9683988,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9683989,"byte_end":9684000,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684001,"byte_end":9684018,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685018,"byte_end":9685037,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684735,"byte_end":9684786,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684787,"byte_end":9684794,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684795,"byte_end":9684818,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684819,"byte_end":9684870,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684871,"byte_end":9684917,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684918,"byte_end":9684925,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684926,"byte_end":9684937,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9684938,"byte_end":9684955,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685394,"byte_end":9685413,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685091,"byte_end":9685162,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685163,"byte_end":9685170,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685171,"byte_end":9685194,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685195,"byte_end":9685246,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685247,"byte_end":9685293,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685294,"byte_end":9685301,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685302,"byte_end":9685313,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685314,"byte_end":9685331,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686213,"byte_end":9686221,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685870,"byte_end":9685891,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685892,"byte_end":9685899,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685900,"byte_end":9685923,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685924,"byte_end":9685979,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9685980,"byte_end":9686032,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686033,"byte_end":9686071,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686072,"byte_end":9686112,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686113,"byte_end":9686120,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686121,"byte_end":9686132,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686133,"byte_end":9686150,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686664,"byte_end":9686674,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686293,"byte_end":9686337,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686338,"byte_end":9686345,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686346,"byte_end":9686369,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686370,"byte_end":9686425,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686426,"byte_end":9686478,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686479,"byte_end":9686519,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686520,"byte_end":9686563,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686564,"byte_end":9686571,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686572,"byte_end":9686583,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686584,"byte_end":9686601,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687044,"byte_end":9687053,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686746,"byte_end":9686786,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686787,"byte_end":9686794,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686795,"byte_end":9686818,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686819,"byte_end":9686874,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686875,"byte_end":9686901,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686902,"byte_end":9686943,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686944,"byte_end":9686951,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686952,"byte_end":9686963,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9686964,"byte_end":9686981,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687510,"byte_end":9687529,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687140,"byte_end":9687199,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687200,"byte_end":9687207,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687208,"byte_end":9687231,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687232,"byte_end":9687248,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687249,"byte_end":9687285,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687286,"byte_end":9687364,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687365,"byte_end":9687372,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687373,"byte_end":9687384,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687385,"byte_end":9687402,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687403,"byte_end":9687447,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688018,"byte_end":9688033,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687647,"byte_end":9687711,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687712,"byte_end":9687719,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687720,"byte_end":9687743,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687744,"byte_end":9687760,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687761,"byte_end":9687793,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687794,"byte_end":9687872,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687873,"byte_end":9687880,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687881,"byte_end":9687892,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687893,"byte_end":9687910,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9687911,"byte_end":9687955,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688457,"byte_end":9688474,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688090,"byte_end":9688150,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688151,"byte_end":9688158,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688159,"byte_end":9688182,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688183,"byte_end":9688238,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688239,"byte_end":9688273,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688274,"byte_end":9688356,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688357,"byte_end":9688364,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688365,"byte_end":9688376,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688377,"byte_end":9688394,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689047,"byte_end":9689066,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688562,"byte_end":9688602,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688603,"byte_end":9688606,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688607,"byte_end":9688685,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688686,"byte_end":9688766,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688767,"byte_end":9688779,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688780,"byte_end":9688787,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688788,"byte_end":9688811,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688812,"byte_end":9688849,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688850,"byte_end":9688886,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688887,"byte_end":9688946,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688947,"byte_end":9688954,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688955,"byte_end":9688966,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9688967,"byte_end":9688984,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689506,"byte_end":9689514,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689162,"byte_end":9689187,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689188,"byte_end":9689195,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689196,"byte_end":9689219,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689220,"byte_end":9689272,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689273,"byte_end":9689324,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689325,"byte_end":9689363,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689364,"byte_end":9689405,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689406,"byte_end":9689413,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689414,"byte_end":9689425,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689426,"byte_end":9689443,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689955,"byte_end":9689965,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689586,"byte_end":9689634,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689635,"byte_end":9689642,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689643,"byte_end":9689666,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689667,"byte_end":9689719,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689720,"byte_end":9689771,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689772,"byte_end":9689812,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689813,"byte_end":9689854,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689855,"byte_end":9689862,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689863,"byte_end":9689874,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9689875,"byte_end":9689892,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690380,"byte_end":9690388,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690037,"byte_end":9690062,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690063,"byte_end":9690070,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690071,"byte_end":9690094,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690095,"byte_end":9690147,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690148,"byte_end":9690199,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690200,"byte_end":9690238,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690239,"byte_end":9690279,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690280,"byte_end":9690287,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690288,"byte_end":9690299,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690300,"byte_end":9690317,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690829,"byte_end":9690839,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690460,"byte_end":9690508,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690509,"byte_end":9690516,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690517,"byte_end":9690540,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690541,"byte_end":9690593,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690594,"byte_end":9690645,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690646,"byte_end":9690686,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690687,"byte_end":9690728,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690729,"byte_end":9690736,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690737,"byte_end":9690748,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690749,"byte_end":9690766,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691292,"byte_end":9691303,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690911,"byte_end":9690970,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690971,"byte_end":9690978,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9690979,"byte_end":9691002,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691003,"byte_end":9691055,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691056,"byte_end":9691107,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691108,"byte_end":9691149,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691150,"byte_end":9691191,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691192,"byte_end":9691199,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691200,"byte_end":9691211,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691212,"byte_end":9691229,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691782,"byte_end":9691800,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691376,"byte_end":9691454,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691455,"byte_end":9691462,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691463,"byte_end":9691486,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691487,"byte_end":9691539,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691540,"byte_end":9691591,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691592,"byte_end":9691640,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691641,"byte_end":9691681,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691682,"byte_end":9691689,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691690,"byte_end":9691701,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691702,"byte_end":9691719,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692282,"byte_end":9692300,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691875,"byte_end":9691953,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691954,"byte_end":9691961,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691962,"byte_end":9691985,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9691986,"byte_end":9692038,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692039,"byte_end":9692090,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692091,"byte_end":9692139,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692140,"byte_end":9692181,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692182,"byte_end":9692189,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692190,"byte_end":9692201,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692202,"byte_end":9692219,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692728,"byte_end":9692742,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692375,"byte_end":9692413,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692414,"byte_end":9692417,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692418,"byte_end":9692481,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692482,"byte_end":9692489,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692490,"byte_end":9692513,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692514,"byte_end":9692569,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692570,"byte_end":9692600,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692601,"byte_end":9692627,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692628,"byte_end":9692635,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692636,"byte_end":9692647,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692648,"byte_end":9692665,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693139,"byte_end":9693147,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692798,"byte_end":9692819,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692820,"byte_end":9692827,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692828,"byte_end":9692851,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692852,"byte_end":9692903,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692904,"byte_end":9692955,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692956,"byte_end":9692994,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9692995,"byte_end":9693038,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693039,"byte_end":9693046,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693047,"byte_end":9693058,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693059,"byte_end":9693076,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693582,"byte_end":9693592,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693219,"byte_end":9693263,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693264,"byte_end":9693271,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693272,"byte_end":9693295,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693296,"byte_end":9693347,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693348,"byte_end":9693399,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693400,"byte_end":9693440,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693441,"byte_end":9693481,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693482,"byte_end":9693489,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693490,"byte_end":9693501,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693502,"byte_end":9693519,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694003,"byte_end":9694013,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693664,"byte_end":9693684,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693685,"byte_end":9693692,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693693,"byte_end":9693716,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693717,"byte_end":9693768,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693769,"byte_end":9693820,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693821,"byte_end":9693861,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693862,"byte_end":9693902,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693903,"byte_end":9693910,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693911,"byte_end":9693922,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9693923,"byte_end":9693940,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694470,"byte_end":9694485,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694084,"byte_end":9694121,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694122,"byte_end":9694129,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694130,"byte_end":9694153,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694154,"byte_end":9694205,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694206,"byte_end":9694248,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694249,"byte_end":9694292,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694293,"byte_end":9694312,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694313,"byte_end":9694363,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694364,"byte_end":9694369,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694370,"byte_end":9694377,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694378,"byte_end":9694389,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694390,"byte_end":9694407,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694951,"byte_end":9694968,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694543,"byte_end":9694603,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694604,"byte_end":9694611,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694612,"byte_end":9694635,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694636,"byte_end":9694687,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694688,"byte_end":9694732,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694733,"byte_end":9694773,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694774,"byte_end":9694793,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694794,"byte_end":9694844,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694845,"byte_end":9694850,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694851,"byte_end":9694858,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694859,"byte_end":9694870,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9694871,"byte_end":9694888,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695427,"byte_end":9695447,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695026,"byte_end":9695069,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695070,"byte_end":9695077,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695078,"byte_end":9695101,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695102,"byte_end":9695155,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695156,"byte_end":9695203,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695204,"byte_end":9695249,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695250,"byte_end":9695269,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695270,"byte_end":9695320,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695321,"byte_end":9695326,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695327,"byte_end":9695334,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695335,"byte_end":9695346,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695347,"byte_end":9695364,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695930,"byte_end":9695952,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695507,"byte_end":9695573,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695574,"byte_end":9695581,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695582,"byte_end":9695605,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695606,"byte_end":9695659,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695660,"byte_end":9695709,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695710,"byte_end":9695752,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695753,"byte_end":9695772,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695773,"byte_end":9695823,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695824,"byte_end":9695829,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695830,"byte_end":9695837,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695838,"byte_end":9695849,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9695850,"byte_end":9695867,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696344,"byte_end":9696352,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696012,"byte_end":9696073,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696074,"byte_end":9696081,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696082,"byte_end":9696105,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696106,"byte_end":9696158,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696159,"byte_end":9696221,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696222,"byte_end":9696243,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696244,"byte_end":9696251,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696252,"byte_end":9696263,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696264,"byte_end":9696281,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696781,"byte_end":9696791,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696462,"byte_end":9696523,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696524,"byte_end":9696531,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696532,"byte_end":9696555,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696556,"byte_end":9696595,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696596,"byte_end":9696658,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696659,"byte_end":9696680,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696681,"byte_end":9696688,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696689,"byte_end":9696700,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696701,"byte_end":9696718,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697146,"byte_end":9697160,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696850,"byte_end":9696884,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696885,"byte_end":9696892,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696893,"byte_end":9696916,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696917,"byte_end":9696960,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9696961,"byte_end":9697023,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697024,"byte_end":9697045,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697046,"byte_end":9697053,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697054,"byte_end":9697065,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697066,"byte_end":9697083,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697560,"byte_end":9697577,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697220,"byte_end":9697280,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697281,"byte_end":9697288,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697289,"byte_end":9697312,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697313,"byte_end":9697374,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697375,"byte_end":9697437,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697438,"byte_end":9697459,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697460,"byte_end":9697467,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697468,"byte_end":9697479,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697480,"byte_end":9697497,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697919,"byte_end":9697930,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697688,"byte_end":9697707,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697708,"byte_end":9697715,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697716,"byte_end":9697739,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697740,"byte_end":9697777,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697778,"byte_end":9697818,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697819,"byte_end":9697826,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697827,"byte_end":9697838,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9697839,"byte_end":9697856,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700072,"byte_end":9700081,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699784,"byte_end":9699807,"line_start":1095,"line_end":1095,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699808,"byte_end":9699815,"line_start":1096,"line_end":1096,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699816,"byte_end":9699839,"line_start":1097,"line_end":1097,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699840,"byte_end":9699893,"line_start":1098,"line_end":1098,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699894,"byte_end":9699930,"line_start":1099,"line_end":1099,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699931,"byte_end":9699971,"line_start":1100,"line_end":1100,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699972,"byte_end":9699979,"line_start":1101,"line_end":1101,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699980,"byte_end":9699991,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9699992,"byte_end":9700009,"line_start":1103,"line_end":1103,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700451,"byte_end":9700462,"line_start":1119,"line_end":1119,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700140,"byte_end":9700186,"line_start":1109,"line_end":1109,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700187,"byte_end":9700194,"line_start":1110,"line_end":1110,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700195,"byte_end":9700218,"line_start":1111,"line_end":1111,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700219,"byte_end":9700270,"line_start":1112,"line_end":1112,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700271,"byte_end":9700309,"line_start":1113,"line_end":1113,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700310,"byte_end":9700350,"line_start":1114,"line_end":1114,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700351,"byte_end":9700358,"line_start":1115,"line_end":1115,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700359,"byte_end":9700370,"line_start":1116,"line_end":1116,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700371,"byte_end":9700388,"line_start":1117,"line_end":1117,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700871,"byte_end":9700881,"line_start":1134,"line_end":1134,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700521,"byte_end":9700565,"line_start":1123,"line_end":1123,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700566,"byte_end":9700573,"line_start":1124,"line_end":1124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700574,"byte_end":9700597,"line_start":1125,"line_end":1125,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700598,"byte_end":9700653,"line_start":1126,"line_end":1126,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700654,"byte_end":9700684,"line_start":1127,"line_end":1127,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700685,"byte_end":9700711,"line_start":1128,"line_end":1128,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700712,"byte_end":9700737,"line_start":1129,"line_end":1129,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700738,"byte_end":9700782,"line_start":1130,"line_end":1130,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700783,"byte_end":9700790,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700791,"byte_end":9700808,"line_start":1132,"line_end":1132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701274,"byte_end":9701286,"line_start":1148,"line_end":1148,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9700969,"byte_end":9701022,"line_start":1138,"line_end":1138,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701023,"byte_end":9701030,"line_start":1139,"line_end":1139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701031,"byte_end":9701054,"line_start":1140,"line_end":1140,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701055,"byte_end":9701110,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701111,"byte_end":9701131,"line_start":1142,"line_end":1142,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701132,"byte_end":9701160,"line_start":1143,"line_end":1143,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701161,"byte_end":9701185,"line_start":1144,"line_end":1144,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701186,"byte_end":9701193,"line_start":1145,"line_end":1145,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701194,"byte_end":9701211,"line_start":1146,"line_end":1146,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701738,"byte_end":9701754,"line_start":1163,"line_end":1163,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701360,"byte_end":9701426,"line_start":1152,"line_end":1152,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701427,"byte_end":9701434,"line_start":1153,"line_end":1153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701435,"byte_end":9701458,"line_start":1154,"line_end":1154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701459,"byte_end":9701514,"line_start":1155,"line_end":1155,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701515,"byte_end":9701545,"line_start":1156,"line_end":1156,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701546,"byte_end":9701578,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701579,"byte_end":9701604,"line_start":1158,"line_end":1158,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701605,"byte_end":9701649,"line_start":1159,"line_end":1159,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701650,"byte_end":9701657,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701658,"byte_end":9701675,"line_start":1161,"line_end":1161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702218,"byte_end":9702236,"line_start":1178,"line_end":1178,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701843,"byte_end":9701904,"line_start":1167,"line_end":1167,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701905,"byte_end":9701912,"line_start":1168,"line_end":1168,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701913,"byte_end":9701936,"line_start":1169,"line_end":1169,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701937,"byte_end":9701992,"line_start":1170,"line_end":1170,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9701993,"byte_end":9702023,"line_start":1171,"line_end":1171,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702024,"byte_end":9702058,"line_start":1172,"line_end":1172,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702059,"byte_end":9702084,"line_start":1173,"line_end":1173,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702085,"byte_end":9702129,"line_start":1174,"line_end":1174,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702130,"byte_end":9702137,"line_start":1175,"line_end":1175,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702138,"byte_end":9702155,"line_start":1176,"line_end":1176,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702831,"byte_end":9702851,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702325,"byte_end":9702369,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702370,"byte_end":9702373,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702374,"byte_end":9702452,"line_start":1184,"line_end":1184,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702453,"byte_end":9702533,"line_start":1185,"line_end":1185,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702534,"byte_end":9702546,"line_start":1186,"line_end":1186,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702547,"byte_end":9702554,"line_start":1187,"line_end":1187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702555,"byte_end":9702578,"line_start":1188,"line_end":1188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702579,"byte_end":9702634,"line_start":1189,"line_end":1189,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702635,"byte_end":9702660,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702661,"byte_end":9702697,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702698,"byte_end":9702742,"line_start":1192,"line_end":1192,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702743,"byte_end":9702750,"line_start":1193,"line_end":1193,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702751,"byte_end":9702768,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703273,"byte_end":9703281,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702931,"byte_end":9702952,"line_start":1200,"line_end":1200,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702953,"byte_end":9702960,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702961,"byte_end":9702984,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9702985,"byte_end":9703036,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703037,"byte_end":9703089,"line_start":1204,"line_end":1204,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703090,"byte_end":9703128,"line_start":1205,"line_end":1205,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703129,"byte_end":9703172,"line_start":1206,"line_end":1206,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703173,"byte_end":9703180,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703181,"byte_end":9703192,"line_start":1208,"line_end":1208,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703193,"byte_end":9703210,"line_start":1209,"line_end":1209,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703718,"byte_end":9703728,"line_start":1226,"line_end":1226,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703353,"byte_end":9703397,"line_start":1215,"line_end":1215,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703398,"byte_end":9703405,"line_start":1216,"line_end":1216,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703406,"byte_end":9703429,"line_start":1217,"line_end":1217,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703430,"byte_end":9703481,"line_start":1218,"line_end":1218,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703482,"byte_end":9703534,"line_start":1219,"line_end":1219,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703535,"byte_end":9703575,"line_start":1220,"line_end":1220,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703576,"byte_end":9703617,"line_start":1221,"line_end":1221,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703618,"byte_end":9703625,"line_start":1222,"line_end":1222,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703626,"byte_end":9703637,"line_start":1223,"line_end":1223,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703638,"byte_end":9703655,"line_start":1224,"line_end":1224,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704479,"byte_end":9704498,"line_start":1245,"line_end":1245,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703800,"byte_end":9703855,"line_start":1230,"line_end":1230,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703856,"byte_end":9703863,"line_start":1231,"line_end":1231,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703864,"byte_end":9703887,"line_start":1232,"line_end":1232,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703888,"byte_end":9703943,"line_start":1233,"line_end":1233,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9703944,"byte_end":9703999,"line_start":1234,"line_end":1234,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704000,"byte_end":9704058,"line_start":1235,"line_end":1235,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704059,"byte_end":9704118,"line_start":1236,"line_end":1236,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704119,"byte_end":9704175,"line_start":1237,"line_end":1237,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704176,"byte_end":9704228,"line_start":1238,"line_end":1238,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704229,"byte_end":9704282,"line_start":1239,"line_end":1239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704283,"byte_end":9704336,"line_start":1240,"line_end":1240,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704337,"byte_end":9704390,"line_start":1241,"line_end":1241,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704391,"byte_end":9704398,"line_start":1242,"line_end":1242,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704399,"byte_end":9704416,"line_start":1243,"line_end":1243,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705013,"byte_end":9705029,"line_start":1262,"line_end":1262,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704636,"byte_end":9704688,"line_start":1251,"line_end":1251,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704689,"byte_end":9704696,"line_start":1252,"line_end":1252,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704697,"byte_end":9704720,"line_start":1253,"line_end":1253,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704721,"byte_end":9704772,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704773,"byte_end":9704824,"line_start":1255,"line_end":1255,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704825,"byte_end":9704871,"line_start":1256,"line_end":1256,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704872,"byte_end":9704912,"line_start":1257,"line_end":1257,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704913,"byte_end":9704920,"line_start":1258,"line_end":1258,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704921,"byte_end":9704932,"line_start":1259,"line_end":1259,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9704933,"byte_end":9704950,"line_start":1260,"line_end":1260,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705481,"byte_end":9705496,"line_start":1277,"line_end":1277,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705106,"byte_end":9705157,"line_start":1266,"line_end":1266,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705158,"byte_end":9705165,"line_start":1267,"line_end":1267,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705166,"byte_end":9705189,"line_start":1268,"line_end":1268,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705190,"byte_end":9705241,"line_start":1269,"line_end":1269,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705242,"byte_end":9705293,"line_start":1270,"line_end":1270,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705294,"byte_end":9705339,"line_start":1271,"line_end":1271,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705340,"byte_end":9705380,"line_start":1272,"line_end":1272,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705381,"byte_end":9705388,"line_start":1273,"line_end":1273,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705389,"byte_end":9705400,"line_start":1274,"line_end":1274,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705401,"byte_end":9705418,"line_start":1275,"line_end":1275,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705913,"byte_end":9705924,"line_start":1292,"line_end":1292,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705573,"byte_end":9705593,"line_start":1281,"line_end":1281,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705594,"byte_end":9705601,"line_start":1282,"line_end":1282,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705602,"byte_end":9705625,"line_start":1283,"line_end":1283,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705626,"byte_end":9705677,"line_start":1284,"line_end":1284,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705678,"byte_end":9705729,"line_start":1285,"line_end":1285,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705730,"byte_end":9705771,"line_start":1286,"line_end":1286,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705772,"byte_end":9705812,"line_start":1287,"line_end":1287,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705813,"byte_end":9705820,"line_start":1288,"line_end":1288,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705821,"byte_end":9705832,"line_start":1289,"line_end":1289,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9705833,"byte_end":9705850,"line_start":1290,"line_end":1290,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711223,"byte_end":9711235,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710701,"byte_end":9710741,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710742,"byte_end":9710749,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710750,"byte_end":9710773,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710774,"byte_end":9710785,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710786,"byte_end":9710863,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710864,"byte_end":9710889,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710890,"byte_end":9710960,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710961,"byte_end":9710968,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9710969,"byte_end":9711017,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711018,"byte_end":9711033,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711034,"byte_end":9711042,"line_start":15,"line_end":15,"column_start":1,"column_end":9}},{"value":"/   [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711043,"byte_end":9711114,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711115,"byte_end":9711121,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711122,"byte_end":9711129,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711130,"byte_end":9711141,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711142,"byte_end":9711159,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711713,"byte_end":9711726,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711313,"byte_end":9711354,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711355,"byte_end":9711362,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711363,"byte_end":9711386,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711387,"byte_end":9711445,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711446,"byte_end":9711507,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711508,"byte_end":9711557,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711558,"byte_end":9711611,"line_start":32,"line_end":32,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711612,"byte_end":9711619,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711620,"byte_end":9711631,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711632,"byte_end":9711649,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712143,"byte_end":9712156,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711805,"byte_end":9711846,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711847,"byte_end":9711854,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711855,"byte_end":9711878,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711879,"byte_end":9711917,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711918,"byte_end":9711956,"line_start":45,"line_end":45,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9711957,"byte_end":9712006,"line_start":46,"line_end":46,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712007,"byte_end":9712041,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712042,"byte_end":9712049,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712050,"byte_end":9712061,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712062,"byte_end":9712079,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712572,"byte_end":9712585,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712235,"byte_end":9712276,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712277,"byte_end":9712284,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712285,"byte_end":9712308,"line_start":58,"line_end":58,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712309,"byte_end":9712347,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712348,"byte_end":9712388,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712389,"byte_end":9712438,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712439,"byte_end":9712470,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712471,"byte_end":9712478,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712479,"byte_end":9712490,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712491,"byte_end":9712508,"line_start":65,"line_end":65,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712984,"byte_end":9712993,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712664,"byte_end":9712685,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712686,"byte_end":9712693,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712694,"byte_end":9712717,"line_start":73,"line_end":73,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712718,"byte_end":9712762,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712763,"byte_end":9712808,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712809,"byte_end":9712848,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712849,"byte_end":9712882,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712883,"byte_end":9712890,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712891,"byte_end":9712902,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9712903,"byte_end":9712920,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713417,"byte_end":9713428,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713069,"byte_end":9713114,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713115,"byte_end":9713122,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713123,"byte_end":9713146,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713147,"byte_end":9713191,"line_start":89,"line_end":89,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713192,"byte_end":9713239,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713240,"byte_end":9713281,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713282,"byte_end":9713315,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713316,"byte_end":9713323,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713324,"byte_end":9713335,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713336,"byte_end":9713353,"line_start":95,"line_end":95,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714151,"byte_end":9714174,"line_start":125,"line_end":125,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713504,"byte_end":9713555,"line_start":101,"line_end":101,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713556,"byte_end":9713563,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713564,"byte_end":9713587,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713588,"byte_end":9713613,"line_start":104,"line_end":104,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713614,"byte_end":9713659,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713660,"byte_end":9713695,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713696,"byte_end":9713703,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713704,"byte_end":9713729,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713730,"byte_end":9713778,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713779,"byte_end":9713819,"line_start":110,"line_end":110,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713820,"byte_end":9713827,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713828,"byte_end":9713887,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713888,"byte_end":9713903,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713904,"byte_end":9713912,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713913,"byte_end":9713920,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713921,"byte_end":9713973,"line_start":116,"line_end":116,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9713974,"byte_end":9714017,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714018,"byte_end":9714025,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714026,"byte_end":9714032,"line_start":119,"line_end":119,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714033,"byte_end":9714040,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714041,"byte_end":9714052,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714053,"byte_end":9714070,"line_start":122,"line_end":122,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714071,"byte_end":9714087,"line_start":123,"line_end":123,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714709,"byte_end":9714733,"line_start":140,"line_end":140,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714253,"byte_end":9714305,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714306,"byte_end":9714313,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714314,"byte_end":9714337,"line_start":131,"line_end":131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714338,"byte_end":9714406,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714407,"byte_end":9714478,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714479,"byte_end":9714539,"line_start":134,"line_end":134,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714540,"byte_end":9714607,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714608,"byte_end":9714615,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714616,"byte_end":9714627,"line_start":137,"line_end":137,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714628,"byte_end":9714645,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715422,"byte_end":9715445,"line_start":168,"line_end":168,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714813,"byte_end":9714864,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714865,"byte_end":9714872,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714873,"byte_end":9714896,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714897,"byte_end":9714922,"line_start":147,"line_end":147,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714923,"byte_end":9714960,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714961,"byte_end":9714992,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9714993,"byte_end":9715000,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715001,"byte_end":9715026,"line_start":151,"line_end":151,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715027,"byte_end":9715066,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715067,"byte_end":9715102,"line_start":153,"line_end":153,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715103,"byte_end":9715110,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715111,"byte_end":9715170,"line_start":155,"line_end":155,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715171,"byte_end":9715186,"line_start":156,"line_end":156,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715187,"byte_end":9715195,"line_start":157,"line_end":157,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715196,"byte_end":9715203,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715204,"byte_end":9715248,"line_start":159,"line_end":159,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715249,"byte_end":9715288,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715289,"byte_end":9715296,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715297,"byte_end":9715303,"line_start":162,"line_end":162,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715304,"byte_end":9715311,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715312,"byte_end":9715323,"line_start":164,"line_end":164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715324,"byte_end":9715341,"line_start":165,"line_end":165,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715342,"byte_end":9715358,"line_start":166,"line_end":166,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715949,"byte_end":9715973,"line_start":183,"line_end":183,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715524,"byte_end":9715576,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715577,"byte_end":9715584,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715585,"byte_end":9715608,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715609,"byte_end":9715666,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715667,"byte_end":9715728,"line_start":176,"line_end":176,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715729,"byte_end":9715789,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715790,"byte_end":9715847,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715848,"byte_end":9715855,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715856,"byte_end":9715867,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9715868,"byte_end":9715885,"line_start":181,"line_end":181,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716367,"byte_end":9716379,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716053,"byte_end":9716073,"line_start":187,"line_end":187,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716074,"byte_end":9716081,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716082,"byte_end":9716105,"line_start":189,"line_end":189,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716106,"byte_end":9716148,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716149,"byte_end":9716191,"line_start":191,"line_end":191,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716192,"byte_end":9716234,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716235,"byte_end":9716265,"line_start":193,"line_end":193,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716266,"byte_end":9716273,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716274,"byte_end":9716285,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716286,"byte_end":9716303,"line_start":196,"line_end":196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716769,"byte_end":9716781,"line_start":213,"line_end":213,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716455,"byte_end":9716475,"line_start":202,"line_end":202,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716476,"byte_end":9716483,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716484,"byte_end":9716507,"line_start":204,"line_end":204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716508,"byte_end":9716546,"line_start":205,"line_end":205,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716547,"byte_end":9716585,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716586,"byte_end":9716634,"line_start":207,"line_end":207,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716635,"byte_end":9716667,"line_start":208,"line_end":208,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716668,"byte_end":9716675,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716676,"byte_end":9716687,"line_start":210,"line_end":210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716688,"byte_end":9716705,"line_start":211,"line_end":211,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717180,"byte_end":9717195,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716860,"byte_end":9716883,"line_start":217,"line_end":217,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716884,"byte_end":9716891,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716892,"byte_end":9716915,"line_start":219,"line_end":219,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716916,"byte_end":9716958,"line_start":220,"line_end":220,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9716959,"byte_end":9717001,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717002,"byte_end":9717047,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717048,"byte_end":9717078,"line_start":223,"line_end":223,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717079,"byte_end":9717086,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717087,"byte_end":9717098,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717099,"byte_end":9717116,"line_start":226,"line_end":226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717594,"byte_end":9717609,"line_start":243,"line_end":243,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717274,"byte_end":9717297,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717298,"byte_end":9717305,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717306,"byte_end":9717329,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717330,"byte_end":9717368,"line_start":235,"line_end":235,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717369,"byte_end":9717407,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717408,"byte_end":9717459,"line_start":237,"line_end":237,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717460,"byte_end":9717492,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717493,"byte_end":9717500,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717501,"byte_end":9717512,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717513,"byte_end":9717530,"line_start":241,"line_end":241,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718275,"byte_end":9718291,"line_start":271,"line_end":271,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717691,"byte_end":9717731,"line_start":247,"line_end":247,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717732,"byte_end":9717739,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717740,"byte_end":9717763,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717764,"byte_end":9717789,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717790,"byte_end":9717827,"line_start":251,"line_end":251,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717828,"byte_end":9717859,"line_start":252,"line_end":252,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717860,"byte_end":9717867,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717868,"byte_end":9717893,"line_start":254,"line_end":254,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717894,"byte_end":9717933,"line_start":255,"line_end":255,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717934,"byte_end":9717969,"line_start":256,"line_end":256,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717970,"byte_end":9717977,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9717978,"byte_end":9718030,"line_start":258,"line_end":258,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718031,"byte_end":9718046,"line_start":259,"line_end":259,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718047,"byte_end":9718055,"line_start":260,"line_end":260,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718056,"byte_end":9718063,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718064,"byte_end":9718106,"line_start":262,"line_end":262,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718107,"byte_end":9718141,"line_start":263,"line_end":263,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718142,"byte_end":9718149,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718150,"byte_end":9718156,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718157,"byte_end":9718164,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718165,"byte_end":9718176,"line_start":267,"line_end":267,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718177,"byte_end":9718194,"line_start":268,"line_end":268,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718195,"byte_end":9718211,"line_start":269,"line_end":269,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718773,"byte_end":9718790,"line_start":286,"line_end":286,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718369,"byte_end":9718410,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718411,"byte_end":9718418,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718419,"byte_end":9718442,"line_start":277,"line_end":277,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718443,"byte_end":9718500,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718501,"byte_end":9718562,"line_start":279,"line_end":279,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718563,"byte_end":9718616,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718617,"byte_end":9718671,"line_start":281,"line_end":281,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718672,"byte_end":9718679,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718680,"byte_end":9718691,"line_start":283,"line_end":283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9718692,"byte_end":9718709,"line_start":284,"line_end":284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720642,"byte_end":9720665,"line_start":344,"line_end":344,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720308,"byte_end":9720354,"line_start":334,"line_end":334,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720355,"byte_end":9720362,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720363,"byte_end":9720386,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720387,"byte_end":9720429,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720430,"byte_end":9720489,"line_start":338,"line_end":338,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720490,"byte_end":9720540,"line_start":339,"line_end":339,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720541,"byte_end":9720548,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720549,"byte_end":9720560,"line_start":341,"line_end":341,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720561,"byte_end":9720578,"line_start":342,"line_end":342,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721060,"byte_end":9721084,"line_start":358,"line_end":358,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720727,"byte_end":9720774,"line_start":348,"line_end":348,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720775,"byte_end":9720782,"line_start":349,"line_end":349,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720783,"byte_end":9720806,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720807,"byte_end":9720849,"line_start":351,"line_end":351,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720850,"byte_end":9720907,"line_start":352,"line_end":352,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720908,"byte_end":9720958,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720959,"byte_end":9720966,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720967,"byte_end":9720978,"line_start":355,"line_end":355,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9720979,"byte_end":9720996,"line_start":356,"line_end":356,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721504,"byte_end":9721527,"line_start":372,"line_end":372,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721151,"byte_end":9721197,"line_start":362,"line_end":362,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721198,"byte_end":9721205,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721206,"byte_end":9721229,"line_start":364,"line_end":364,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721230,"byte_end":9721281,"line_start":365,"line_end":365,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721282,"byte_end":9721341,"line_start":366,"line_end":366,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721342,"byte_end":9721402,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721403,"byte_end":9721410,"line_start":368,"line_end":368,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721411,"byte_end":9721422,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721423,"byte_end":9721440,"line_start":370,"line_end":370,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721948,"byte_end":9721971,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721590,"byte_end":9721636,"line_start":376,"line_end":376,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721637,"byte_end":9721644,"line_start":377,"line_end":377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721645,"byte_end":9721668,"line_start":378,"line_end":378,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721669,"byte_end":9721720,"line_start":379,"line_end":379,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721721,"byte_end":9721777,"line_start":380,"line_end":380,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721778,"byte_end":9721846,"line_start":381,"line_end":381,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721847,"byte_end":9721854,"line_start":382,"line_end":382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721855,"byte_end":9721866,"line_start":383,"line_end":383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9721867,"byte_end":9721884,"line_start":384,"line_end":384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722365,"byte_end":9722389,"line_start":400,"line_end":400,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722037,"byte_end":9722084,"line_start":390,"line_end":390,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722085,"byte_end":9722092,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722093,"byte_end":9722116,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722117,"byte_end":9722155,"line_start":393,"line_end":393,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722156,"byte_end":9722216,"line_start":394,"line_end":394,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722217,"byte_end":9722263,"line_start":395,"line_end":395,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722264,"byte_end":9722271,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722272,"byte_end":9722283,"line_start":397,"line_end":397,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722284,"byte_end":9722301,"line_start":398,"line_end":398,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722768,"byte_end":9722791,"line_start":414,"line_end":414,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722456,"byte_end":9722502,"line_start":404,"line_end":404,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722503,"byte_end":9722510,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722511,"byte_end":9722534,"line_start":406,"line_end":406,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722535,"byte_end":9722573,"line_start":407,"line_end":407,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722574,"byte_end":9722633,"line_start":408,"line_end":408,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722634,"byte_end":9722666,"line_start":409,"line_end":409,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722667,"byte_end":9722674,"line_start":410,"line_end":410,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722675,"byte_end":9722686,"line_start":411,"line_end":411,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722687,"byte_end":9722704,"line_start":412,"line_end":412,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723422,"byte_end":9723442,"line_start":434,"line_end":434,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722856,"byte_end":9722897,"line_start":418,"line_end":418,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722898,"byte_end":9722901,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722902,"byte_end":9722960,"line_start":420,"line_end":420,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722961,"byte_end":9722968,"line_start":421,"line_end":421,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722969,"byte_end":9722992,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9722993,"byte_end":9723004,"line_start":423,"line_end":423,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723005,"byte_end":9723083,"line_start":424,"line_end":424,"column_start":1,"column_end":79}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723084,"byte_end":9723109,"line_start":425,"line_end":425,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723110,"byte_end":9723180,"line_start":426,"line_end":426,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723181,"byte_end":9723188,"line_start":427,"line_end":427,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723189,"byte_end":9723245,"line_start":428,"line_end":428,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723246,"byte_end":9723320,"line_start":429,"line_end":429,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723321,"byte_end":9723328,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723329,"byte_end":9723340,"line_start":431,"line_end":431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723341,"byte_end":9723358,"line_start":432,"line_end":432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723988,"byte_end":9724009,"line_start":451,"line_end":451,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723522,"byte_end":9723564,"line_start":438,"line_end":438,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723565,"byte_end":9723568,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723569,"byte_end":9723627,"line_start":440,"line_end":440,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723628,"byte_end":9723635,"line_start":441,"line_end":441,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723636,"byte_end":9723659,"line_start":442,"line_end":442,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723660,"byte_end":9723718,"line_start":443,"line_end":443,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723719,"byte_end":9723780,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723781,"byte_end":9723838,"line_start":445,"line_end":445,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723839,"byte_end":9723886,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723887,"byte_end":9723894,"line_start":447,"line_end":447,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723895,"byte_end":9723906,"line_start":448,"line_end":448,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9723907,"byte_end":9723924,"line_start":449,"line_end":449,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724500,"byte_end":9724521,"line_start":468,"line_end":468,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724090,"byte_end":9724132,"line_start":455,"line_end":455,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724133,"byte_end":9724136,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724137,"byte_end":9724195,"line_start":457,"line_end":457,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724196,"byte_end":9724203,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724204,"byte_end":9724227,"line_start":459,"line_end":459,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724228,"byte_end":9724266,"line_start":460,"line_end":460,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724267,"byte_end":9724305,"line_start":461,"line_end":461,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724306,"byte_end":9724363,"line_start":462,"line_end":462,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724364,"byte_end":9724398,"line_start":463,"line_end":463,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724399,"byte_end":9724406,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724407,"byte_end":9724418,"line_start":465,"line_end":465,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724419,"byte_end":9724436,"line_start":466,"line_end":466,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724959,"byte_end":9724976,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724602,"byte_end":9724637,"line_start":472,"line_end":472,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724638,"byte_end":9724641,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724642,"byte_end":9724658,"line_start":474,"line_end":474,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724659,"byte_end":9724666,"line_start":475,"line_end":475,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724667,"byte_end":9724690,"line_start":476,"line_end":476,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724691,"byte_end":9724733,"line_start":477,"line_end":477,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724734,"byte_end":9724776,"line_start":478,"line_end":478,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724777,"byte_end":9724823,"line_start":479,"line_end":479,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724824,"byte_end":9724857,"line_start":480,"line_end":480,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724858,"byte_end":9724865,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724866,"byte_end":9724877,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9724878,"byte_end":9724895,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725437,"byte_end":9725456,"line_start":502,"line_end":502,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725054,"byte_end":9725099,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725100,"byte_end":9725103,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725104,"byte_end":9725120,"line_start":491,"line_end":491,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725121,"byte_end":9725128,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725129,"byte_end":9725152,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725153,"byte_end":9725195,"line_start":494,"line_end":494,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725196,"byte_end":9725238,"line_start":495,"line_end":495,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725239,"byte_end":9725287,"line_start":496,"line_end":496,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725288,"byte_end":9725335,"line_start":497,"line_end":497,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725336,"byte_end":9725343,"line_start":498,"line_end":498,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725344,"byte_end":9725355,"line_start":499,"line_end":499,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725356,"byte_end":9725373,"line_start":500,"line_end":500,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725885,"byte_end":9725902,"line_start":519,"line_end":519,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725534,"byte_end":9725556,"line_start":506,"line_end":506,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725557,"byte_end":9725560,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725561,"byte_end":9725577,"line_start":508,"line_end":508,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725578,"byte_end":9725585,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725586,"byte_end":9725609,"line_start":510,"line_end":510,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725610,"byte_end":9725652,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725653,"byte_end":9725695,"line_start":512,"line_end":512,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725696,"byte_end":9725742,"line_start":513,"line_end":513,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725743,"byte_end":9725783,"line_start":514,"line_end":514,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725784,"byte_end":9725791,"line_start":515,"line_end":515,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725792,"byte_end":9725803,"line_start":516,"line_end":516,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725804,"byte_end":9725821,"line_start":517,"line_end":517,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726363,"byte_end":9726382,"line_start":536,"line_end":536,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9725980,"byte_end":9726025,"line_start":523,"line_end":523,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726026,"byte_end":9726029,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726030,"byte_end":9726046,"line_start":525,"line_end":525,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726047,"byte_end":9726054,"line_start":526,"line_end":526,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726055,"byte_end":9726078,"line_start":527,"line_end":527,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726079,"byte_end":9726121,"line_start":528,"line_end":528,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726122,"byte_end":9726164,"line_start":529,"line_end":529,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726165,"byte_end":9726213,"line_start":530,"line_end":530,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726214,"byte_end":9726261,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726262,"byte_end":9726269,"line_start":532,"line_end":532,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726270,"byte_end":9726281,"line_start":533,"line_end":533,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726282,"byte_end":9726299,"line_start":534,"line_end":534,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727031,"byte_end":9727051,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726460,"byte_end":9726500,"line_start":540,"line_end":540,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726501,"byte_end":9726504,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726505,"byte_end":9726563,"line_start":542,"line_end":542,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726564,"byte_end":9726571,"line_start":543,"line_end":543,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726572,"byte_end":9726595,"line_start":544,"line_end":544,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726596,"byte_end":9726607,"line_start":545,"line_end":545,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726608,"byte_end":9726690,"line_start":546,"line_end":546,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726691,"byte_end":9726716,"line_start":547,"line_end":547,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726717,"byte_end":9726787,"line_start":548,"line_end":548,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726788,"byte_end":9726795,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726796,"byte_end":9726852,"line_start":550,"line_end":550,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726853,"byte_end":9726929,"line_start":551,"line_end":551,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726930,"byte_end":9726937,"line_start":552,"line_end":552,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726938,"byte_end":9726949,"line_start":553,"line_end":553,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9726950,"byte_end":9726967,"line_start":554,"line_end":554,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727600,"byte_end":9727621,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727131,"byte_end":9727172,"line_start":560,"line_end":560,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727173,"byte_end":9727176,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727177,"byte_end":9727235,"line_start":562,"line_end":562,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727236,"byte_end":9727243,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727244,"byte_end":9727267,"line_start":564,"line_end":564,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727268,"byte_end":9727327,"line_start":565,"line_end":565,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727328,"byte_end":9727389,"line_start":566,"line_end":566,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727390,"byte_end":9727447,"line_start":567,"line_end":567,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727448,"byte_end":9727498,"line_start":568,"line_end":568,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727499,"byte_end":9727506,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727507,"byte_end":9727518,"line_start":570,"line_end":570,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727519,"byte_end":9727536,"line_start":571,"line_end":571,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728113,"byte_end":9728134,"line_start":590,"line_end":590,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727702,"byte_end":9727743,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727744,"byte_end":9727747,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727748,"byte_end":9727806,"line_start":579,"line_end":579,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727807,"byte_end":9727814,"line_start":580,"line_end":580,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727815,"byte_end":9727838,"line_start":581,"line_end":581,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727839,"byte_end":9727879,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727880,"byte_end":9727918,"line_start":583,"line_end":583,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727919,"byte_end":9727976,"line_start":584,"line_end":584,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9727977,"byte_end":9728011,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728012,"byte_end":9728019,"line_start":586,"line_end":586,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728020,"byte_end":9728031,"line_start":587,"line_end":587,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728032,"byte_end":9728049,"line_start":588,"line_end":588,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728558,"byte_end":9728575,"line_start":607,"line_end":607,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728215,"byte_end":9728236,"line_start":594,"line_end":594,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728237,"byte_end":9728240,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728241,"byte_end":9728257,"line_start":596,"line_end":596,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728258,"byte_end":9728265,"line_start":597,"line_end":597,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728266,"byte_end":9728289,"line_start":598,"line_end":598,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728290,"byte_end":9728332,"line_start":599,"line_end":599,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728333,"byte_end":9728375,"line_start":600,"line_end":600,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728376,"byte_end":9728422,"line_start":601,"line_end":601,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728423,"byte_end":9728456,"line_start":602,"line_end":602,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728457,"byte_end":9728464,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728465,"byte_end":9728476,"line_start":604,"line_end":604,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728477,"byte_end":9728494,"line_start":605,"line_end":605,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729035,"byte_end":9729054,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728653,"byte_end":9728697,"line_start":611,"line_end":611,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728698,"byte_end":9728701,"line_start":612,"line_end":612,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728702,"byte_end":9728718,"line_start":613,"line_end":613,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728719,"byte_end":9728726,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728727,"byte_end":9728750,"line_start":615,"line_end":615,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728751,"byte_end":9728793,"line_start":616,"line_end":616,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728794,"byte_end":9728836,"line_start":617,"line_end":617,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728837,"byte_end":9728885,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728886,"byte_end":9728933,"line_start":619,"line_end":619,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728934,"byte_end":9728941,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728942,"byte_end":9728953,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9728954,"byte_end":9728971,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729483,"byte_end":9729500,"line_start":641,"line_end":641,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729132,"byte_end":9729154,"line_start":628,"line_end":628,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729155,"byte_end":9729158,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729159,"byte_end":9729175,"line_start":630,"line_end":630,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729176,"byte_end":9729183,"line_start":631,"line_end":631,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729184,"byte_end":9729207,"line_start":632,"line_end":632,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729208,"byte_end":9729250,"line_start":633,"line_end":633,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729251,"byte_end":9729293,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729294,"byte_end":9729340,"line_start":635,"line_end":635,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729341,"byte_end":9729381,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729382,"byte_end":9729389,"line_start":637,"line_end":637,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729390,"byte_end":9729401,"line_start":638,"line_end":638,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729402,"byte_end":9729419,"line_start":639,"line_end":639,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729961,"byte_end":9729980,"line_start":658,"line_end":658,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729578,"byte_end":9729623,"line_start":645,"line_end":645,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729624,"byte_end":9729627,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729628,"byte_end":9729644,"line_start":647,"line_end":647,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729645,"byte_end":9729652,"line_start":648,"line_end":648,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729653,"byte_end":9729676,"line_start":649,"line_end":649,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729677,"byte_end":9729719,"line_start":650,"line_end":650,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729720,"byte_end":9729762,"line_start":651,"line_end":651,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729763,"byte_end":9729811,"line_start":652,"line_end":652,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729812,"byte_end":9729859,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729860,"byte_end":9729867,"line_start":654,"line_end":654,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729868,"byte_end":9729879,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9729880,"byte_end":9729897,"line_start":656,"line_end":656,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730629,"byte_end":9730649,"line_start":678,"line_end":678,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730058,"byte_end":9730098,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730099,"byte_end":9730102,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730103,"byte_end":9730161,"line_start":664,"line_end":664,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730162,"byte_end":9730169,"line_start":665,"line_end":665,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730170,"byte_end":9730193,"line_start":666,"line_end":666,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730194,"byte_end":9730205,"line_start":667,"line_end":667,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730206,"byte_end":9730288,"line_start":668,"line_end":668,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730289,"byte_end":9730314,"line_start":669,"line_end":669,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730315,"byte_end":9730385,"line_start":670,"line_end":670,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730386,"byte_end":9730393,"line_start":671,"line_end":671,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730394,"byte_end":9730450,"line_start":672,"line_end":672,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730451,"byte_end":9730527,"line_start":673,"line_end":673,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730528,"byte_end":9730535,"line_start":674,"line_end":674,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730536,"byte_end":9730547,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730548,"byte_end":9730565,"line_start":676,"line_end":676,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731194,"byte_end":9731215,"line_start":695,"line_end":695,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730729,"byte_end":9730770,"line_start":682,"line_end":682,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730771,"byte_end":9730774,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730775,"byte_end":9730833,"line_start":684,"line_end":684,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730834,"byte_end":9730841,"line_start":685,"line_end":685,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730842,"byte_end":9730865,"line_start":686,"line_end":686,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730866,"byte_end":9730925,"line_start":687,"line_end":687,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730926,"byte_end":9730987,"line_start":688,"line_end":688,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9730988,"byte_end":9731045,"line_start":689,"line_end":689,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731046,"byte_end":9731092,"line_start":690,"line_end":690,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731093,"byte_end":9731100,"line_start":691,"line_end":691,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731101,"byte_end":9731112,"line_start":692,"line_end":692,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731113,"byte_end":9731130,"line_start":693,"line_end":693,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731706,"byte_end":9731727,"line_start":712,"line_end":712,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731296,"byte_end":9731337,"line_start":699,"line_end":699,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731338,"byte_end":9731341,"line_start":700,"line_end":700,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731342,"byte_end":9731400,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731401,"byte_end":9731408,"line_start":702,"line_end":702,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731409,"byte_end":9731432,"line_start":703,"line_end":703,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731433,"byte_end":9731473,"line_start":704,"line_end":704,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731474,"byte_end":9731512,"line_start":705,"line_end":705,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731513,"byte_end":9731570,"line_start":706,"line_end":706,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731571,"byte_end":9731604,"line_start":707,"line_end":707,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731605,"byte_end":9731612,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731613,"byte_end":9731624,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731625,"byte_end":9731642,"line_start":710,"line_end":710,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732151,"byte_end":9732168,"line_start":729,"line_end":729,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731808,"byte_end":9731829,"line_start":716,"line_end":716,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731830,"byte_end":9731833,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731834,"byte_end":9731850,"line_start":718,"line_end":718,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731851,"byte_end":9731858,"line_start":719,"line_end":719,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731859,"byte_end":9731882,"line_start":720,"line_end":720,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731883,"byte_end":9731925,"line_start":721,"line_end":721,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731926,"byte_end":9731968,"line_start":722,"line_end":722,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9731969,"byte_end":9732015,"line_start":723,"line_end":723,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732016,"byte_end":9732049,"line_start":724,"line_end":724,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732050,"byte_end":9732057,"line_start":725,"line_end":725,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732058,"byte_end":9732069,"line_start":726,"line_end":726,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732070,"byte_end":9732087,"line_start":727,"line_end":727,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732627,"byte_end":9732646,"line_start":746,"line_end":746,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732246,"byte_end":9732289,"line_start":733,"line_end":733,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732290,"byte_end":9732293,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732294,"byte_end":9732310,"line_start":735,"line_end":735,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732311,"byte_end":9732318,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732319,"byte_end":9732342,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732343,"byte_end":9732385,"line_start":738,"line_end":738,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732386,"byte_end":9732428,"line_start":739,"line_end":739,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732429,"byte_end":9732477,"line_start":740,"line_end":740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732478,"byte_end":9732525,"line_start":741,"line_end":741,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732526,"byte_end":9732533,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732534,"byte_end":9732545,"line_start":743,"line_end":743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732546,"byte_end":9732563,"line_start":744,"line_end":744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733069,"byte_end":9733087,"line_start":763,"line_end":763,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732724,"byte_end":9732746,"line_start":750,"line_end":750,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732747,"byte_end":9732750,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732751,"byte_end":9732767,"line_start":752,"line_end":752,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732768,"byte_end":9732775,"line_start":753,"line_end":753,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732776,"byte_end":9732799,"line_start":754,"line_end":754,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732800,"byte_end":9732842,"line_start":755,"line_end":755,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732843,"byte_end":9732885,"line_start":756,"line_end":756,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732886,"byte_end":9732933,"line_start":757,"line_end":757,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732934,"byte_end":9732967,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732968,"byte_end":9732975,"line_start":759,"line_end":759,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732976,"byte_end":9732987,"line_start":760,"line_end":760,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9732988,"byte_end":9733005,"line_start":761,"line_end":761,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733549,"byte_end":9733569,"line_start":780,"line_end":780,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733166,"byte_end":9733210,"line_start":767,"line_end":767,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733211,"byte_end":9733214,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733215,"byte_end":9733231,"line_start":769,"line_end":769,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733232,"byte_end":9733239,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733240,"byte_end":9733263,"line_start":771,"line_end":771,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733264,"byte_end":9733306,"line_start":772,"line_end":772,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733307,"byte_end":9733349,"line_start":773,"line_end":773,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733350,"byte_end":9733399,"line_start":774,"line_end":774,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733400,"byte_end":9733447,"line_start":775,"line_end":775,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733448,"byte_end":9733455,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733456,"byte_end":9733467,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733468,"byte_end":9733485,"line_start":778,"line_end":778,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733996,"byte_end":9734014,"line_start":797,"line_end":797,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733648,"byte_end":9733673,"line_start":784,"line_end":784,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733674,"byte_end":9733677,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733678,"byte_end":9733694,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733695,"byte_end":9733702,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733703,"byte_end":9733726,"line_start":788,"line_end":788,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733727,"byte_end":9733769,"line_start":789,"line_end":789,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733770,"byte_end":9733812,"line_start":790,"line_end":790,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733813,"byte_end":9733860,"line_start":791,"line_end":791,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733861,"byte_end":9733894,"line_start":792,"line_end":792,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733895,"byte_end":9733902,"line_start":793,"line_end":793,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733903,"byte_end":9733914,"line_start":794,"line_end":794,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9733915,"byte_end":9733932,"line_start":795,"line_end":795,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734472,"byte_end":9734492,"line_start":814,"line_end":814,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734093,"byte_end":9734140,"line_start":801,"line_end":801,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734141,"byte_end":9734144,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734145,"byte_end":9734161,"line_start":803,"line_end":803,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734162,"byte_end":9734169,"line_start":804,"line_end":804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734170,"byte_end":9734193,"line_start":805,"line_end":805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734194,"byte_end":9734236,"line_start":806,"line_end":806,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734237,"byte_end":9734279,"line_start":807,"line_end":807,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734280,"byte_end":9734329,"line_start":808,"line_end":808,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734330,"byte_end":9734370,"line_start":809,"line_end":809,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734371,"byte_end":9734378,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734379,"byte_end":9734390,"line_start":811,"line_end":811,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734391,"byte_end":9734408,"line_start":812,"line_end":812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734918,"byte_end":9734936,"line_start":831,"line_end":831,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734571,"byte_end":9734595,"line_start":818,"line_end":818,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734596,"byte_end":9734599,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734600,"byte_end":9734616,"line_start":820,"line_end":820,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734617,"byte_end":9734624,"line_start":821,"line_end":821,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734625,"byte_end":9734648,"line_start":822,"line_end":822,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734649,"byte_end":9734691,"line_start":823,"line_end":823,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734692,"byte_end":9734734,"line_start":824,"line_end":824,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734735,"byte_end":9734782,"line_start":825,"line_end":825,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734783,"byte_end":9734816,"line_start":826,"line_end":826,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734817,"byte_end":9734824,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734825,"byte_end":9734836,"line_start":828,"line_end":828,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9734837,"byte_end":9734854,"line_start":829,"line_end":829,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735393,"byte_end":9735413,"line_start":848,"line_end":848,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735015,"byte_end":9735061,"line_start":835,"line_end":835,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735062,"byte_end":9735065,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735066,"byte_end":9735082,"line_start":837,"line_end":837,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735083,"byte_end":9735090,"line_start":838,"line_end":838,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735091,"byte_end":9735114,"line_start":839,"line_end":839,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735115,"byte_end":9735157,"line_start":840,"line_end":840,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735158,"byte_end":9735200,"line_start":841,"line_end":841,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735201,"byte_end":9735250,"line_start":842,"line_end":842,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735251,"byte_end":9735291,"line_start":843,"line_end":843,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735292,"byte_end":9735299,"line_start":844,"line_end":844,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735300,"byte_end":9735311,"line_start":845,"line_end":845,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735312,"byte_end":9735329,"line_start":846,"line_end":846,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735840,"byte_end":9735858,"line_start":865,"line_end":865,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735492,"byte_end":9735517,"line_start":852,"line_end":852,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735518,"byte_end":9735521,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735522,"byte_end":9735538,"line_start":854,"line_end":854,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735539,"byte_end":9735546,"line_start":855,"line_end":855,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735547,"byte_end":9735570,"line_start":856,"line_end":856,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735571,"byte_end":9735613,"line_start":857,"line_end":857,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735614,"byte_end":9735656,"line_start":858,"line_end":858,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735657,"byte_end":9735704,"line_start":859,"line_end":859,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735705,"byte_end":9735738,"line_start":860,"line_end":860,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735739,"byte_end":9735746,"line_start":861,"line_end":861,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735747,"byte_end":9735758,"line_start":862,"line_end":862,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735759,"byte_end":9735776,"line_start":863,"line_end":863,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736323,"byte_end":9736343,"line_start":882,"line_end":882,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735937,"byte_end":9735984,"line_start":869,"line_end":869,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735985,"byte_end":9735988,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9735989,"byte_end":9736005,"line_start":871,"line_end":871,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736006,"byte_end":9736013,"line_start":872,"line_end":872,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736014,"byte_end":9736037,"line_start":873,"line_end":873,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736038,"byte_end":9736080,"line_start":874,"line_end":874,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736081,"byte_end":9736123,"line_start":875,"line_end":875,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736124,"byte_end":9736173,"line_start":876,"line_end":876,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736174,"byte_end":9736221,"line_start":877,"line_end":877,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736222,"byte_end":9736229,"line_start":878,"line_end":878,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736230,"byte_end":9736241,"line_start":879,"line_end":879,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736242,"byte_end":9736259,"line_start":880,"line_end":880,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736769,"byte_end":9736787,"line_start":899,"line_end":899,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736422,"byte_end":9736446,"line_start":886,"line_end":886,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736447,"byte_end":9736450,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736451,"byte_end":9736467,"line_start":888,"line_end":888,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736468,"byte_end":9736475,"line_start":889,"line_end":889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736476,"byte_end":9736499,"line_start":890,"line_end":890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736500,"byte_end":9736542,"line_start":891,"line_end":891,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736543,"byte_end":9736585,"line_start":892,"line_end":892,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736586,"byte_end":9736633,"line_start":893,"line_end":893,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736634,"byte_end":9736667,"line_start":894,"line_end":894,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736668,"byte_end":9736675,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736676,"byte_end":9736687,"line_start":896,"line_end":896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736688,"byte_end":9736705,"line_start":897,"line_end":897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737251,"byte_end":9737271,"line_start":916,"line_end":916,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736866,"byte_end":9736912,"line_start":903,"line_end":903,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736913,"byte_end":9736916,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736917,"byte_end":9736933,"line_start":905,"line_end":905,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736934,"byte_end":9736941,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736942,"byte_end":9736965,"line_start":907,"line_end":907,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9736966,"byte_end":9737008,"line_start":908,"line_end":908,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737009,"byte_end":9737051,"line_start":909,"line_end":909,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737052,"byte_end":9737101,"line_start":910,"line_end":910,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737102,"byte_end":9737149,"line_start":911,"line_end":911,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737150,"byte_end":9737157,"line_start":912,"line_end":912,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737158,"byte_end":9737169,"line_start":913,"line_end":913,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737170,"byte_end":9737187,"line_start":914,"line_end":914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737728,"byte_end":9737751,"line_start":933,"line_end":933,"column_start":8,"column_end":31},"name":"cmp_ordinary_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d","value":"pub fn cmp_ordinary_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737350,"byte_end":9737395,"line_start":920,"line_end":920,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737396,"byte_end":9737399,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737400,"byte_end":9737416,"line_start":922,"line_end":922,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737417,"byte_end":9737424,"line_start":923,"line_end":923,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737425,"byte_end":9737448,"line_start":924,"line_end":924,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737449,"byte_end":9737496,"line_start":925,"line_end":925,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737497,"byte_end":9737539,"line_start":926,"line_end":926,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737540,"byte_end":9737592,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737593,"byte_end":9737626,"line_start":928,"line_end":928,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737627,"byte_end":9737634,"line_start":929,"line_end":929,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737635,"byte_end":9737646,"line_start":930,"line_end":930,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737647,"byte_end":9737664,"line_start":931,"line_end":931,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738241,"byte_end":9738266,"line_start":950,"line_end":950,"column_start":8,"column_end":33},"name":"cmp_ordinary_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordinary_mask_m128d_s","value":"pub fn cmp_ordinary_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737830,"byte_end":9737897,"line_start":937,"line_end":937,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737898,"byte_end":9737901,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737902,"byte_end":9737918,"line_start":939,"line_end":939,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737919,"byte_end":9737926,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737927,"byte_end":9737950,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737951,"byte_end":9737993,"line_start":942,"line_end":942,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9737994,"byte_end":9738036,"line_start":943,"line_end":943,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordinary_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738037,"byte_end":9738091,"line_start":944,"line_end":944,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738092,"byte_end":9738139,"line_start":945,"line_end":945,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738140,"byte_end":9738147,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738148,"byte_end":9738159,"line_start":947,"line_end":947,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738160,"byte_end":9738177,"line_start":948,"line_end":948,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738714,"byte_end":9738734,"line_start":967,"line_end":967,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738345,"byte_end":9738384,"line_start":954,"line_end":954,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738385,"byte_end":9738388,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738389,"byte_end":9738405,"line_start":956,"line_end":956,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738406,"byte_end":9738413,"line_start":957,"line_end":957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738414,"byte_end":9738437,"line_start":958,"line_end":958,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738438,"byte_end":9738485,"line_start":959,"line_end":959,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738486,"byte_end":9738528,"line_start":960,"line_end":960,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738529,"byte_end":9738578,"line_start":961,"line_end":961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738579,"byte_end":9738612,"line_start":962,"line_end":962,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738613,"byte_end":9738620,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738621,"byte_end":9738632,"line_start":964,"line_end":964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738633,"byte_end":9738650,"line_start":965,"line_end":965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739222,"byte_end":9739244,"line_start":984,"line_end":984,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738815,"byte_end":9738876,"line_start":971,"line_end":971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738877,"byte_end":9738880,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738881,"byte_end":9738897,"line_start":973,"line_end":973,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738898,"byte_end":9738905,"line_start":974,"line_end":974,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738906,"byte_end":9738929,"line_start":975,"line_end":975,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738930,"byte_end":9738977,"line_start":976,"line_end":976,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9738978,"byte_end":9739020,"line_start":977,"line_end":977,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739021,"byte_end":9739072,"line_start":978,"line_end":978,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739073,"byte_end":9739120,"line_start":979,"line_end":979,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739121,"byte_end":9739128,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739129,"byte_end":9739140,"line_start":981,"line_end":981,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739141,"byte_end":9739158,"line_start":982,"line_end":982,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739644,"byte_end":9739662,"line_start":1000,"line_end":1000,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739325,"byte_end":9739353,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739354,"byte_end":9739357,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739358,"byte_end":9739375,"line_start":990,"line_end":990,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739376,"byte_end":9739383,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739384,"byte_end":9739407,"line_start":992,"line_end":992,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739408,"byte_end":9739450,"line_start":993,"line_end":993,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739451,"byte_end":9739493,"line_start":994,"line_end":994,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739494,"byte_end":9739542,"line_start":995,"line_end":995,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739543,"byte_end":9739550,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739551,"byte_end":9739562,"line_start":997,"line_end":997,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739563,"byte_end":9739580,"line_start":998,"line_end":998,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740067,"byte_end":9740085,"line_start":1016,"line_end":1016,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739732,"byte_end":9739776,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739777,"byte_end":9739780,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739781,"byte_end":9739798,"line_start":1006,"line_end":1006,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739799,"byte_end":9739806,"line_start":1007,"line_end":1007,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739807,"byte_end":9739830,"line_start":1008,"line_end":1008,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739831,"byte_end":9739873,"line_start":1009,"line_end":1009,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739874,"byte_end":9739916,"line_start":1010,"line_end":1010,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739917,"byte_end":9739965,"line_start":1011,"line_end":1011,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739966,"byte_end":9739973,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739974,"byte_end":9739985,"line_start":1013,"line_end":1013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9739986,"byte_end":9740003,"line_start":1014,"line_end":1014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740478,"byte_end":9740496,"line_start":1032,"line_end":1032,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740155,"byte_end":9740187,"line_start":1020,"line_end":1020,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740188,"byte_end":9740191,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740192,"byte_end":9740209,"line_start":1022,"line_end":1022,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740210,"byte_end":9740217,"line_start":1023,"line_end":1023,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740218,"byte_end":9740241,"line_start":1024,"line_end":1024,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740242,"byte_end":9740284,"line_start":1025,"line_end":1025,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740285,"byte_end":9740327,"line_start":1026,"line_end":1026,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740328,"byte_end":9740376,"line_start":1027,"line_end":1027,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740377,"byte_end":9740384,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740385,"byte_end":9740396,"line_start":1029,"line_end":1029,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740397,"byte_end":9740414,"line_start":1030,"line_end":1030,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740898,"byte_end":9740916,"line_start":1048,"line_end":1048,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740566,"byte_end":9740607,"line_start":1036,"line_end":1036,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740608,"byte_end":9740611,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740612,"byte_end":9740629,"line_start":1038,"line_end":1038,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740630,"byte_end":9740637,"line_start":1039,"line_end":1039,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740638,"byte_end":9740661,"line_start":1040,"line_end":1040,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740662,"byte_end":9740704,"line_start":1041,"line_end":1041,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740705,"byte_end":9740747,"line_start":1042,"line_end":1042,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740748,"byte_end":9740796,"line_start":1043,"line_end":1043,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740797,"byte_end":9740804,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740805,"byte_end":9740816,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740817,"byte_end":9740834,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741306,"byte_end":9741324,"line_start":1064,"line_end":1064,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9740986,"byte_end":9741015,"line_start":1052,"line_end":1052,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741016,"byte_end":9741019,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741020,"byte_end":9741037,"line_start":1054,"line_end":1054,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741038,"byte_end":9741045,"line_start":1055,"line_end":1055,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741046,"byte_end":9741069,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741070,"byte_end":9741112,"line_start":1057,"line_end":1057,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741113,"byte_end":9741155,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741156,"byte_end":9741204,"line_start":1059,"line_end":1059,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741205,"byte_end":9741212,"line_start":1060,"line_end":1060,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741213,"byte_end":9741224,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741225,"byte_end":9741242,"line_start":1062,"line_end":1062,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741715,"byte_end":9741734,"line_start":1080,"line_end":1080,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741394,"byte_end":9741423,"line_start":1068,"line_end":1068,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741424,"byte_end":9741427,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741428,"byte_end":9741445,"line_start":1070,"line_end":1070,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741446,"byte_end":9741453,"line_start":1071,"line_end":1071,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741454,"byte_end":9741477,"line_start":1072,"line_end":1072,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741478,"byte_end":9741520,"line_start":1073,"line_end":1073,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741521,"byte_end":9741563,"line_start":1074,"line_end":1074,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741564,"byte_end":9741613,"line_start":1075,"line_end":1075,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741614,"byte_end":9741621,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741622,"byte_end":9741633,"line_start":1077,"line_end":1077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741634,"byte_end":9741651,"line_start":1078,"line_end":1078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742255,"byte_end":9742293,"line_start":1097,"line_end":1097,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741805,"byte_end":9741861,"line_start":1084,"line_end":1084,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741862,"byte_end":9741869,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741870,"byte_end":9741893,"line_start":1086,"line_end":1086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741894,"byte_end":9741932,"line_start":1087,"line_end":1087,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741933,"byte_end":9741987,"line_start":1088,"line_end":1088,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9741988,"byte_end":9742030,"line_start":1089,"line_end":1089,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742031,"byte_end":9742072,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742073,"byte_end":9742080,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742081,"byte_end":9742121,"line_start":1092,"line_end":1092,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742122,"byte_end":9742161,"line_start":1093,"line_end":1093,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742162,"byte_end":9742173,"line_start":1094,"line_end":1094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742174,"byte_end":9742191,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742806,"byte_end":9742836,"line_start":1114,"line_end":1114,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742359,"byte_end":9742411,"line_start":1101,"line_end":1101,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742412,"byte_end":9742419,"line_start":1102,"line_end":1102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742420,"byte_end":9742443,"line_start":1103,"line_end":1103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742444,"byte_end":9742482,"line_start":1104,"line_end":1104,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742483,"byte_end":9742529,"line_start":1105,"line_end":1105,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742530,"byte_end":9742581,"line_start":1106,"line_end":1106,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742582,"byte_end":9742623,"line_start":1107,"line_end":1107,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742624,"byte_end":9742631,"line_start":1108,"line_end":1108,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742632,"byte_end":9742672,"line_start":1109,"line_end":1109,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742673,"byte_end":9742712,"line_start":1110,"line_end":1110,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742713,"byte_end":9742724,"line_start":1111,"line_end":1111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742725,"byte_end":9742742,"line_start":1112,"line_end":1112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743329,"byte_end":9743360,"line_start":1131,"line_end":1131,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742900,"byte_end":9742958,"line_start":1118,"line_end":1118,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742959,"byte_end":9742966,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742967,"byte_end":9742990,"line_start":1120,"line_end":1120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9742991,"byte_end":9743033,"line_start":1121,"line_end":1121,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743034,"byte_end":9743081,"line_start":1122,"line_end":1122,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743082,"byte_end":9743113,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743114,"byte_end":9743146,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743147,"byte_end":9743154,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743155,"byte_end":9743195,"line_start":1126,"line_end":1126,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743196,"byte_end":9743235,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743236,"byte_end":9743247,"line_start":1128,"line_end":1128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743248,"byte_end":9743265,"line_start":1129,"line_end":1129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743855,"byte_end":9743881,"line_start":1147,"line_end":1147,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743426,"byte_end":9743484,"line_start":1135,"line_end":1135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743485,"byte_end":9743492,"line_start":1136,"line_end":1136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743493,"byte_end":9743516,"line_start":1137,"line_end":1137,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743517,"byte_end":9743559,"line_start":1138,"line_end":1138,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743560,"byte_end":9743602,"line_start":1139,"line_end":1139,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743603,"byte_end":9743675,"line_start":1140,"line_end":1140,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743676,"byte_end":9743683,"line_start":1141,"line_end":1141,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743684,"byte_end":9743721,"line_start":1142,"line_end":1142,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743722,"byte_end":9743761,"line_start":1143,"line_end":1143,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743762,"byte_end":9743773,"line_start":1144,"line_end":1144,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743774,"byte_end":9743791,"line_start":1145,"line_end":1145,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744363,"byte_end":9744393,"line_start":1164,"line_end":1164,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743942,"byte_end":9743984,"line_start":1151,"line_end":1151,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743985,"byte_end":9743992,"line_start":1152,"line_end":1152,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9743993,"byte_end":9744016,"line_start":1153,"line_end":1153,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744017,"byte_end":9744068,"line_start":1154,"line_end":1154,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744069,"byte_end":9744115,"line_start":1155,"line_end":1155,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744116,"byte_end":9744147,"line_start":1156,"line_end":1156,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744148,"byte_end":9744180,"line_start":1157,"line_end":1157,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744181,"byte_end":9744188,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744189,"byte_end":9744229,"line_start":1159,"line_end":1159,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744230,"byte_end":9744269,"line_start":1160,"line_end":1160,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744270,"byte_end":9744281,"line_start":1161,"line_end":1161,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744282,"byte_end":9744299,"line_start":1162,"line_end":1162,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744897,"byte_end":9744930,"line_start":1180,"line_end":1180,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744458,"byte_end":9744516,"line_start":1168,"line_end":1168,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744517,"byte_end":9744524,"line_start":1169,"line_end":1169,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744525,"byte_end":9744548,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744549,"byte_end":9744600,"line_start":1171,"line_end":1171,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744601,"byte_end":9744650,"line_start":1172,"line_end":1172,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744651,"byte_end":9744717,"line_start":1173,"line_end":1173,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744718,"byte_end":9744725,"line_start":1174,"line_end":1174,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744726,"byte_end":9744763,"line_start":1175,"line_end":1175,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744764,"byte_end":9744803,"line_start":1176,"line_end":1176,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744804,"byte_end":9744815,"line_start":1177,"line_end":1177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744816,"byte_end":9744833,"line_start":1178,"line_end":1178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745276,"byte_end":9745296,"line_start":1194,"line_end":1194,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9744992,"byte_end":9745034,"line_start":1184,"line_end":1184,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745035,"byte_end":9745042,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745043,"byte_end":9745066,"line_start":1186,"line_end":1186,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745067,"byte_end":9745109,"line_start":1187,"line_end":1187,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745110,"byte_end":9745146,"line_start":1188,"line_end":1188,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745147,"byte_end":9745174,"line_start":1189,"line_end":1189,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745175,"byte_end":9745182,"line_start":1190,"line_end":1190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745183,"byte_end":9745194,"line_start":1191,"line_end":1191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745195,"byte_end":9745212,"line_start":1192,"line_end":1192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745637,"byte_end":9745657,"line_start":1208,"line_end":1208,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745351,"byte_end":9745397,"line_start":1198,"line_end":1198,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745398,"byte_end":9745405,"line_start":1199,"line_end":1199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745406,"byte_end":9745429,"line_start":1200,"line_end":1200,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745430,"byte_end":9745472,"line_start":1201,"line_end":1201,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745473,"byte_end":9745509,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745510,"byte_end":9745535,"line_start":1203,"line_end":1203,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745536,"byte_end":9745543,"line_start":1204,"line_end":1204,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745544,"byte_end":9745555,"line_start":1205,"line_end":1205,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745556,"byte_end":9745573,"line_start":1206,"line_end":1206,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746030,"byte_end":9746050,"line_start":1223,"line_end":1223,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745713,"byte_end":9745759,"line_start":1212,"line_end":1212,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745760,"byte_end":9745767,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745768,"byte_end":9745791,"line_start":1214,"line_end":1214,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745792,"byte_end":9745834,"line_start":1215,"line_end":1215,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745835,"byte_end":9745871,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745872,"byte_end":9745897,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745898,"byte_end":9745905,"line_start":1218,"line_end":1218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745906,"byte_end":9745917,"line_start":1219,"line_end":1219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745918,"byte_end":9745935,"line_start":1220,"line_end":1220,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9745936,"byte_end":9745966,"line_start":1221,"line_end":1221,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746621,"byte_end":9746651,"line_start":1241,"line_end":1241,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746106,"byte_end":9746181,"line_start":1227,"line_end":1227,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746182,"byte_end":9746189,"line_start":1228,"line_end":1228,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746190,"byte_end":9746213,"line_start":1229,"line_end":1229,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746214,"byte_end":9746265,"line_start":1230,"line_end":1230,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746266,"byte_end":9746308,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746309,"byte_end":9746358,"line_start":1232,"line_end":1232,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746359,"byte_end":9746410,"line_start":1233,"line_end":1233,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746411,"byte_end":9746418,"line_start":1234,"line_end":1234,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746419,"byte_end":9746456,"line_start":1235,"line_end":1235,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746457,"byte_end":9746496,"line_start":1236,"line_end":1236,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746497,"byte_end":9746508,"line_start":1237,"line_end":1237,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746509,"byte_end":9746526,"line_start":1238,"line_end":1238,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746527,"byte_end":9746557,"line_start":1239,"line_end":1239,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747008,"byte_end":9747028,"line_start":1255,"line_end":1255,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746726,"byte_end":9746772,"line_start":1245,"line_end":1245,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746773,"byte_end":9746780,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746781,"byte_end":9746804,"line_start":1247,"line_end":1247,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746805,"byte_end":9746843,"line_start":1248,"line_end":1248,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746844,"byte_end":9746880,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746881,"byte_end":9746906,"line_start":1250,"line_end":1250,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746907,"byte_end":9746914,"line_start":1251,"line_end":1251,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746915,"byte_end":9746926,"line_start":1252,"line_end":1252,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9746927,"byte_end":9746944,"line_start":1253,"line_end":1253,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747398,"byte_end":9747418,"line_start":1270,"line_end":1270,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747087,"byte_end":9747133,"line_start":1259,"line_end":1259,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747134,"byte_end":9747141,"line_start":1260,"line_end":1260,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747142,"byte_end":9747165,"line_start":1261,"line_end":1261,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747166,"byte_end":9747202,"line_start":1262,"line_end":1262,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747203,"byte_end":9747239,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747240,"byte_end":9747265,"line_start":1264,"line_end":1264,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747266,"byte_end":9747273,"line_start":1265,"line_end":1265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747274,"byte_end":9747285,"line_start":1266,"line_end":1266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747286,"byte_end":9747303,"line_start":1267,"line_end":1267,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747304,"byte_end":9747334,"line_start":1268,"line_end":1268,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747892,"byte_end":9747919,"line_start":1286,"line_end":1286,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747477,"byte_end":9747542,"line_start":1274,"line_end":1274,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747543,"byte_end":9747550,"line_start":1275,"line_end":1275,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747551,"byte_end":9747574,"line_start":1276,"line_end":1276,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747575,"byte_end":9747617,"line_start":1277,"line_end":1277,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747618,"byte_end":9747668,"line_start":1278,"line_end":1278,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747669,"byte_end":9747710,"line_start":1279,"line_end":1279,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747711,"byte_end":9747718,"line_start":1280,"line_end":1280,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747719,"byte_end":9747758,"line_start":1281,"line_end":1281,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747759,"byte_end":9747798,"line_start":1282,"line_end":1282,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747799,"byte_end":9747810,"line_start":1283,"line_end":1283,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747811,"byte_end":9747828,"line_start":1284,"line_end":1284,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748333,"byte_end":9748348,"line_start":1300,"line_end":1300,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9747995,"byte_end":9748068,"line_start":1290,"line_end":1290,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748069,"byte_end":9748076,"line_start":1291,"line_end":1291,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748077,"byte_end":9748100,"line_start":1292,"line_end":1292,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748101,"byte_end":9748153,"line_start":1293,"line_end":1293,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748154,"byte_end":9748209,"line_start":1294,"line_end":1294,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748210,"byte_end":9748231,"line_start":1295,"line_end":1295,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748232,"byte_end":9748239,"line_start":1296,"line_end":1296,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748240,"byte_end":9748251,"line_start":1297,"line_end":1297,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748252,"byte_end":9748269,"line_start":1298,"line_end":1298,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748858,"byte_end":9748885,"line_start":1317,"line_end":1317,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748412,"byte_end":9748477,"line_start":1304,"line_end":1304,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748478,"byte_end":9748485,"line_start":1305,"line_end":1305,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748486,"byte_end":9748509,"line_start":1306,"line_end":1306,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748510,"byte_end":9748552,"line_start":1307,"line_end":1307,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748553,"byte_end":9748603,"line_start":1308,"line_end":1308,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748604,"byte_end":9748645,"line_start":1309,"line_end":1309,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748646,"byte_end":9748653,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748654,"byte_end":9748693,"line_start":1311,"line_end":1311,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748694,"byte_end":9748733,"line_start":1312,"line_end":1312,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748734,"byte_end":9748745,"line_start":1313,"line_end":1313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748746,"byte_end":9748763,"line_start":1314,"line_end":1314,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748764,"byte_end":9748794,"line_start":1315,"line_end":1315,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749328,"byte_end":9749343,"line_start":1332,"line_end":1332,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9748961,"byte_end":9749034,"line_start":1321,"line_end":1321,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749035,"byte_end":9749042,"line_start":1322,"line_end":1322,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749043,"byte_end":9749066,"line_start":1323,"line_end":1323,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749067,"byte_end":9749119,"line_start":1324,"line_end":1324,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749120,"byte_end":9749173,"line_start":1325,"line_end":1325,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749174,"byte_end":9749195,"line_start":1326,"line_end":1326,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749196,"byte_end":9749203,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749204,"byte_end":9749215,"line_start":1328,"line_end":1328,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749216,"byte_end":9749233,"line_start":1329,"line_end":1329,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749234,"byte_end":9749264,"line_start":1330,"line_end":1330,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749881,"byte_end":9749911,"line_start":1349,"line_end":1349,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749407,"byte_end":9749482,"line_start":1336,"line_end":1336,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749483,"byte_end":9749490,"line_start":1337,"line_end":1337,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749491,"byte_end":9749514,"line_start":1338,"line_end":1338,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749515,"byte_end":9749557,"line_start":1339,"line_end":1339,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749558,"byte_end":9749609,"line_start":1340,"line_end":1340,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749610,"byte_end":9749659,"line_start":1341,"line_end":1341,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749660,"byte_end":9749701,"line_start":1342,"line_end":1342,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749702,"byte_end":9749709,"line_start":1343,"line_end":1343,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749710,"byte_end":9749747,"line_start":1344,"line_end":1344,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749748,"byte_end":9749787,"line_start":1345,"line_end":1345,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749788,"byte_end":9749799,"line_start":1346,"line_end":1346,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749800,"byte_end":9749817,"line_start":1347,"line_end":1347,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750332,"byte_end":9750355,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9749988,"byte_end":9750064,"line_start":1353,"line_end":1353,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750065,"byte_end":9750072,"line_start":1354,"line_end":1354,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750073,"byte_end":9750096,"line_start":1355,"line_end":1355,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750097,"byte_end":9750139,"line_start":1356,"line_end":1356,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750140,"byte_end":9750179,"line_start":1357,"line_end":1357,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750180,"byte_end":9750230,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750231,"byte_end":9750238,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750239,"byte_end":9750250,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750251,"byte_end":9750268,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750742,"byte_end":9750764,"line_start":1377,"line_end":1377,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750422,"byte_end":9750466,"line_start":1367,"line_end":1367,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750467,"byte_end":9750474,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750475,"byte_end":9750498,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750499,"byte_end":9750550,"line_start":1370,"line_end":1370,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750551,"byte_end":9750589,"line_start":1371,"line_end":1371,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750590,"byte_end":9750640,"line_start":1372,"line_end":1372,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750641,"byte_end":9750648,"line_start":1373,"line_end":1373,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750649,"byte_end":9750660,"line_start":1374,"line_end":1374,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750661,"byte_end":9750678,"line_start":1375,"line_end":1375,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751100,"byte_end":9751123,"line_start":1390,"line_end":1390,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750830,"byte_end":9750872,"line_start":1381,"line_end":1381,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750873,"byte_end":9750880,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750881,"byte_end":9750904,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750905,"byte_end":9750947,"line_start":1384,"line_end":1384,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750948,"byte_end":9750998,"line_start":1385,"line_end":1385,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9750999,"byte_end":9751006,"line_start":1386,"line_end":1386,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751007,"byte_end":9751018,"line_start":1387,"line_end":1387,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751019,"byte_end":9751036,"line_start":1388,"line_end":1388,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751481,"byte_end":9751504,"line_start":1404,"line_end":1404,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751180,"byte_end":9751222,"line_start":1394,"line_end":1394,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751223,"byte_end":9751230,"line_start":1395,"line_end":1395,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751231,"byte_end":9751254,"line_start":1396,"line_end":1396,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751255,"byte_end":9751297,"line_start":1397,"line_end":1397,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751298,"byte_end":9751348,"line_start":1398,"line_end":1398,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751349,"byte_end":9751356,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751357,"byte_end":9751368,"line_start":1400,"line_end":1400,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751369,"byte_end":9751386,"line_start":1401,"line_end":1401,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751387,"byte_end":9751417,"line_start":1402,"line_end":1402,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751880,"byte_end":9751889,"line_start":1419,"line_end":1419,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751561,"byte_end":9751582,"line_start":1408,"line_end":1408,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751583,"byte_end":9751590,"line_start":1409,"line_end":1409,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751591,"byte_end":9751614,"line_start":1410,"line_end":1410,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751615,"byte_end":9751659,"line_start":1411,"line_end":1411,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751660,"byte_end":9751705,"line_start":1412,"line_end":1412,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751706,"byte_end":9751745,"line_start":1413,"line_end":1413,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751746,"byte_end":9751778,"line_start":1414,"line_end":1414,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751779,"byte_end":9751786,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751787,"byte_end":9751798,"line_start":1416,"line_end":1416,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751799,"byte_end":9751816,"line_start":1417,"line_end":1417,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752312,"byte_end":9752323,"line_start":1434,"line_end":1434,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9751965,"byte_end":9752010,"line_start":1423,"line_end":1423,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752011,"byte_end":9752018,"line_start":1424,"line_end":1424,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752019,"byte_end":9752042,"line_start":1425,"line_end":1425,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752043,"byte_end":9752087,"line_start":1426,"line_end":1426,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752088,"byte_end":9752135,"line_start":1427,"line_end":1427,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752136,"byte_end":9752177,"line_start":1428,"line_end":1428,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752178,"byte_end":9752210,"line_start":1429,"line_end":1429,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752211,"byte_end":9752218,"line_start":1430,"line_end":1430,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752219,"byte_end":9752230,"line_start":1431,"line_end":1431,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9752231,"byte_end":9752248,"line_start":1432,"line_end":1432,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754899,"byte_end":9754909,"line_start":1510,"line_end":1510,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754610,"byte_end":9754650,"line_start":1500,"line_end":1500,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754651,"byte_end":9754658,"line_start":1501,"line_end":1501,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754659,"byte_end":9754682,"line_start":1502,"line_end":1502,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754683,"byte_end":9754727,"line_start":1503,"line_end":1503,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754728,"byte_end":9754755,"line_start":1504,"line_end":1504,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754756,"byte_end":9754797,"line_start":1505,"line_end":1505,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754798,"byte_end":9754805,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754806,"byte_end":9754817,"line_start":1507,"line_end":1507,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9754818,"byte_end":9754835,"line_start":1508,"line_end":1508,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755363,"byte_end":9755383,"line_start":1525,"line_end":1525,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755000,"byte_end":9755059,"line_start":1514,"line_end":1514,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755060,"byte_end":9755067,"line_start":1515,"line_end":1515,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755068,"byte_end":9755091,"line_start":1516,"line_end":1516,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755092,"byte_end":9755108,"line_start":1517,"line_end":1517,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755109,"byte_end":9755146,"line_start":1518,"line_end":1518,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755147,"byte_end":9755216,"line_start":1519,"line_end":1519,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755217,"byte_end":9755224,"line_start":1520,"line_end":1520,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755225,"byte_end":9755236,"line_start":1521,"line_end":1521,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755237,"byte_end":9755254,"line_start":1522,"line_end":1522,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755255,"byte_end":9755299,"line_start":1523,"line_end":1523,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755801,"byte_end":9755817,"line_start":1540,"line_end":1540,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755443,"byte_end":9755501,"line_start":1529,"line_end":1529,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755502,"byte_end":9755509,"line_start":1530,"line_end":1530,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755510,"byte_end":9755533,"line_start":1531,"line_end":1531,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755534,"byte_end":9755550,"line_start":1532,"line_end":1532,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755551,"byte_end":9755584,"line_start":1533,"line_end":1533,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755585,"byte_end":9755654,"line_start":1534,"line_end":1534,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755655,"byte_end":9755662,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755663,"byte_end":9755674,"line_start":1536,"line_end":1536,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755675,"byte_end":9755692,"line_start":1537,"line_end":1537,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755693,"byte_end":9755737,"line_start":1538,"line_end":1538,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756175,"byte_end":9756185,"line_start":1554,"line_end":1554,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755876,"byte_end":9755916,"line_start":1544,"line_end":1544,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755917,"byte_end":9755924,"line_start":1545,"line_end":1545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755925,"byte_end":9755948,"line_start":1546,"line_end":1546,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755949,"byte_end":9755987,"line_start":1547,"line_end":1547,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9755988,"byte_end":9756015,"line_start":1548,"line_end":1548,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756016,"byte_end":9756073,"line_start":1549,"line_end":1549,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756074,"byte_end":9756081,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756082,"byte_end":9756093,"line_start":1551,"line_end":1551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756094,"byte_end":9756111,"line_start":1552,"line_end":1552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756632,"byte_end":9756655,"line_start":1569,"line_end":1569,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756283,"byte_end":9756348,"line_start":1558,"line_end":1558,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756349,"byte_end":9756356,"line_start":1559,"line_end":1559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756357,"byte_end":9756380,"line_start":1560,"line_end":1560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756381,"byte_end":9756417,"line_start":1561,"line_end":1561,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756418,"byte_end":9756439,"line_start":1562,"line_end":1562,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756440,"byte_end":9756488,"line_start":1563,"line_end":1563,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756489,"byte_end":9756530,"line_start":1564,"line_end":1564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756531,"byte_end":9756538,"line_start":1565,"line_end":1565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756539,"byte_end":9756550,"line_start":1566,"line_end":1566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756551,"byte_end":9756568,"line_start":1567,"line_end":1567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757024,"byte_end":9757040,"line_start":1583,"line_end":1583,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756730,"byte_end":9756770,"line_start":1573,"line_end":1573,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756771,"byte_end":9756778,"line_start":1574,"line_end":1574,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756779,"byte_end":9756802,"line_start":1575,"line_end":1575,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756803,"byte_end":9756839,"line_start":1576,"line_end":1576,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756840,"byte_end":9756873,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756874,"byte_end":9756922,"line_start":1578,"line_end":1578,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756923,"byte_end":9756930,"line_start":1579,"line_end":1579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756931,"byte_end":9756942,"line_start":1580,"line_end":1580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9756943,"byte_end":9756960,"line_start":1581,"line_end":1581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757486,"byte_end":9757508,"line_start":1598,"line_end":1598,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757139,"byte_end":9757203,"line_start":1587,"line_end":1587,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757204,"byte_end":9757211,"line_start":1588,"line_end":1588,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757212,"byte_end":9757235,"line_start":1589,"line_end":1589,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757236,"byte_end":9757272,"line_start":1590,"line_end":1590,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757273,"byte_end":9757294,"line_start":1591,"line_end":1591,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757295,"byte_end":9757342,"line_start":1592,"line_end":1592,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757343,"byte_end":9757384,"line_start":1593,"line_end":1593,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757385,"byte_end":9757392,"line_start":1594,"line_end":1594,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757393,"byte_end":9757404,"line_start":1595,"line_end":1595,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757405,"byte_end":9757422,"line_start":1596,"line_end":1596,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757930,"byte_end":9757948,"line_start":1612,"line_end":1612,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757583,"byte_end":9757643,"line_start":1602,"line_end":1602,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757644,"byte_end":9757651,"line_start":1603,"line_end":1603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757652,"byte_end":9757675,"line_start":1604,"line_end":1604,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757676,"byte_end":9757720,"line_start":1605,"line_end":1605,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757721,"byte_end":9757756,"line_start":1606,"line_end":1606,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757757,"byte_end":9757828,"line_start":1607,"line_end":1607,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757829,"byte_end":9757836,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757837,"byte_end":9757848,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9757849,"byte_end":9757866,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758516,"byte_end":9758536,"line_start":1630,"line_end":1630,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758040,"byte_end":9758080,"line_start":1616,"line_end":1616,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758081,"byte_end":9758084,"line_start":1617,"line_end":1617,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758085,"byte_end":9758163,"line_start":1618,"line_end":1618,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758164,"byte_end":9758244,"line_start":1619,"line_end":1619,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758245,"byte_end":9758257,"line_start":1620,"line_end":1620,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758258,"byte_end":9758265,"line_start":1621,"line_end":1621,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758266,"byte_end":9758289,"line_start":1622,"line_end":1622,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758290,"byte_end":9758315,"line_start":1623,"line_end":1623,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758316,"byte_end":9758353,"line_start":1624,"line_end":1624,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758354,"byte_end":9758414,"line_start":1625,"line_end":1625,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758415,"byte_end":9758422,"line_start":1626,"line_end":1626,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758423,"byte_end":9758434,"line_start":1627,"line_end":1627,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758435,"byte_end":9758452,"line_start":1628,"line_end":1628,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759162,"byte_end":9759182,"line_start":1649,"line_end":1649,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758634,"byte_end":9758674,"line_start":1634,"line_end":1634,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758675,"byte_end":9758678,"line_start":1635,"line_end":1635,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758679,"byte_end":9758757,"line_start":1636,"line_end":1636,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758758,"byte_end":9758831,"line_start":1637,"line_end":1637,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758832,"byte_end":9758844,"line_start":1638,"line_end":1638,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758845,"byte_end":9758852,"line_start":1639,"line_end":1639,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758853,"byte_end":9758876,"line_start":1640,"line_end":1640,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758877,"byte_end":9758945,"line_start":1641,"line_end":1641,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758946,"byte_end":9758983,"line_start":1642,"line_end":1642,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9758984,"byte_end":9759023,"line_start":1643,"line_end":1643,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759024,"byte_end":9759031,"line_start":1644,"line_end":1644,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759032,"byte_end":9759043,"line_start":1645,"line_end":1645,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759044,"byte_end":9759061,"line_start":1646,"line_end":1646,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759062,"byte_end":9759098,"line_start":1647,"line_end":1647,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759763,"byte_end":9759791,"line_start":1665,"line_end":1665,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759287,"byte_end":9759365,"line_start":1653,"line_end":1653,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759366,"byte_end":9759405,"line_start":1654,"line_end":1654,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759406,"byte_end":9759413,"line_start":1655,"line_end":1655,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759414,"byte_end":9759437,"line_start":1656,"line_end":1656,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759438,"byte_end":9759496,"line_start":1657,"line_end":1657,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759497,"byte_end":9759558,"line_start":1658,"line_end":1658,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759559,"byte_end":9759623,"line_start":1659,"line_end":1659,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759624,"byte_end":9759661,"line_start":1660,"line_end":1660,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759662,"byte_end":9759669,"line_start":1661,"line_end":1661,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759670,"byte_end":9759681,"line_start":1662,"line_end":1662,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759682,"byte_end":9759699,"line_start":1663,"line_end":1663,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760372,"byte_end":9760384,"line_start":1683,"line_end":1683,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,\n ]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759871,"byte_end":9759915,"line_start":1669,"line_end":1669,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759916,"byte_end":9759923,"line_start":1670,"line_end":1670,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759924,"byte_end":9759947,"line_start":1671,"line_end":1671,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759948,"byte_end":9759959,"line_start":1672,"line_end":1672,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9759960,"byte_end":9760037,"line_start":1673,"line_end":1673,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760038,"byte_end":9760063,"line_start":1674,"line_end":1674,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760064,"byte_end":9760132,"line_start":1675,"line_end":1675,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760133,"byte_end":9760140,"line_start":1676,"line_end":1676,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760141,"byte_end":9760189,"line_start":1677,"line_end":1677,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760190,"byte_end":9760270,"line_start":1678,"line_end":1678,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760271,"byte_end":9760278,"line_start":1679,"line_end":1679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760279,"byte_end":9760290,"line_start":1680,"line_end":1680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760291,"byte_end":9760308,"line_start":1681,"line_end":1681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760865,"byte_end":9760878,"line_start":1698,"line_end":1698,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760462,"byte_end":9760507,"line_start":1687,"line_end":1687,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760508,"byte_end":9760515,"line_start":1688,"line_end":1688,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760516,"byte_end":9760539,"line_start":1689,"line_end":1689,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760540,"byte_end":9760598,"line_start":1690,"line_end":1690,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760599,"byte_end":9760660,"line_start":1691,"line_end":1691,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760661,"byte_end":9760710,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760711,"byte_end":9760763,"line_start":1693,"line_end":1693,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760764,"byte_end":9760771,"line_start":1694,"line_end":1694,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760772,"byte_end":9760783,"line_start":1695,"line_end":1695,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760784,"byte_end":9760801,"line_start":1696,"line_end":1696,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761273,"byte_end":9761282,"line_start":1713,"line_end":1713,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760957,"byte_end":9760982,"line_start":1702,"line_end":1702,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760983,"byte_end":9760990,"line_start":1703,"line_end":1703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9760991,"byte_end":9761014,"line_start":1704,"line_end":1704,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761015,"byte_end":9761057,"line_start":1705,"line_end":1705,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761058,"byte_end":9761100,"line_start":1706,"line_end":1706,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761101,"byte_end":9761140,"line_start":1707,"line_end":1707,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761141,"byte_end":9761171,"line_start":1708,"line_end":1708,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761172,"byte_end":9761179,"line_start":1709,"line_end":1709,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761180,"byte_end":9761191,"line_start":1710,"line_end":1710,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761192,"byte_end":9761209,"line_start":1711,"line_end":1711,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":718},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761701,"byte_end":9761712,"line_start":1728,"line_end":1728,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761358,"byte_end":9761406,"line_start":1717,"line_end":1717,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761407,"byte_end":9761414,"line_start":1718,"line_end":1718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761415,"byte_end":9761438,"line_start":1719,"line_end":1719,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761439,"byte_end":9761482,"line_start":1720,"line_end":1720,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761483,"byte_end":9761525,"line_start":1721,"line_end":1721,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761526,"byte_end":9761567,"line_start":1722,"line_end":1722,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761568,"byte_end":9761599,"line_start":1723,"line_end":1723,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761600,"byte_end":9761607,"line_start":1724,"line_end":1724,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761608,"byte_end":9761619,"line_start":1725,"line_end":1725,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761620,"byte_end":9761637,"line_start":1726,"line_end":1726,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762271,"byte_end":9762283,"line_start":1745,"line_end":1745,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b =\n   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761788,"byte_end":9761832,"line_start":1732,"line_end":1732,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761833,"byte_end":9761840,"line_start":1733,"line_end":1733,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761841,"byte_end":9761864,"line_start":1734,"line_end":1734,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761865,"byte_end":9761876,"line_start":1735,"line_end":1735,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761877,"byte_end":9761954,"line_start":1736,"line_end":1736,"column_start":1,"column_end":78}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761955,"byte_end":9761966,"line_start":1737,"line_end":1737,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9761967,"byte_end":9762045,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762046,"byte_end":9762094,"line_start":1739,"line_end":1739,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762095,"byte_end":9762169,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762170,"byte_end":9762177,"line_start":1741,"line_end":1741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762178,"byte_end":9762189,"line_start":1742,"line_end":1742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762190,"byte_end":9762207,"line_start":1743,"line_end":1743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762767,"byte_end":9762780,"line_start":1760,"line_end":1760,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762361,"byte_end":9762406,"line_start":1749,"line_end":1749,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762407,"byte_end":9762414,"line_start":1750,"line_end":1750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762415,"byte_end":9762438,"line_start":1751,"line_end":1751,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762439,"byte_end":9762497,"line_start":1752,"line_end":1752,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762498,"byte_end":9762559,"line_start":1753,"line_end":1753,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762560,"byte_end":9762609,"line_start":1754,"line_end":1754,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762610,"byte_end":9762665,"line_start":1755,"line_end":1755,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762666,"byte_end":9762673,"line_start":1756,"line_end":1756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762674,"byte_end":9762685,"line_start":1757,"line_end":1757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762686,"byte_end":9762703,"line_start":1758,"line_end":1758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763176,"byte_end":9763185,"line_start":1775,"line_end":1775,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762859,"byte_end":9762884,"line_start":1764,"line_end":1764,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762885,"byte_end":9762892,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762893,"byte_end":9762916,"line_start":1766,"line_end":1766,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762917,"byte_end":9762960,"line_start":1767,"line_end":1767,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9762961,"byte_end":9763003,"line_start":1768,"line_end":1768,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763004,"byte_end":9763043,"line_start":1769,"line_end":1769,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763044,"byte_end":9763074,"line_start":1770,"line_end":1770,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763075,"byte_end":9763082,"line_start":1771,"line_end":1771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763083,"byte_end":9763094,"line_start":1772,"line_end":1772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763095,"byte_end":9763112,"line_start":1773,"line_end":1773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763604,"byte_end":9763615,"line_start":1790,"line_end":1790,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763261,"byte_end":9763309,"line_start":1779,"line_end":1779,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763310,"byte_end":9763317,"line_start":1780,"line_end":1780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763318,"byte_end":9763341,"line_start":1781,"line_end":1781,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763342,"byte_end":9763385,"line_start":1782,"line_end":1782,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763386,"byte_end":9763428,"line_start":1783,"line_end":1783,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763429,"byte_end":9763470,"line_start":1784,"line_end":1784,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763471,"byte_end":9763502,"line_start":1785,"line_end":1785,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763503,"byte_end":9763510,"line_start":1786,"line_end":1786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763511,"byte_end":9763522,"line_start":1787,"line_end":1787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763523,"byte_end":9763540,"line_start":1788,"line_end":1788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764000,"byte_end":9764016,"line_start":1804,"line_end":1804,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763691,"byte_end":9763751,"line_start":1794,"line_end":1794,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763752,"byte_end":9763759,"line_start":1795,"line_end":1795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763760,"byte_end":9763783,"line_start":1796,"line_end":1796,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763784,"byte_end":9763820,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763821,"byte_end":9763853,"line_start":1798,"line_end":1798,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763854,"byte_end":9763898,"line_start":1799,"line_end":1799,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763899,"byte_end":9763906,"line_start":1800,"line_end":1800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763907,"byte_end":9763918,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9763919,"byte_end":9763936,"line_start":1802,"line_end":1802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764451,"byte_end":9764477,"line_start":1819,"line_end":1819,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764081,"byte_end":9764155,"line_start":1808,"line_end":1808,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764156,"byte_end":9764163,"line_start":1809,"line_end":1809,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764164,"byte_end":9764187,"line_start":1810,"line_end":1810,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764188,"byte_end":9764224,"line_start":1811,"line_end":1811,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764225,"byte_end":9764261,"line_start":1812,"line_end":1812,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764262,"byte_end":9764307,"line_start":1813,"line_end":1813,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764308,"byte_end":9764349,"line_start":1814,"line_end":1814,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764350,"byte_end":9764357,"line_start":1815,"line_end":1815,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764358,"byte_end":9764369,"line_start":1816,"line_end":1816,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764370,"byte_end":9764387,"line_start":1817,"line_end":1817,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764981,"byte_end":9764999,"line_start":1837,"line_end":1837,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764554,"byte_end":9764597,"line_start":1823,"line_end":1823,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764598,"byte_end":9764601,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764602,"byte_end":9764665,"line_start":1825,"line_end":1825,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764666,"byte_end":9764673,"line_start":1826,"line_end":1826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764674,"byte_end":9764697,"line_start":1827,"line_end":1827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764698,"byte_end":9764723,"line_start":1828,"line_end":1828,"column_start":1,"column_end":26}},{"value":"/   0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764724,"byte_end":9764797,"line_start":1829,"line_end":1829,"column_start":1,"column_end":74}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764798,"byte_end":9764805,"line_start":1830,"line_end":1830,"column_start":1,"column_end":8}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764806,"byte_end":9764840,"line_start":1831,"line_end":1831,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764841,"byte_end":9764879,"line_start":1832,"line_end":1832,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764880,"byte_end":9764887,"line_start":1833,"line_end":1833,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764888,"byte_end":9764899,"line_start":1834,"line_end":1834,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9764900,"byte_end":9764917,"line_start":1835,"line_end":1835,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765389,"byte_end":9765404,"line_start":1853,"line_end":1853,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765058,"byte_end":9765096,"line_start":1841,"line_end":1841,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765097,"byte_end":9765100,"line_start":1842,"line_end":1842,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765101,"byte_end":9765153,"line_start":1843,"line_end":1843,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765154,"byte_end":9765161,"line_start":1844,"line_end":1844,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765162,"byte_end":9765185,"line_start":1845,"line_end":1845,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765186,"byte_end":9765230,"line_start":1846,"line_end":1846,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765231,"byte_end":9765262,"line_start":1847,"line_end":1847,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765263,"byte_end":9765287,"line_start":1848,"line_end":1848,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765288,"byte_end":9765295,"line_start":1849,"line_end":1849,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765296,"byte_end":9765307,"line_start":1850,"line_end":1850,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765308,"byte_end":9765325,"line_start":1851,"line_end":1851,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765891,"byte_end":9765914,"line_start":1869,"line_end":1869,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765461,"byte_end":9765534,"line_start":1857,"line_end":1857,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765535,"byte_end":9765538,"line_start":1858,"line_end":1858,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765539,"byte_end":9765546,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765547,"byte_end":9765570,"line_start":1860,"line_end":1860,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765571,"byte_end":9765616,"line_start":1861,"line_end":1861,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765617,"byte_end":9765662,"line_start":1862,"line_end":1862,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765663,"byte_end":9765722,"line_start":1863,"line_end":1863,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765723,"byte_end":9765789,"line_start":1864,"line_end":1864,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765790,"byte_end":9765797,"line_start":1865,"line_end":1865,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765798,"byte_end":9765809,"line_start":1866,"line_end":1866,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765810,"byte_end":9765827,"line_start":1867,"line_end":1867,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766316,"byte_end":9766325,"line_start":1884,"line_end":1884,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9765993,"byte_end":9766014,"line_start":1873,"line_end":1873,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766015,"byte_end":9766022,"line_start":1874,"line_end":1874,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766023,"byte_end":9766046,"line_start":1875,"line_end":1875,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766047,"byte_end":9766091,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766092,"byte_end":9766137,"line_start":1877,"line_end":1877,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766138,"byte_end":9766177,"line_start":1878,"line_end":1878,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766178,"byte_end":9766214,"line_start":1879,"line_end":1879,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766215,"byte_end":9766222,"line_start":1880,"line_end":1880,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766223,"byte_end":9766234,"line_start":1881,"line_end":1881,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766235,"byte_end":9766252,"line_start":1882,"line_end":1882,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766750,"byte_end":9766761,"line_start":1899,"line_end":1899,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766401,"byte_end":9766446,"line_start":1888,"line_end":1888,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766447,"byte_end":9766454,"line_start":1889,"line_end":1889,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766455,"byte_end":9766478,"line_start":1890,"line_end":1890,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766479,"byte_end":9766523,"line_start":1891,"line_end":1891,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766524,"byte_end":9766571,"line_start":1892,"line_end":1892,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766572,"byte_end":9766613,"line_start":1893,"line_end":1893,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766614,"byte_end":9766648,"line_start":1894,"line_end":1894,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766649,"byte_end":9766656,"line_start":1895,"line_end":1895,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766657,"byte_end":9766668,"line_start":1896,"line_end":1896,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766669,"byte_end":9766686,"line_start":1897,"line_end":1897,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767306,"byte_end":9767329,"line_start":1915,"line_end":1915,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766837,"byte_end":9766910,"line_start":1903,"line_end":1903,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766911,"byte_end":9766929,"line_start":1904,"line_end":1904,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766930,"byte_end":9766937,"line_start":1905,"line_end":1905,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766938,"byte_end":9766961,"line_start":1906,"line_end":1906,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9766962,"byte_end":9767027,"line_start":1907,"line_end":1907,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767028,"byte_end":9767096,"line_start":1908,"line_end":1908,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767097,"byte_end":9767156,"line_start":1909,"line_end":1909,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767157,"byte_end":9767204,"line_start":1910,"line_end":1910,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767205,"byte_end":9767212,"line_start":1911,"line_end":1911,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767213,"byte_end":9767224,"line_start":1912,"line_end":1912,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767225,"byte_end":9767242,"line_start":1913,"line_end":1913,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767881,"byte_end":9767904,"line_start":1931,"line_end":1931,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767410,"byte_end":9767483,"line_start":1919,"line_end":1919,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767484,"byte_end":9767502,"line_start":1920,"line_end":1920,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767503,"byte_end":9767510,"line_start":1921,"line_end":1921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767511,"byte_end":9767534,"line_start":1922,"line_end":1922,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767535,"byte_end":9767599,"line_start":1923,"line_end":1923,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767600,"byte_end":9767667,"line_start":1924,"line_end":1924,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767668,"byte_end":9767727,"line_start":1925,"line_end":1925,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767728,"byte_end":9767779,"line_start":1926,"line_end":1926,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767780,"byte_end":9767787,"line_start":1927,"line_end":1927,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767788,"byte_end":9767799,"line_start":1928,"line_end":1928,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767800,"byte_end":9767817,"line_start":1929,"line_end":1929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768468,"byte_end":9768490,"line_start":1947,"line_end":1947,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9767985,"byte_end":9768057,"line_start":1935,"line_end":1935,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768058,"byte_end":9768076,"line_start":1936,"line_end":1936,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768077,"byte_end":9768084,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768085,"byte_end":9768108,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768109,"byte_end":9768174,"line_start":1939,"line_end":1939,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768175,"byte_end":9768243,"line_start":1940,"line_end":1940,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768244,"byte_end":9768302,"line_start":1941,"line_end":1941,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768303,"byte_end":9768366,"line_start":1942,"line_end":1942,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768367,"byte_end":9768374,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768375,"byte_end":9768386,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768387,"byte_end":9768404,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768884,"byte_end":9768895,"line_start":1962,"line_end":1962,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768571,"byte_end":9768591,"line_start":1951,"line_end":1951,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768592,"byte_end":9768599,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768600,"byte_end":9768623,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768624,"byte_end":9768666,"line_start":1954,"line_end":1954,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768667,"byte_end":9768709,"line_start":1955,"line_end":1955,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768710,"byte_end":9768751,"line_start":1956,"line_end":1956,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768752,"byte_end":9768782,"line_start":1957,"line_end":1957,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768783,"byte_end":9768790,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768791,"byte_end":9768802,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768803,"byte_end":9768820,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769283,"byte_end":9769294,"line_start":1977,"line_end":1977,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768970,"byte_end":9768990,"line_start":1966,"line_end":1966,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768991,"byte_end":9768998,"line_start":1967,"line_end":1967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9768999,"byte_end":9769022,"line_start":1968,"line_end":1968,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769023,"byte_end":9769061,"line_start":1969,"line_end":1969,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769062,"byte_end":9769100,"line_start":1970,"line_end":1970,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769101,"byte_end":9769148,"line_start":1971,"line_end":1971,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769149,"byte_end":9769181,"line_start":1972,"line_end":1972,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769182,"byte_end":9769189,"line_start":1973,"line_end":1973,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769190,"byte_end":9769201,"line_start":1974,"line_end":1974,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769202,"byte_end":9769219,"line_start":1975,"line_end":1975,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769817,"byte_end":9769837,"line_start":1992,"line_end":1992,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769372,"byte_end":9769430,"line_start":1981,"line_end":1981,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769431,"byte_end":9769438,"line_start":1982,"line_end":1982,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769439,"byte_end":9769462,"line_start":1983,"line_end":1983,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769463,"byte_end":9769517,"line_start":1984,"line_end":1984,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769518,"byte_end":9769579,"line_start":1985,"line_end":1985,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769580,"byte_end":9769636,"line_start":1986,"line_end":1986,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769637,"byte_end":9769715,"line_start":1987,"line_end":1987,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769716,"byte_end":9769723,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769724,"byte_end":9769735,"line_start":1989,"line_end":1989,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769736,"byte_end":9769753,"line_start":1990,"line_end":1990,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770304,"byte_end":9770325,"line_start":2007,"line_end":2007,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769918,"byte_end":9769977,"line_start":1996,"line_end":1996,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769978,"byte_end":9769985,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9769986,"byte_end":9770009,"line_start":1998,"line_end":1998,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770010,"byte_end":9770052,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770053,"byte_end":9770095,"line_start":2000,"line_end":2000,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770096,"byte_end":9770153,"line_start":2001,"line_end":2001,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770154,"byte_end":9770202,"line_start":2002,"line_end":2002,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770203,"byte_end":9770210,"line_start":2003,"line_end":2003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770211,"byte_end":9770222,"line_start":2004,"line_end":2004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770223,"byte_end":9770240,"line_start":2005,"line_end":2005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770885,"byte_end":9770905,"line_start":2025,"line_end":2025,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770406,"byte_end":9770464,"line_start":2011,"line_end":2011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770465,"byte_end":9770472,"line_start":2012,"line_end":2012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770473,"byte_end":9770496,"line_start":2013,"line_end":2013,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770497,"byte_end":9770555,"line_start":2014,"line_end":2014,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770556,"byte_end":9770619,"line_start":2015,"line_end":2015,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770620,"byte_end":9770676,"line_start":2016,"line_end":2016,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770677,"byte_end":9770692,"line_start":2017,"line_end":2017,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770693,"byte_end":9770701,"line_start":2018,"line_end":2018,"column_start":1,"column_end":9}},{"value":"/   [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770702,"byte_end":9770776,"line_start":2019,"line_end":2019,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770777,"byte_end":9770783,"line_start":2020,"line_end":2020,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770784,"byte_end":9770791,"line_start":2021,"line_end":2021,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770792,"byte_end":9770803,"line_start":2022,"line_end":2022,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770804,"byte_end":9770821,"line_start":2023,"line_end":2023,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771662,"byte_end":9771686,"line_start":2048,"line_end":2048,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9770987,"byte_end":9771034,"line_start":2029,"line_end":2029,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771035,"byte_end":9771038,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771039,"byte_end":9771108,"line_start":2031,"line_end":2031,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771109,"byte_end":9771159,"line_start":2032,"line_end":2032,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771160,"byte_end":9771212,"line_start":2033,"line_end":2033,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771213,"byte_end":9771220,"line_start":2034,"line_end":2034,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771221,"byte_end":9771244,"line_start":2035,"line_end":2035,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771245,"byte_end":9771270,"line_start":2036,"line_end":2036,"column_start":1,"column_end":26}},{"value":"/   0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771271,"byte_end":9771339,"line_start":2037,"line_end":2037,"column_start":1,"column_end":69}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771340,"byte_end":9771347,"line_start":2038,"line_end":2038,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771348,"byte_end":9771373,"line_start":2039,"line_end":2039,"column_start":1,"column_end":26}},{"value":"/   20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771374,"byte_end":9771456,"line_start":2040,"line_end":2040,"column_start":1,"column_end":83}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771457,"byte_end":9771464,"line_start":2041,"line_end":2041,"column_start":1,"column_end":8}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771465,"byte_end":9771525,"line_start":2042,"line_end":2042,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771526,"byte_end":9771560,"line_start":2043,"line_end":2043,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771561,"byte_end":9771568,"line_start":2044,"line_end":2044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771569,"byte_end":9771580,"line_start":2045,"line_end":2045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771581,"byte_end":9771598,"line_start":2046,"line_end":2046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772269,"byte_end":9772281,"line_start":2065,"line_end":2065,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771764,"byte_end":9771826,"line_start":2052,"line_end":2052,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771827,"byte_end":9771834,"line_start":2053,"line_end":2053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771835,"byte_end":9771858,"line_start":2054,"line_end":2054,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771859,"byte_end":9771870,"line_start":2055,"line_end":2055,"column_start":1,"column_end":12}},{"value":"/   m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771871,"byte_end":9771948,"line_start":2056,"line_end":2056,"column_start":1,"column_end":78}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9771949,"byte_end":9772031,"line_start":2057,"line_end":2057,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772032,"byte_end":9772089,"line_start":2058,"line_end":2058,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772090,"byte_end":9772097,"line_start":2059,"line_end":2059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772098,"byte_end":9772109,"line_start":2060,"line_end":2060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772110,"byte_end":9772127,"line_start":2061,"line_end":2061,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772128,"byte_end":9772164,"line_start":2062,"line_end":2062,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772165,"byte_end":9772205,"line_start":2063,"line_end":2063,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772938,"byte_end":9772951,"line_start":2084,"line_end":2084,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772496,"byte_end":9772558,"line_start":2072,"line_end":2072,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772559,"byte_end":9772566,"line_start":2073,"line_end":2073,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772567,"byte_end":9772590,"line_start":2074,"line_end":2074,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772591,"byte_end":9772645,"line_start":2075,"line_end":2075,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772646,"byte_end":9772700,"line_start":2076,"line_end":2076,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772701,"byte_end":9772758,"line_start":2077,"line_end":2077,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772759,"byte_end":9772766,"line_start":2078,"line_end":2078,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772767,"byte_end":9772778,"line_start":2079,"line_end":2079,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772779,"byte_end":9772796,"line_start":2080,"line_end":2080,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772797,"byte_end":9772833,"line_start":2081,"line_end":2081,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9772834,"byte_end":9772874,"line_start":2082,"line_end":2082,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773425,"byte_end":9773438,"line_start":2100,"line_end":2100,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773093,"byte_end":9773155,"line_start":2090,"line_end":2090,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773156,"byte_end":9773163,"line_start":2091,"line_end":2091,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773164,"byte_end":9773187,"line_start":2092,"line_end":2092,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773188,"byte_end":9773226,"line_start":2093,"line_end":2093,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773227,"byte_end":9773265,"line_start":2094,"line_end":2094,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773266,"byte_end":9773323,"line_start":2095,"line_end":2095,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773324,"byte_end":9773331,"line_start":2096,"line_end":2096,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773332,"byte_end":9773343,"line_start":2097,"line_end":2097,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773344,"byte_end":9773361,"line_start":2098,"line_end":2098,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773855,"byte_end":9773868,"line_start":2114,"line_end":2114,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773531,"byte_end":9773593,"line_start":2104,"line_end":2104,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773594,"byte_end":9773601,"line_start":2105,"line_end":2105,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773602,"byte_end":9773625,"line_start":2106,"line_end":2106,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773626,"byte_end":9773662,"line_start":2107,"line_end":2107,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773663,"byte_end":9773695,"line_start":2108,"line_end":2108,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773696,"byte_end":9773753,"line_start":2109,"line_end":2109,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773754,"byte_end":9773761,"line_start":2110,"line_end":2110,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773762,"byte_end":9773773,"line_start":2111,"line_end":2111,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773774,"byte_end":9773791,"line_start":2112,"line_end":2112,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774256,"byte_end":9774265,"line_start":2128,"line_end":2128,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9773940,"byte_end":9774002,"line_start":2118,"line_end":2118,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774003,"byte_end":9774010,"line_start":2119,"line_end":2119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774011,"byte_end":9774034,"line_start":2120,"line_end":2120,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774035,"byte_end":9774077,"line_start":2121,"line_end":2121,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774078,"byte_end":9774110,"line_start":2122,"line_end":2122,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774111,"byte_end":9774154,"line_start":2123,"line_end":2123,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774155,"byte_end":9774162,"line_start":2124,"line_end":2124,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774163,"byte_end":9774174,"line_start":2125,"line_end":2125,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774175,"byte_end":9774192,"line_start":2126,"line_end":2126,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774633,"byte_end":9774644,"line_start":2142,"line_end":2142,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774333,"byte_end":9774382,"line_start":2132,"line_end":2132,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774383,"byte_end":9774390,"line_start":2133,"line_end":2133,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774391,"byte_end":9774414,"line_start":2134,"line_end":2134,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774415,"byte_end":9774457,"line_start":2135,"line_end":2135,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774458,"byte_end":9774487,"line_start":2136,"line_end":2136,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774488,"byte_end":9774531,"line_start":2137,"line_end":2137,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774532,"byte_end":9774539,"line_start":2138,"line_end":2138,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774540,"byte_end":9774551,"line_start":2139,"line_end":2139,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774552,"byte_end":9774569,"line_start":2140,"line_end":2140,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775007,"byte_end":9775022,"line_start":2156,"line_end":2156,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774701,"byte_end":9774752,"line_start":2146,"line_end":2146,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774753,"byte_end":9774760,"line_start":2147,"line_end":2147,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774761,"byte_end":9774784,"line_start":2148,"line_end":2148,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774785,"byte_end":9774827,"line_start":2149,"line_end":2149,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774828,"byte_end":9774861,"line_start":2150,"line_end":2150,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774862,"byte_end":9774905,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774906,"byte_end":9774913,"line_start":2152,"line_end":2152,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774914,"byte_end":9774925,"line_start":2153,"line_end":2153,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9774926,"byte_end":9774943,"line_start":2154,"line_end":2154,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775433,"byte_end":9775451,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775080,"byte_end":9775128,"line_start":2160,"line_end":2160,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775129,"byte_end":9775136,"line_start":2161,"line_end":2161,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775137,"byte_end":9775160,"line_start":2162,"line_end":2162,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775161,"byte_end":9775238,"line_start":2163,"line_end":2163,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775239,"byte_end":9775273,"line_start":2164,"line_end":2164,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775274,"byte_end":9775331,"line_start":2165,"line_end":2165,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775332,"byte_end":9775339,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775340,"byte_end":9775351,"line_start":2167,"line_end":2167,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775352,"byte_end":9775369,"line_start":2168,"line_end":2168,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775842,"byte_end":9775861,"line_start":2184,"line_end":2184,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775510,"byte_end":9775559,"line_start":2174,"line_end":2174,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775560,"byte_end":9775567,"line_start":2175,"line_end":2175,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775568,"byte_end":9775591,"line_start":2176,"line_end":2176,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775592,"byte_end":9775646,"line_start":2177,"line_end":2177,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775647,"byte_end":9775682,"line_start":2178,"line_end":2178,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775683,"byte_end":9775740,"line_start":2179,"line_end":2179,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775741,"byte_end":9775748,"line_start":2180,"line_end":2180,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775749,"byte_end":9775760,"line_start":2181,"line_end":2181,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775761,"byte_end":9775778,"line_start":2182,"line_end":2182,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776238,"byte_end":9776257,"line_start":2198,"line_end":2198,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775922,"byte_end":9775971,"line_start":2188,"line_end":2188,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775972,"byte_end":9775979,"line_start":2189,"line_end":2189,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9775980,"byte_end":9776003,"line_start":2190,"line_end":2190,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776004,"byte_end":9776042,"line_start":2191,"line_end":2191,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776043,"byte_end":9776078,"line_start":2192,"line_end":2192,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776079,"byte_end":9776136,"line_start":2193,"line_end":2193,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776137,"byte_end":9776144,"line_start":2194,"line_end":2194,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776145,"byte_end":9776156,"line_start":2195,"line_end":2195,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776157,"byte_end":9776174,"line_start":2196,"line_end":2196,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776633,"byte_end":9776652,"line_start":2212,"line_end":2212,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776318,"byte_end":9776368,"line_start":2202,"line_end":2202,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776369,"byte_end":9776376,"line_start":2203,"line_end":2203,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776377,"byte_end":9776400,"line_start":2204,"line_end":2204,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776401,"byte_end":9776437,"line_start":2205,"line_end":2205,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776438,"byte_end":9776473,"line_start":2206,"line_end":2206,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776474,"byte_end":9776531,"line_start":2207,"line_end":2207,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776532,"byte_end":9776539,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776540,"byte_end":9776551,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776552,"byte_end":9776569,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777240,"byte_end":9777261,"line_start":2231,"line_end":2231,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(\n   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n );\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776714,"byte_end":9776775,"line_start":2216,"line_end":2216,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776776,"byte_end":9776783,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776784,"byte_end":9776807,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776808,"byte_end":9776819,"line_start":2219,"line_end":2219,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776820,"byte_end":9776897,"line_start":2220,"line_end":2220,"column_start":1,"column_end":78}},{"value":"/ let b = set_reversed_i8_m128i(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776898,"byte_end":9776932,"line_start":2221,"line_end":2221,"column_start":1,"column_end":35}},{"value":"/   0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776933,"byte_end":9776995,"line_start":2222,"line_end":2222,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9776996,"byte_end":9777002,"line_start":2223,"line_end":2223,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777003,"byte_end":9777060,"line_start":2224,"line_end":2224,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777061,"byte_end":9777068,"line_start":2225,"line_end":2225,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777069,"byte_end":9777080,"line_start":2226,"line_end":2226,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777081,"byte_end":9777098,"line_start":2227,"line_end":2227,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777099,"byte_end":9777135,"line_start":2228,"line_end":2228,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777136,"byte_end":9777176,"line_start":2229,"line_end":2229,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777933,"byte_end":9777955,"line_start":2252,"line_end":2252,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777483,"byte_end":9777544,"line_start":2240,"line_end":2240,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777545,"byte_end":9777552,"line_start":2241,"line_end":2241,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777553,"byte_end":9777576,"line_start":2242,"line_end":2242,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777577,"byte_end":9777631,"line_start":2243,"line_end":2243,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777632,"byte_end":9777695,"line_start":2244,"line_end":2244,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777696,"byte_end":9777753,"line_start":2245,"line_end":2245,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777754,"byte_end":9777761,"line_start":2246,"line_end":2246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777762,"byte_end":9777773,"line_start":2247,"line_end":2247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777774,"byte_end":9777791,"line_start":2248,"line_end":2248,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777792,"byte_end":9777828,"line_start":2249,"line_end":2249,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9777829,"byte_end":9777869,"line_start":2250,"line_end":2250,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778438,"byte_end":9778460,"line_start":2268,"line_end":2268,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778098,"byte_end":9778159,"line_start":2258,"line_end":2258,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778160,"byte_end":9778167,"line_start":2259,"line_end":2259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778168,"byte_end":9778191,"line_start":2260,"line_end":2260,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778192,"byte_end":9778230,"line_start":2261,"line_end":2261,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778231,"byte_end":9778278,"line_start":2262,"line_end":2262,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778279,"byte_end":9778336,"line_start":2263,"line_end":2263,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778337,"byte_end":9778344,"line_start":2264,"line_end":2264,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778345,"byte_end":9778356,"line_start":2265,"line_end":2265,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778357,"byte_end":9778374,"line_start":2266,"line_end":2266,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778878,"byte_end":9778896,"line_start":2282,"line_end":2282,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778554,"byte_end":9778615,"line_start":2272,"line_end":2272,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778616,"byte_end":9778623,"line_start":2273,"line_end":2273,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778624,"byte_end":9778647,"line_start":2274,"line_end":2274,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778648,"byte_end":9778690,"line_start":2275,"line_end":2275,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778691,"byte_end":9778732,"line_start":2276,"line_end":2276,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778733,"byte_end":9778776,"line_start":2277,"line_end":2277,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778777,"byte_end":9778784,"line_start":2278,"line_end":2278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778785,"byte_end":9778796,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778797,"byte_end":9778814,"line_start":2280,"line_end":2280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779180,"byte_end":9779192,"line_start":2295,"line_end":2295,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778965,"byte_end":9778984,"line_start":2286,"line_end":2286,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778985,"byte_end":9778992,"line_start":2287,"line_end":2287,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9778993,"byte_end":9779016,"line_start":2288,"line_end":2288,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779017,"byte_end":9779044,"line_start":2289,"line_end":2289,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779045,"byte_end":9779078,"line_start":2290,"line_end":2290,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779079,"byte_end":9779086,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779087,"byte_end":9779098,"line_start":2292,"line_end":2292,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779099,"byte_end":9779116,"line_start":2293,"line_end":2293,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779473,"byte_end":9779485,"line_start":2308,"line_end":2308,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779249,"byte_end":9779269,"line_start":2299,"line_end":2299,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779270,"byte_end":9779277,"line_start":2300,"line_end":2300,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779278,"byte_end":9779301,"line_start":2301,"line_end":2301,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779302,"byte_end":9779329,"line_start":2302,"line_end":2302,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779330,"byte_end":9779371,"line_start":2303,"line_end":2303,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779372,"byte_end":9779379,"line_start":2304,"line_end":2304,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779380,"byte_end":9779391,"line_start":2305,"line_end":2305,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9779392,"byte_end":9779409,"line_start":2306,"line_end":2306,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784176,"byte_end":9784193,"line_start":2440,"line_end":2440,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783687,"byte_end":9783764,"line_start":2424,"line_end":2424,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783765,"byte_end":9783768,"line_start":2425,"line_end":2425,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783769,"byte_end":9783789,"line_start":2426,"line_end":2426,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783790,"byte_end":9783797,"line_start":2427,"line_end":2427,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783798,"byte_end":9783821,"line_start":2428,"line_end":2428,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783822,"byte_end":9783876,"line_start":2429,"line_end":2429,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783877,"byte_end":9783913,"line_start":2430,"line_end":2430,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783914,"byte_end":9783967,"line_start":2431,"line_end":2431,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783968,"byte_end":9783983,"line_start":2432,"line_end":2432,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783984,"byte_end":9783992,"line_start":2433,"line_end":2433,"column_start":1,"column_end":9}},{"value":"/   [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9783993,"byte_end":9784067,"line_start":2434,"line_end":2434,"column_start":1,"column_end":75}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784068,"byte_end":9784074,"line_start":2435,"line_end":2435,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784075,"byte_end":9784082,"line_start":2436,"line_end":2436,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784083,"byte_end":9784094,"line_start":2437,"line_end":2437,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784095,"byte_end":9784112,"line_start":2438,"line_end":2438,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784703,"byte_end":9784720,"line_start":2457,"line_end":2457,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784280,"byte_end":9784357,"line_start":2444,"line_end":2444,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784358,"byte_end":9784361,"line_start":2445,"line_end":2445,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784362,"byte_end":9784382,"line_start":2446,"line_end":2446,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784383,"byte_end":9784390,"line_start":2447,"line_end":2447,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784391,"byte_end":9784414,"line_start":2448,"line_end":2448,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784415,"byte_end":9784457,"line_start":2449,"line_end":2449,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784458,"byte_end":9784494,"line_start":2450,"line_end":2450,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784495,"byte_end":9784548,"line_start":2451,"line_end":2451,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784549,"byte_end":9784601,"line_start":2452,"line_end":2452,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784602,"byte_end":9784609,"line_start":2453,"line_end":2453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784610,"byte_end":9784621,"line_start":2454,"line_end":2454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784622,"byte_end":9784639,"line_start":2455,"line_end":2455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785208,"byte_end":9785225,"line_start":2474,"line_end":2474,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784807,"byte_end":9784884,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784885,"byte_end":9784888,"line_start":2462,"line_end":2462,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784889,"byte_end":9784909,"line_start":2463,"line_end":2463,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784910,"byte_end":9784917,"line_start":2464,"line_end":2464,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784918,"byte_end":9784941,"line_start":2465,"line_end":2465,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784942,"byte_end":9784978,"line_start":2466,"line_end":2466,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9784979,"byte_end":9785015,"line_start":2467,"line_end":2467,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785016,"byte_end":9785069,"line_start":2468,"line_end":2468,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785070,"byte_end":9785106,"line_start":2469,"line_end":2469,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785107,"byte_end":9785114,"line_start":2470,"line_end":2470,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785115,"byte_end":9785126,"line_start":2471,"line_end":2471,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9785127,"byte_end":9785144,"line_start":2472,"line_end":2472,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787563,"byte_end":9787573,"line_start":2554,"line_end":2554,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787292,"byte_end":9787315,"line_start":2544,"line_end":2544,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787316,"byte_end":9787323,"line_start":2545,"line_end":2545,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787324,"byte_end":9787347,"line_start":2546,"line_end":2546,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787348,"byte_end":9787392,"line_start":2547,"line_end":2547,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787393,"byte_end":9787430,"line_start":2548,"line_end":2548,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787431,"byte_end":9787461,"line_start":2549,"line_end":2549,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787462,"byte_end":9787469,"line_start":2550,"line_end":2550,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787470,"byte_end":9787481,"line_start":2551,"line_end":2551,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787482,"byte_end":9787499,"line_start":2552,"line_end":2552,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787987,"byte_end":9787999,"line_start":2569,"line_end":2569,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787635,"byte_end":9787692,"line_start":2558,"line_end":2558,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787693,"byte_end":9787700,"line_start":2559,"line_end":2559,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787701,"byte_end":9787724,"line_start":2560,"line_end":2560,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787725,"byte_end":9787767,"line_start":2561,"line_end":2561,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787768,"byte_end":9787811,"line_start":2562,"line_end":2562,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787812,"byte_end":9787843,"line_start":2563,"line_end":2563,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787844,"byte_end":9787885,"line_start":2564,"line_end":2564,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787886,"byte_end":9787893,"line_start":2565,"line_end":2565,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787894,"byte_end":9787905,"line_start":2566,"line_end":2566,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9787906,"byte_end":9787923,"line_start":2567,"line_end":2567,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788584,"byte_end":9788601,"line_start":2589,"line_end":2589,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788076,"byte_end":9788154,"line_start":2573,"line_end":2573,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788155,"byte_end":9788158,"line_start":2574,"line_end":2574,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788159,"byte_end":9788189,"line_start":2575,"line_end":2575,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788190,"byte_end":9788197,"line_start":2576,"line_end":2576,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788198,"byte_end":9788221,"line_start":2577,"line_end":2577,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788222,"byte_end":9788280,"line_start":2578,"line_end":2578,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788281,"byte_end":9788317,"line_start":2579,"line_end":2579,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788318,"byte_end":9788371,"line_start":2580,"line_end":2580,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788372,"byte_end":9788387,"line_start":2581,"line_end":2581,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788388,"byte_end":9788396,"line_start":2582,"line_end":2582,"column_start":1,"column_end":9}},{"value":"/   [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788397,"byte_end":9788475,"line_start":2583,"line_end":2583,"column_start":1,"column_end":79}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788476,"byte_end":9788482,"line_start":2584,"line_end":2584,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788483,"byte_end":9788490,"line_start":2585,"line_end":2585,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788491,"byte_end":9788502,"line_start":2586,"line_end":2586,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788503,"byte_end":9788520,"line_start":2587,"line_end":2587,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9789126,"byte_end":9789143,"line_start":2606,"line_end":2606,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788688,"byte_end":9788766,"line_start":2593,"line_end":2593,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788767,"byte_end":9788770,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788771,"byte_end":9788801,"line_start":2595,"line_end":2595,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788802,"byte_end":9788809,"line_start":2596,"line_end":2596,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788810,"byte_end":9788833,"line_start":2597,"line_end":2597,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788834,"byte_end":9788878,"line_start":2598,"line_end":2598,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788879,"byte_end":9788915,"line_start":2599,"line_end":2599,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788916,"byte_end":9788969,"line_start":2600,"line_end":2600,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9788970,"byte_end":9789024,"line_start":2601,"line_end":2601,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9789025,"byte_end":9789032,"line_start":2602,"line_end":2602,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9789033,"byte_end":9789044,"line_start":2603,"line_end":2603,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9789045,"byte_end":9789062,"line_start":2604,"line_end":2604,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791224,"byte_end":9791241,"line_start":2683,"line_end":2683,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790666,"byte_end":9790744,"line_start":2659,"line_end":2659,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790745,"byte_end":9790748,"line_start":2660,"line_end":2660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790749,"byte_end":9790756,"line_start":2661,"line_end":2661,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790757,"byte_end":9790780,"line_start":2662,"line_end":2662,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790781,"byte_end":9790843,"line_start":2663,"line_end":2663,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790844,"byte_end":9790880,"line_start":2664,"line_end":2664,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790881,"byte_end":9790934,"line_start":2665,"line_end":2665,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790935,"byte_end":9790950,"line_start":2666,"line_end":2666,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790951,"byte_end":9790959,"line_start":2667,"line_end":2667,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790960,"byte_end":9790967,"line_start":2668,"line_end":2668,"column_start":1,"column_end":8}},{"value":"/     1_u16 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790968,"byte_end":9790987,"line_start":2669,"line_end":2669,"column_start":1,"column_end":20}},{"value":"/     2 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9790988,"byte_end":9791003,"line_start":2670,"line_end":2670,"column_start":1,"column_end":16}},{"value":"/     3 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791004,"byte_end":9791019,"line_start":2671,"line_end":2671,"column_start":1,"column_end":16}},{"value":"/     4 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791020,"byte_end":9791035,"line_start":2672,"line_end":2672,"column_start":1,"column_end":16}},{"value":"/     100 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791036,"byte_end":9791053,"line_start":2673,"line_end":2673,"column_start":1,"column_end":18}},{"value":"/     200 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791054,"byte_end":9791071,"line_start":2674,"line_end":2674,"column_start":1,"column_end":18}},{"value":"/     300 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791072,"byte_end":9791089,"line_start":2675,"line_end":2675,"column_start":1,"column_end":18}},{"value":"/     400 >> 3,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791090,"byte_end":9791107,"line_start":2676,"line_end":2676,"column_start":1,"column_end":18}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791108,"byte_end":9791115,"line_start":2677,"line_end":2677,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791116,"byte_end":9791122,"line_start":2678,"line_end":2678,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791123,"byte_end":9791130,"line_start":2679,"line_end":2679,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791131,"byte_end":9791142,"line_start":2680,"line_end":2680,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791143,"byte_end":9791160,"line_start":2681,"line_end":2681,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791740,"byte_end":9791757,"line_start":2699,"line_end":2699,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791328,"byte_end":9791406,"line_start":2687,"line_end":2687,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791407,"byte_end":9791410,"line_start":2688,"line_end":2688,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791411,"byte_end":9791418,"line_start":2689,"line_end":2689,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791419,"byte_end":9791442,"line_start":2690,"line_end":2690,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791443,"byte_end":9791489,"line_start":2691,"line_end":2691,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791490,"byte_end":9791526,"line_start":2692,"line_end":2692,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791527,"byte_end":9791580,"line_start":2693,"line_end":2693,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791581,"byte_end":9791638,"line_start":2694,"line_end":2694,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791639,"byte_end":9791646,"line_start":2695,"line_end":2695,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791647,"byte_end":9791658,"line_start":2696,"line_end":2696,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791659,"byte_end":9791676,"line_start":2697,"line_end":2697,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792248,"byte_end":9792265,"line_start":2716,"line_end":2716,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791844,"byte_end":9791922,"line_start":2703,"line_end":2703,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791923,"byte_end":9791926,"line_start":2704,"line_end":2704,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791927,"byte_end":9791947,"line_start":2705,"line_end":2705,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791948,"byte_end":9791955,"line_start":2706,"line_end":2706,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791956,"byte_end":9791979,"line_start":2707,"line_end":2707,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9791980,"byte_end":9792017,"line_start":2708,"line_end":2708,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792018,"byte_end":9792054,"line_start":2709,"line_end":2709,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792055,"byte_end":9792108,"line_start":2710,"line_end":2710,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792109,"byte_end":9792146,"line_start":2711,"line_end":2711,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792147,"byte_end":9792154,"line_start":2712,"line_end":2712,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792155,"byte_end":9792166,"line_start":2713,"line_end":2713,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9792167,"byte_end":9792184,"line_start":2714,"line_end":2714,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795025,"byte_end":9795036,"line_start":2814,"line_end":2814,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794695,"byte_end":9794739,"line_start":2803,"line_end":2803,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794740,"byte_end":9794747,"line_start":2804,"line_end":2804,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794748,"byte_end":9794771,"line_start":2805,"line_end":2805,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794772,"byte_end":9794816,"line_start":2806,"line_end":2806,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794817,"byte_end":9794848,"line_start":2807,"line_end":2807,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794849,"byte_end":9794876,"line_start":2808,"line_end":2808,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794877,"byte_end":9794902,"line_start":2809,"line_end":2809,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794903,"byte_end":9794935,"line_start":2810,"line_end":2810,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794936,"byte_end":9794943,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9794944,"byte_end":9794961,"line_start":2812,"line_end":2812,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795423,"byte_end":9795436,"line_start":2828,"line_end":2828,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795127,"byte_end":9795180,"line_start":2818,"line_end":2818,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795181,"byte_end":9795188,"line_start":2819,"line_end":2819,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795189,"byte_end":9795212,"line_start":2820,"line_end":2820,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795213,"byte_end":9795257,"line_start":2821,"line_end":2821,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795258,"byte_end":9795278,"line_start":2822,"line_end":2822,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795279,"byte_end":9795308,"line_start":2823,"line_end":2823,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795309,"byte_end":9795333,"line_start":2824,"line_end":2824,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795334,"byte_end":9795341,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795342,"byte_end":9795359,"line_start":2826,"line_end":2826,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795869,"byte_end":9795886,"line_start":2843,"line_end":2843,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795511,"byte_end":9795577,"line_start":2832,"line_end":2832,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795578,"byte_end":9795585,"line_start":2833,"line_end":2833,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795586,"byte_end":9795609,"line_start":2834,"line_end":2834,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795610,"byte_end":9795654,"line_start":2835,"line_end":2835,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795655,"byte_end":9795686,"line_start":2836,"line_end":2836,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795687,"byte_end":9795720,"line_start":2837,"line_end":2837,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795721,"byte_end":9795746,"line_start":2838,"line_end":2838,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795747,"byte_end":9795779,"line_start":2839,"line_end":2839,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795780,"byte_end":9795787,"line_start":2840,"line_end":2840,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795788,"byte_end":9795805,"line_start":2841,"line_end":2841,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796308,"byte_end":9796319,"line_start":2858,"line_end":2858,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9795978,"byte_end":9796022,"line_start":2847,"line_end":2847,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796023,"byte_end":9796030,"line_start":2848,"line_end":2848,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796031,"byte_end":9796054,"line_start":2849,"line_end":2849,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796055,"byte_end":9796093,"line_start":2850,"line_end":2850,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796094,"byte_end":9796125,"line_start":2851,"line_end":2851,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796126,"byte_end":9796153,"line_start":2852,"line_end":2852,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796154,"byte_end":9796185,"line_start":2853,"line_end":2853,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796186,"byte_end":9796218,"line_start":2854,"line_end":2854,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796219,"byte_end":9796226,"line_start":2855,"line_end":2855,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796227,"byte_end":9796244,"line_start":2856,"line_end":2856,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796696,"byte_end":9796714,"line_start":2872,"line_end":2872,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796394,"byte_end":9796448,"line_start":2862,"line_end":2862,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796449,"byte_end":9796456,"line_start":2863,"line_end":2863,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796457,"byte_end":9796480,"line_start":2864,"line_end":2864,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796481,"byte_end":9796525,"line_start":2865,"line_end":2865,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796526,"byte_end":9796546,"line_start":2866,"line_end":2866,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796547,"byte_end":9796581,"line_start":2867,"line_end":2867,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796582,"byte_end":9796606,"line_start":2868,"line_end":2868,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796607,"byte_end":9796614,"line_start":2869,"line_end":2869,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796615,"byte_end":9796632,"line_start":2870,"line_end":2870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797113,"byte_end":9797130,"line_start":2887,"line_end":2887,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796790,"byte_end":9796834,"line_start":2876,"line_end":2876,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796835,"byte_end":9796842,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796843,"byte_end":9796866,"line_start":2878,"line_end":2878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796867,"byte_end":9796903,"line_start":2879,"line_end":2879,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796904,"byte_end":9796926,"line_start":2880,"line_end":2880,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796927,"byte_end":9796960,"line_start":2881,"line_end":2881,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796961,"byte_end":9796986,"line_start":2882,"line_end":2882,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796987,"byte_end":9796994,"line_start":2883,"line_end":2883,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9796995,"byte_end":9797012,"line_start":2884,"line_end":2884,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797013,"byte_end":9797049,"line_start":2885,"line_end":2885,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797564,"byte_end":9797584,"line_start":2902,"line_end":2902,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797225,"byte_end":9797269,"line_start":2891,"line_end":2891,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797270,"byte_end":9797277,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797278,"byte_end":9797301,"line_start":2893,"line_end":2893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797302,"byte_end":9797346,"line_start":2894,"line_end":2894,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797347,"byte_end":9797378,"line_start":2895,"line_end":2895,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797379,"byte_end":9797415,"line_start":2896,"line_end":2896,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797416,"byte_end":9797441,"line_start":2897,"line_end":2897,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797442,"byte_end":9797474,"line_start":2898,"line_end":2898,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797475,"byte_end":9797482,"line_start":2899,"line_end":2899,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797483,"byte_end":9797500,"line_start":2900,"line_end":2900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797986,"byte_end":9798007,"line_start":2916,"line_end":2916,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797676,"byte_end":9797720,"line_start":2906,"line_end":2906,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797721,"byte_end":9797728,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797729,"byte_end":9797752,"line_start":2908,"line_end":2908,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797753,"byte_end":9797797,"line_start":2909,"line_end":2909,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797798,"byte_end":9797825,"line_start":2910,"line_end":2910,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797826,"byte_end":9797863,"line_start":2911,"line_end":2911,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797864,"byte_end":9797896,"line_start":2912,"line_end":2912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797897,"byte_end":9797904,"line_start":2913,"line_end":2913,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9797905,"byte_end":9797922,"line_start":2914,"line_end":2914,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798489,"byte_end":9798510,"line_start":2931,"line_end":2931,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798089,"byte_end":9798133,"line_start":2920,"line_end":2920,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798134,"byte_end":9798141,"line_start":2921,"line_end":2921,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798142,"byte_end":9798165,"line_start":2922,"line_end":2922,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798166,"byte_end":9798177,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798178,"byte_end":9798255,"line_start":2924,"line_end":2924,"column_start":1,"column_end":78}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798256,"byte_end":9798283,"line_start":2925,"line_end":2925,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798284,"byte_end":9798321,"line_start":2926,"line_end":2926,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798322,"byte_end":9798399,"line_start":2927,"line_end":2927,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798400,"byte_end":9798407,"line_start":2928,"line_end":2928,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798408,"byte_end":9798425,"line_start":2929,"line_end":2929,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799128,"byte_end":9799140,"line_start":2952,"line_end":2952,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798602,"byte_end":9798642,"line_start":2935,"line_end":2935,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798643,"byte_end":9798650,"line_start":2936,"line_end":2936,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798651,"byte_end":9798674,"line_start":2937,"line_end":2937,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798675,"byte_end":9798686,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798687,"byte_end":9798764,"line_start":2939,"line_end":2939,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798765,"byte_end":9798790,"line_start":2940,"line_end":2940,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798791,"byte_end":9798861,"line_start":2941,"line_end":2941,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798862,"byte_end":9798869,"line_start":2942,"line_end":2942,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798870,"byte_end":9798918,"line_start":2943,"line_end":2943,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798919,"byte_end":9798934,"line_start":2944,"line_end":2944,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798935,"byte_end":9798943,"line_start":2945,"line_end":2945,"column_start":1,"column_end":9}},{"value":"/   [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9798944,"byte_end":9799019,"line_start":2946,"line_end":2946,"column_start":1,"column_end":76}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799020,"byte_end":9799026,"line_start":2947,"line_end":2947,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799027,"byte_end":9799034,"line_start":2948,"line_end":2948,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799035,"byte_end":9799046,"line_start":2949,"line_end":2949,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799047,"byte_end":9799064,"line_start":2950,"line_end":2950,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799626,"byte_end":9799639,"line_start":2967,"line_end":2967,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799218,"byte_end":9799259,"line_start":2956,"line_end":2956,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799260,"byte_end":9799267,"line_start":2957,"line_end":2957,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799268,"byte_end":9799291,"line_start":2958,"line_end":2958,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799292,"byte_end":9799350,"line_start":2959,"line_end":2959,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799351,"byte_end":9799416,"line_start":2960,"line_end":2960,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799417,"byte_end":9799466,"line_start":2961,"line_end":2961,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799467,"byte_end":9799524,"line_start":2962,"line_end":2962,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799525,"byte_end":9799532,"line_start":2963,"line_end":2963,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799533,"byte_end":9799544,"line_start":2964,"line_end":2964,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799545,"byte_end":9799562,"line_start":2965,"line_end":2965,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800066,"byte_end":9800079,"line_start":2982,"line_end":2982,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799718,"byte_end":9799759,"line_start":2971,"line_end":2971,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799760,"byte_end":9799767,"line_start":2972,"line_end":2972,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799768,"byte_end":9799791,"line_start":2973,"line_end":2973,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799792,"byte_end":9799830,"line_start":2974,"line_end":2974,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799831,"byte_end":9799873,"line_start":2975,"line_end":2975,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799874,"byte_end":9799923,"line_start":2976,"line_end":2976,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799924,"byte_end":9799964,"line_start":2977,"line_end":2977,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799965,"byte_end":9799972,"line_start":2978,"line_end":2978,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799973,"byte_end":9799984,"line_start":2979,"line_end":2979,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9799985,"byte_end":9800002,"line_start":2980,"line_end":2980,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800494,"byte_end":9800507,"line_start":2997,"line_end":2997,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800158,"byte_end":9800199,"line_start":2986,"line_end":2986,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800200,"byte_end":9800207,"line_start":2987,"line_end":2987,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800208,"byte_end":9800231,"line_start":2988,"line_end":2988,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800232,"byte_end":9800270,"line_start":2989,"line_end":2989,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800271,"byte_end":9800311,"line_start":2990,"line_end":2990,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800312,"byte_end":9800361,"line_start":2991,"line_end":2991,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800362,"byte_end":9800392,"line_start":2992,"line_end":2992,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800393,"byte_end":9800400,"line_start":2993,"line_end":2993,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800401,"byte_end":9800412,"line_start":2994,"line_end":2994,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800413,"byte_end":9800430,"line_start":2995,"line_end":2995,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800905,"byte_end":9800914,"line_start":3012,"line_end":3012,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800586,"byte_end":9800607,"line_start":3001,"line_end":3001,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800608,"byte_end":9800615,"line_start":3002,"line_end":3002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800616,"byte_end":9800639,"line_start":3003,"line_end":3003,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800640,"byte_end":9800684,"line_start":3004,"line_end":3004,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800685,"byte_end":9800730,"line_start":3005,"line_end":3005,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800731,"byte_end":9800770,"line_start":3006,"line_end":3006,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800771,"byte_end":9800803,"line_start":3007,"line_end":3007,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800804,"byte_end":9800811,"line_start":3008,"line_end":3008,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800812,"byte_end":9800823,"line_start":3009,"line_end":3009,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800824,"byte_end":9800841,"line_start":3010,"line_end":3010,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801337,"byte_end":9801348,"line_start":3027,"line_end":3027,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9800990,"byte_end":9801035,"line_start":3016,"line_end":3016,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801036,"byte_end":9801043,"line_start":3017,"line_end":3017,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801044,"byte_end":9801067,"line_start":3018,"line_end":3018,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801068,"byte_end":9801112,"line_start":3019,"line_end":3019,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801113,"byte_end":9801160,"line_start":3020,"line_end":3020,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801161,"byte_end":9801202,"line_start":3021,"line_end":3021,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801203,"byte_end":9801235,"line_start":3022,"line_end":3022,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801236,"byte_end":9801243,"line_start":3023,"line_end":3023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801244,"byte_end":9801255,"line_start":3024,"line_end":3024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801256,"byte_end":9801273,"line_start":3025,"line_end":3025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801977,"byte_end":9802000,"line_start":3048,"line_end":3048,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([\n   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801424,"byte_end":9801475,"line_start":3031,"line_end":3031,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801476,"byte_end":9801483,"line_start":3032,"line_end":3032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801484,"byte_end":9801507,"line_start":3033,"line_end":3033,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801508,"byte_end":9801519,"line_start":3034,"line_end":3034,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801520,"byte_end":9801602,"line_start":3035,"line_end":3035,"column_start":1,"column_end":83}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801603,"byte_end":9801628,"line_start":3036,"line_end":3036,"column_start":1,"column_end":26}},{"value":"/   0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801629,"byte_end":9801698,"line_start":3037,"line_end":3037,"column_start":1,"column_end":70}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801699,"byte_end":9801706,"line_start":3038,"line_end":3038,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801707,"byte_end":9801766,"line_start":3039,"line_end":3039,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801767,"byte_end":9801782,"line_start":3040,"line_end":3040,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801783,"byte_end":9801791,"line_start":3041,"line_end":3041,"column_start":1,"column_end":9}},{"value":"/   [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801792,"byte_end":9801868,"line_start":3042,"line_end":3042,"column_start":1,"column_end":77}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801869,"byte_end":9801875,"line_start":3043,"line_end":3043,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801876,"byte_end":9801883,"line_start":3044,"line_end":3044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801884,"byte_end":9801895,"line_start":3045,"line_end":3045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9801896,"byte_end":9801913,"line_start":3046,"line_end":3046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802518,"byte_end":9802542,"line_start":3063,"line_end":3063,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802079,"byte_end":9802131,"line_start":3052,"line_end":3052,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802132,"byte_end":9802139,"line_start":3053,"line_end":3053,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802140,"byte_end":9802163,"line_start":3054,"line_end":3054,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802164,"byte_end":9802222,"line_start":3055,"line_end":3055,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802223,"byte_end":9802293,"line_start":3056,"line_end":3056,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802294,"byte_end":9802354,"line_start":3057,"line_end":3057,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802355,"byte_end":9802416,"line_start":3058,"line_end":3058,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802417,"byte_end":9802424,"line_start":3059,"line_end":3059,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802425,"byte_end":9802436,"line_start":3060,"line_end":3060,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802437,"byte_end":9802454,"line_start":3061,"line_end":3061,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803132,"byte_end":9803155,"line_start":3080,"line_end":3080,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b =\n   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802622,"byte_end":9802673,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802674,"byte_end":9802681,"line_start":3068,"line_end":3068,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802682,"byte_end":9802705,"line_start":3069,"line_end":3069,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802706,"byte_end":9802717,"line_start":3070,"line_end":3070,"column_start":1,"column_end":12}},{"value":"/   m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802718,"byte_end":9802799,"line_start":3071,"line_end":3071,"column_start":1,"column_end":82}},{"value":"/ let b =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802800,"byte_end":9802811,"line_start":3072,"line_end":3072,"column_start":1,"column_end":12}},{"value":"/   m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802812,"byte_end":9802894,"line_start":3073,"line_end":3073,"column_start":1,"column_end":83}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802895,"byte_end":9802954,"line_start":3074,"line_end":3074,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9802955,"byte_end":9803030,"line_start":3075,"line_end":3075,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803031,"byte_end":9803038,"line_start":3076,"line_end":3076,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803039,"byte_end":9803050,"line_start":3077,"line_end":3077,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803051,"byte_end":9803068,"line_start":3078,"line_end":3078,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803679,"byte_end":9803703,"line_start":3095,"line_end":3095,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803234,"byte_end":9803286,"line_start":3084,"line_end":3084,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803287,"byte_end":9803294,"line_start":3085,"line_end":3085,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803295,"byte_end":9803318,"line_start":3086,"line_end":3086,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803319,"byte_end":9803389,"line_start":3087,"line_end":3087,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803390,"byte_end":9803462,"line_start":3088,"line_end":3088,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803463,"byte_end":9803523,"line_start":3089,"line_end":3089,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803524,"byte_end":9803577,"line_start":3090,"line_end":3090,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803578,"byte_end":9803585,"line_start":3091,"line_end":3091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803586,"byte_end":9803597,"line_start":3092,"line_end":3092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803598,"byte_end":9803615,"line_start":3093,"line_end":3093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804329,"byte_end":9804349,"line_start":3116,"line_end":3116,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803783,"byte_end":9803840,"line_start":3099,"line_end":3099,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803841,"byte_end":9803848,"line_start":3100,"line_end":3100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803849,"byte_end":9803872,"line_start":3101,"line_end":3101,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803873,"byte_end":9803884,"line_start":3102,"line_end":3102,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803885,"byte_end":9803962,"line_start":3103,"line_end":3103,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803963,"byte_end":9803988,"line_start":3104,"line_end":3104,"column_start":1,"column_end":26}},{"value":"/   0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9803989,"byte_end":9804059,"line_start":3105,"line_end":3105,"column_start":1,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804060,"byte_end":9804067,"line_start":3106,"line_end":3106,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804068,"byte_end":9804124,"line_start":3107,"line_end":3107,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804125,"byte_end":9804140,"line_start":3108,"line_end":3108,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804141,"byte_end":9804149,"line_start":3109,"line_end":3109,"column_start":1,"column_end":9}},{"value":"/   [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804150,"byte_end":9804220,"line_start":3110,"line_end":3110,"column_start":1,"column_end":71}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804221,"byte_end":9804227,"line_start":3111,"line_end":3111,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804228,"byte_end":9804235,"line_start":3112,"line_end":3112,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804236,"byte_end":9804247,"line_start":3113,"line_end":3113,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804248,"byte_end":9804265,"line_start":3114,"line_end":3114,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804859,"byte_end":9804880,"line_start":3131,"line_end":3131,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804432,"byte_end":9804490,"line_start":3120,"line_end":3120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804491,"byte_end":9804498,"line_start":3121,"line_end":3121,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804499,"byte_end":9804522,"line_start":3122,"line_end":3122,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804523,"byte_end":9804581,"line_start":3123,"line_end":3123,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804582,"byte_end":9804643,"line_start":3124,"line_end":3124,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804644,"byte_end":9804701,"line_start":3125,"line_end":3125,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804702,"byte_end":9804757,"line_start":3126,"line_end":3126,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804758,"byte_end":9804765,"line_start":3127,"line_end":3127,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804766,"byte_end":9804777,"line_start":3128,"line_end":3128,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804778,"byte_end":9804795,"line_start":3129,"line_end":3129,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805325,"byte_end":9805346,"line_start":3146,"line_end":3146,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9804964,"byte_end":9805022,"line_start":3135,"line_end":3135,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805023,"byte_end":9805030,"line_start":3136,"line_end":3136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805031,"byte_end":9805054,"line_start":3137,"line_end":3137,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805055,"byte_end":9805093,"line_start":3138,"line_end":3138,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805094,"byte_end":9805132,"line_start":3139,"line_end":3139,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805133,"byte_end":9805190,"line_start":3140,"line_end":3140,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805191,"byte_end":9805223,"line_start":3141,"line_end":3141,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805224,"byte_end":9805231,"line_start":3142,"line_end":3142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805232,"byte_end":9805243,"line_start":3143,"line_end":3143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805244,"byte_end":9805261,"line_start":3144,"line_end":3144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805788,"byte_end":9805809,"line_start":3161,"line_end":3161,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805430,"byte_end":9805488,"line_start":3150,"line_end":3150,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805489,"byte_end":9805496,"line_start":3151,"line_end":3151,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805497,"byte_end":9805520,"line_start":3152,"line_end":3152,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805521,"byte_end":9805559,"line_start":3153,"line_end":3153,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805560,"byte_end":9805600,"line_start":3154,"line_end":3154,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805601,"byte_end":9805658,"line_start":3155,"line_end":3155,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805659,"byte_end":9805686,"line_start":3156,"line_end":3156,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805687,"byte_end":9805694,"line_start":3157,"line_end":3157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805695,"byte_end":9805706,"line_start":3158,"line_end":3158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805707,"byte_end":9805724,"line_start":3159,"line_end":3159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806251,"byte_end":9806268,"line_start":3176,"line_end":3176,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805893,"byte_end":9805945,"line_start":3165,"line_end":3165,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805946,"byte_end":9805953,"line_start":3166,"line_end":3166,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805954,"byte_end":9805977,"line_start":3167,"line_end":3167,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9805978,"byte_end":9806022,"line_start":3168,"line_end":3168,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806023,"byte_end":9806068,"line_start":3169,"line_end":3169,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806069,"byte_end":9806116,"line_start":3170,"line_end":3170,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806117,"byte_end":9806149,"line_start":3171,"line_end":3171,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806150,"byte_end":9806157,"line_start":3172,"line_end":3172,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806158,"byte_end":9806169,"line_start":3173,"line_end":3173,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806170,"byte_end":9806187,"line_start":3174,"line_end":3174,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806871,"byte_end":9806890,"line_start":3194,"line_end":3194,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a =\n   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([\n   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,\n ]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806349,"byte_end":9806405,"line_start":3180,"line_end":3180,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806406,"byte_end":9806413,"line_start":3181,"line_end":3181,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806414,"byte_end":9806437,"line_start":3182,"line_end":3182,"column_start":1,"column_end":24}},{"value":"/ let a =","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806438,"byte_end":9806449,"line_start":3183,"line_end":3183,"column_start":1,"column_end":12}},{"value":"/   m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806450,"byte_end":9806527,"line_start":3184,"line_end":3184,"column_start":1,"column_end":78}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806528,"byte_end":9806553,"line_start":3185,"line_end":3185,"column_start":1,"column_end":26}},{"value":"/   12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806554,"byte_end":9806628,"line_start":3186,"line_end":3186,"column_start":1,"column_end":75}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806629,"byte_end":9806636,"line_start":3187,"line_end":3187,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806637,"byte_end":9806692,"line_start":3188,"line_end":3188,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806693,"byte_end":9806769,"line_start":3189,"line_end":3189,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806770,"byte_end":9806777,"line_start":3190,"line_end":3190,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806778,"byte_end":9806789,"line_start":3191,"line_end":3191,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806790,"byte_end":9806807,"line_start":3192,"line_end":3192,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807387,"byte_end":9807407,"line_start":3209,"line_end":3209,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9806973,"byte_end":9807030,"line_start":3198,"line_end":3198,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807031,"byte_end":9807038,"line_start":3199,"line_end":3199,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807039,"byte_end":9807062,"line_start":3200,"line_end":3200,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807063,"byte_end":9807121,"line_start":3201,"line_end":3201,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807122,"byte_end":9807183,"line_start":3202,"line_end":3202,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807184,"byte_end":9807240,"line_start":3203,"line_end":3203,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807241,"byte_end":9807285,"line_start":3204,"line_end":3204,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807286,"byte_end":9807293,"line_start":3205,"line_end":3205,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807294,"byte_end":9807305,"line_start":3206,"line_end":3206,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807306,"byte_end":9807323,"line_start":3207,"line_end":3207,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807850,"byte_end":9807870,"line_start":3224,"line_end":3224,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807491,"byte_end":9807548,"line_start":3213,"line_end":3213,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807549,"byte_end":9807556,"line_start":3214,"line_end":3214,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807557,"byte_end":9807580,"line_start":3215,"line_end":3215,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807581,"byte_end":9807619,"line_start":3216,"line_end":3216,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807620,"byte_end":9807658,"line_start":3217,"line_end":3217,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807659,"byte_end":9807715,"line_start":3218,"line_end":3218,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807716,"byte_end":9807748,"line_start":3219,"line_end":3219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807749,"byte_end":9807756,"line_start":3220,"line_end":3220,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807757,"byte_end":9807768,"line_start":3221,"line_end":3221,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807769,"byte_end":9807786,"line_start":3222,"line_end":3222,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808314,"byte_end":9808334,"line_start":3239,"line_end":3239,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9807954,"byte_end":9808011,"line_start":3228,"line_end":3228,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808012,"byte_end":9808019,"line_start":3229,"line_end":3229,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808020,"byte_end":9808043,"line_start":3230,"line_end":3230,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808044,"byte_end":9808082,"line_start":3231,"line_end":3231,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808083,"byte_end":9808123,"line_start":3232,"line_end":3232,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808124,"byte_end":9808180,"line_start":3233,"line_end":3233,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808181,"byte_end":9808212,"line_start":3234,"line_end":3234,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808213,"byte_end":9808220,"line_start":3235,"line_end":3235,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808221,"byte_end":9808232,"line_start":3236,"line_end":3236,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808233,"byte_end":9808250,"line_start":3237,"line_end":3237,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808775,"byte_end":9808791,"line_start":3254,"line_end":3254,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808418,"byte_end":9808469,"line_start":3243,"line_end":3243,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808470,"byte_end":9808477,"line_start":3244,"line_end":3244,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808478,"byte_end":9808501,"line_start":3245,"line_end":3245,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808502,"byte_end":9808546,"line_start":3246,"line_end":3246,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808547,"byte_end":9808592,"line_start":3247,"line_end":3247,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808593,"byte_end":9808639,"line_start":3248,"line_end":3248,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808640,"byte_end":9808673,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808674,"byte_end":9808681,"line_start":3250,"line_end":3250,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808682,"byte_end":9808693,"line_start":3251,"line_end":3251,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808694,"byte_end":9808711,"line_start":3252,"line_end":3252,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809186,"byte_end":9809198,"line_start":3269,"line_end":3269,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808872,"byte_end":9808892,"line_start":3258,"line_end":3258,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808893,"byte_end":9808900,"line_start":3259,"line_end":3259,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808901,"byte_end":9808924,"line_start":3260,"line_end":3260,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808925,"byte_end":9808967,"line_start":3261,"line_end":3261,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9808968,"byte_end":9809010,"line_start":3262,"line_end":3262,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809011,"byte_end":9809053,"line_start":3263,"line_end":3263,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809054,"byte_end":9809084,"line_start":3264,"line_end":3264,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809085,"byte_end":9809092,"line_start":3265,"line_end":3265,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809093,"byte_end":9809104,"line_start":3266,"line_end":3266,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809105,"byte_end":9809122,"line_start":3267,"line_end":3267,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809588,"byte_end":9809600,"line_start":3284,"line_end":3284,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809274,"byte_end":9809294,"line_start":3273,"line_end":3273,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809295,"byte_end":9809302,"line_start":3274,"line_end":3274,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809303,"byte_end":9809326,"line_start":3275,"line_end":3275,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809327,"byte_end":9809365,"line_start":3276,"line_end":3276,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809366,"byte_end":9809404,"line_start":3277,"line_end":3277,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809405,"byte_end":9809453,"line_start":3278,"line_end":3278,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809454,"byte_end":9809486,"line_start":3279,"line_end":3279,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809487,"byte_end":9809494,"line_start":3280,"line_end":3280,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809495,"byte_end":9809506,"line_start":3281,"line_end":3281,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9809507,"byte_end":9809524,"line_start":3282,"line_end":3282,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":10563,"byte_end":10585,"line_start":238,"line_end":238,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11430,"byte_end":11454,"line_start":258,"line_end":258,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":11745,"byte_end":11758,"line_start":270,"line_end":270,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12089,"byte_end":12102,"line_start":283,"line_end":283,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":12051,"byte_end":12079,"line_start":282,"line_end":282,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623394,"byte_end":9623398,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623461,"byte_end":9623465,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623551,"byte_end":9623555,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623701,"byte_end":9623705,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624723,"byte_end":9624727,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624822,"byte_end":9624826,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624848,"byte_end":9624852,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624980,"byte_end":9624984,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9625582,"byte_end":9625586,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9626048,"byte_end":9626052,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9626541,"byte_end":9626545,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627042,"byte_end":9627046,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627507,"byte_end":9627511,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627972,"byte_end":9627976,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9628477,"byte_end":9628481,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9628979,"byte_end":9628983,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630391,"byte_end":9630396,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630459,"byte_end":9630464,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630551,"byte_end":9630556,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630705,"byte_end":9630710,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631725,"byte_end":9631730,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631825,"byte_end":9631830,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631852,"byte_end":9631857,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631985,"byte_end":9631990,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9632590,"byte_end":9632595,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633010,"byte_end":9633015,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633461,"byte_end":9633466,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633928,"byte_end":9633933,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9634348,"byte_end":9634353,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9634768,"byte_end":9634773,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9635241,"byte_end":9635246,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9635711,"byte_end":9635716,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637229,"byte_end":9637234,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637297,"byte_end":9637302,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637389,"byte_end":9637394,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637553,"byte_end":9637558,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637653,"byte_end":9637658,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637680,"byte_end":9637685,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637823,"byte_end":9637828,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638114,"byte_end":9638119,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638416,"byte_end":9638421,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638707,"byte_end":9638712,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639009,"byte_end":9639014,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639300,"byte_end":9639305,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639602,"byte_end":9639607,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639893,"byte_end":9639898,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640192,"byte_end":9640197,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640467,"byte_end":9640472,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640807,"byte_end":9640812,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9641273,"byte_end":9641278,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9641772,"byte_end":9641777,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9642231,"byte_end":9642236,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9642702,"byte_end":9642707,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9643173,"byte_end":9643178,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9643636,"byte_end":9643641,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9644096,"byte_end":9644101,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645576,"byte_end":9645580,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645643,"byte_end":9645647,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645733,"byte_end":9645737,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645883,"byte_end":9645887,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646901,"byte_end":9646905,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647000,"byte_end":9647004,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647026,"byte_end":9647030,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647158,"byte_end":9647162,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647760,"byte_end":9647764,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9648246,"byte_end":9648250,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9648751,"byte_end":9648755,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9649264,"byte_end":9649268,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9649749,"byte_end":9649753,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9650234,"byte_end":9650238,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9650751,"byte_end":9650755,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9651265,"byte_end":9651269,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652688,"byte_end":9652693,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652756,"byte_end":9652761,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652848,"byte_end":9652853,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653002,"byte_end":9653007,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654022,"byte_end":9654027,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654122,"byte_end":9654127,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654149,"byte_end":9654154,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654282,"byte_end":9654287,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654887,"byte_end":9654892,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9655307,"byte_end":9655312,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9655758,"byte_end":9655763,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9656225,"byte_end":9656230,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9656645,"byte_end":9656650,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9657065,"byte_end":9657070,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9657538,"byte_end":9657543,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9658008,"byte_end":9658013,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659526,"byte_end":9659531,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659594,"byte_end":9659599,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659686,"byte_end":9659691,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659850,"byte_end":9659855,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659950,"byte_end":9659955,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659977,"byte_end":9659982,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660120,"byte_end":9660125,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660411,"byte_end":9660416,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660714,"byte_end":9660719,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661008,"byte_end":9661013,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661312,"byte_end":9661317,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661603,"byte_end":9661608,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661905,"byte_end":9661910,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662196,"byte_end":9662201,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662500,"byte_end":9662505,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662790,"byte_end":9662795,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9663140,"byte_end":9663145,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9663618,"byte_end":9663623,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9664129,"byte_end":9664134,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9664600,"byte_end":9664605,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9665091,"byte_end":9665096,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9665582,"byte_end":9665587,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9666057,"byte_end":9666062,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9666529,"byte_end":9666534,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706608,"byte_end":9706612,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706756,"byte_end":9706760,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706871,"byte_end":9706875,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707028,"byte_end":9707032,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707145,"byte_end":9707149,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707299,"byte_end":9707303,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707416,"byte_end":9707420,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707573,"byte_end":9707577,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707688,"byte_end":9707692,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707836,"byte_end":9707840,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707948,"byte_end":9707952,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708096,"byte_end":9708100,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708208,"byte_end":9708212,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708350,"byte_end":9708354,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708717,"byte_end":9708721,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708865,"byte_end":9708869,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708983,"byte_end":9708987,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810331,"byte_end":9810336,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810481,"byte_end":9810486,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810597,"byte_end":9810602,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810756,"byte_end":9810761,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810874,"byte_end":9810879,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811030,"byte_end":9811035,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811148,"byte_end":9811153,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811307,"byte_end":9811312,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811423,"byte_end":9811428,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811573,"byte_end":9811578,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811686,"byte_end":9811691,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811836,"byte_end":9811841,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811949,"byte_end":9811954,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812094,"byte_end":9812099,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812463,"byte_end":9812468,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812613,"byte_end":9812618,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812732,"byte_end":9812737,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813147,"byte_end":9813152,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813306,"byte_end":9813311,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813424,"byte_end":9813429,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813580,"byte_end":9813585,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813698,"byte_end":9813703,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813857,"byte_end":9813862,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813973,"byte_end":9813978,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9814330,"byte_end":9814335,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9814685,"byte_end":9814690,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\lib.rs","byte_start":7113,"byte_end":7131,"line_start":138,"line_end":138,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623394,"byte_end":9623398,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623461,"byte_end":9623465,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623551,"byte_end":9623555,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":94},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9623701,"byte_end":9623705,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624723,"byte_end":9624727,"line_start":72,"line_end":72,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624822,"byte_end":9624826,"line_start":79,"line_end":79,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624848,"byte_end":9624852,"line_start":81,"line_end":81,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9624980,"byte_end":9624984,"line_start":89,"line_end":89,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9625582,"byte_end":9625586,"line_start":113,"line_end":113,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9626048,"byte_end":9626052,"line_start":132,"line_end":132,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9626541,"byte_end":9626545,"line_start":151,"line_end":151,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627042,"byte_end":9627046,"line_start":170,"line_end":170,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627507,"byte_end":9627511,"line_start":189,"line_end":189,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9627972,"byte_end":9627976,"line_start":208,"line_end":208,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9628477,"byte_end":9628481,"line_start":227,"line_end":227,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128_.rs","byte_start":9628979,"byte_end":9628983,"line_start":246,"line_end":246,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630391,"byte_end":9630396,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630459,"byte_end":9630464,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630551,"byte_end":9630556,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":140},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9630705,"byte_end":9630710,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631725,"byte_end":9631730,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631825,"byte_end":9631830,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631852,"byte_end":9631857,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9631985,"byte_end":9631990,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9632590,"byte_end":9632595,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633010,"byte_end":9633015,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633461,"byte_end":9633466,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9633928,"byte_end":9633933,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9634348,"byte_end":9634353,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9634768,"byte_end":9634773,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9635241,"byte_end":9635246,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128d_.rs","byte_start":9635711,"byte_end":9635716,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637229,"byte_end":9637234,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637297,"byte_end":9637302,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637389,"byte_end":9637394,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":186},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637553,"byte_end":9637558,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637653,"byte_end":9637658,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637680,"byte_end":9637685,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9637823,"byte_end":9637828,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638114,"byte_end":9638119,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638416,"byte_end":9638421,"line_start":87,"line_end":87,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9638707,"byte_end":9638712,"line_start":103,"line_end":103,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639009,"byte_end":9639014,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639300,"byte_end":9639305,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639602,"byte_end":9639607,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9639893,"byte_end":9639898,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640192,"byte_end":9640197,"line_start":189,"line_end":189,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640467,"byte_end":9640472,"line_start":205,"line_end":205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9640807,"byte_end":9640812,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9641273,"byte_end":9641278,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9641772,"byte_end":9641777,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9642231,"byte_end":9642236,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9642702,"byte_end":9642707,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9643173,"byte_end":9643178,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9643636,"byte_end":9643641,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m128i_.rs","byte_start":9644096,"byte_end":9644101,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645576,"byte_end":9645580,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645643,"byte_end":9645647,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645733,"byte_end":9645737,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":288},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9645883,"byte_end":9645887,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9646901,"byte_end":9646905,"line_start":70,"line_end":70,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647000,"byte_end":9647004,"line_start":77,"line_end":77,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647026,"byte_end":9647030,"line_start":79,"line_end":79,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647158,"byte_end":9647162,"line_start":87,"line_end":87,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9647760,"byte_end":9647764,"line_start":111,"line_end":111,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9648246,"byte_end":9648250,"line_start":130,"line_end":130,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9648751,"byte_end":9648755,"line_start":149,"line_end":149,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9649264,"byte_end":9649268,"line_start":168,"line_end":168,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9649749,"byte_end":9649753,"line_start":187,"line_end":187,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9650234,"byte_end":9650238,"line_start":206,"line_end":206,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9650751,"byte_end":9650755,"line_start":225,"line_end":225,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256_.rs","byte_start":9651265,"byte_end":9651269,"line_start":244,"line_end":244,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":288},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652688,"byte_end":9652693,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652756,"byte_end":9652761,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9652848,"byte_end":9652853,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":334},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9653002,"byte_end":9653007,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654022,"byte_end":9654027,"line_start":72,"line_end":72,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654122,"byte_end":9654127,"line_start":79,"line_end":79,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654149,"byte_end":9654154,"line_start":81,"line_end":81,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654282,"byte_end":9654287,"line_start":89,"line_end":89,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9654887,"byte_end":9654892,"line_start":113,"line_end":113,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9655307,"byte_end":9655312,"line_start":130,"line_end":130,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9655758,"byte_end":9655763,"line_start":147,"line_end":147,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9656225,"byte_end":9656230,"line_start":164,"line_end":164,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9656645,"byte_end":9656650,"line_start":181,"line_end":181,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9657065,"byte_end":9657070,"line_start":198,"line_end":198,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9657538,"byte_end":9657543,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256d_.rs","byte_start":9658008,"byte_end":9658013,"line_start":232,"line_end":232,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":334},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659526,"byte_end":9659531,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":165}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659594,"byte_end":9659599,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659686,"byte_end":9659691,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":380},"to":{"krate":4,"index":329}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659850,"byte_end":9659855,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659950,"byte_end":9659955,"line_start":41,"line_end":41,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9659977,"byte_end":9659982,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660120,"byte_end":9660125,"line_start":53,"line_end":53,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660411,"byte_end":9660416,"line_start":69,"line_end":69,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9660714,"byte_end":9660719,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661008,"byte_end":9661013,"line_start":103,"line_end":103,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661312,"byte_end":9661317,"line_start":121,"line_end":121,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661603,"byte_end":9661608,"line_start":137,"line_end":137,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9661905,"byte_end":9661910,"line_start":155,"line_end":155,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662196,"byte_end":9662201,"line_start":171,"line_end":171,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662500,"byte_end":9662505,"line_start":189,"line_end":189,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9662790,"byte_end":9662795,"line_start":205,"line_end":205,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9663140,"byte_end":9663145,"line_start":225,"line_end":225,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9663618,"byte_end":9663623,"line_start":244,"line_end":244,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9664129,"byte_end":9664134,"line_start":263,"line_end":263,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9664600,"byte_end":9664605,"line_start":282,"line_end":282,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9665091,"byte_end":9665096,"line_start":301,"line_end":301,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9665582,"byte_end":9665587,"line_start":320,"line_end":320,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9666057,"byte_end":9666062,"line_start":339,"line_end":339,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\m256i_.rs","byte_start":9666529,"byte_end":9666534,"line_start":358,"line_end":358,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":380},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706608,"byte_end":9706612,"line_start":1307,"line_end":1307,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3125}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706756,"byte_end":9706760,"line_start":1315,"line_end":1315,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3156}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9706871,"byte_end":9706875,"line_start":1322,"line_end":1322,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707028,"byte_end":9707032,"line_start":1330,"line_end":1330,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707145,"byte_end":9707149,"line_start":1337,"line_end":1337,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707299,"byte_end":9707303,"line_start":1345,"line_end":1345,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707416,"byte_end":9707420,"line_start":1352,"line_end":1352,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707573,"byte_end":9707577,"line_start":1360,"line_end":1360,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707688,"byte_end":9707692,"line_start":1367,"line_end":1367,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3140}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707836,"byte_end":9707840,"line_start":1375,"line_end":1375,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3168}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9707948,"byte_end":9707952,"line_start":1382,"line_end":1382,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3135}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708096,"byte_end":9708100,"line_start":1390,"line_end":1390,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3164}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708208,"byte_end":9708212,"line_start":1397,"line_end":1397,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3152}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708350,"byte_end":9708354,"line_start":1406,"line_end":1406,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708717,"byte_end":9708721,"line_start":1420,"line_end":1420,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708865,"byte_end":9708869,"line_start":1428,"line_end":1428,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":3160}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse.rs","byte_start":9708983,"byte_end":9708987,"line_start":1435,"line_end":1435,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":94},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810331,"byte_end":9810336,"line_start":3301,"line_end":3301,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3125}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810481,"byte_end":9810486,"line_start":3309,"line_end":3309,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3156}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810597,"byte_end":9810602,"line_start":3316,"line_end":3316,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810756,"byte_end":9810761,"line_start":3324,"line_end":3324,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9810874,"byte_end":9810879,"line_start":3331,"line_end":3331,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811030,"byte_end":9811035,"line_start":3339,"line_end":3339,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811148,"byte_end":9811153,"line_start":3346,"line_end":3346,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811307,"byte_end":9811312,"line_start":3354,"line_end":3354,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811423,"byte_end":9811428,"line_start":3361,"line_end":3361,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3140}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811573,"byte_end":9811578,"line_start":3369,"line_end":3369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3168}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811686,"byte_end":9811691,"line_start":3376,"line_end":3376,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3135}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811836,"byte_end":9811841,"line_start":3384,"line_end":3384,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3164}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9811949,"byte_end":9811954,"line_start":3391,"line_end":3391,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3152}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812094,"byte_end":9812099,"line_start":3400,"line_end":3400,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812463,"byte_end":9812468,"line_start":3414,"line_end":3414,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812613,"byte_end":9812618,"line_start":3422,"line_end":3422,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":3160}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9812732,"byte_end":9812737,"line_start":3429,"line_end":3429,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813147,"byte_end":9813152,"line_start":3442,"line_end":3442,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813306,"byte_end":9813311,"line_start":3450,"line_end":3450,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813424,"byte_end":9813429,"line_start":3457,"line_end":3457,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813580,"byte_end":9813585,"line_start":3465,"line_end":3465,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813698,"byte_end":9813703,"line_start":3472,"line_end":3472,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813857,"byte_end":9813862,"line_start":3480,"line_end":3480,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9813973,"byte_end":9813978,"line_start":3487,"line_end":3487,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9814330,"byte_end":9814335,"line_start":3501,"line_end":3501,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.5.2\\src\\x86_x64\\sse2.rs","byte_start":9814685,"byte_end":9814690,"line_start":3512,"line_end":3512,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":186},"to":{"krate":1,"index":2714}}]}