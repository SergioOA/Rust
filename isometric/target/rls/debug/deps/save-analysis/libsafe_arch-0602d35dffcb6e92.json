{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=0602d35dffcb6e92","-C","extra-filename=-0602d35dffcb6e92","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libbytemuck-b66ea2c171ff158f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libsafe_arch-0602d35dffcb6e92.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[8225226741313275532,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[9396970804000534196,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","num":6,"id":{"name":"bytemuck_derive","disambiguator":[16691534005265990648,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":92}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":13989,"byte_end":14042,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14043,"byte_end":14046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14047,"byte_end":14126,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14127,"byte_end":14200,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14201,"byte_end":14269,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14270,"byte_end":14286,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14287,"byte_end":14318,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14319,"byte_end":14322,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14323,"byte_end":14335,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14336,"byte_end":14414,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14415,"byte_end":14481,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14482,"byte_end":14550,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14551,"byte_end":14627,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14628,"byte_end":14671,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14672,"byte_end":14745,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14746,"byte_end":14826,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14827,"byte_end":14901,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14902,"byte_end":14977,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14978,"byte_end":15055,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15056,"byte_end":15059,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15060,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15078,"byte_end":15155,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15156,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15231,"byte_end":15310,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15311,"byte_end":15367,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15368,"byte_end":15371,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15372,"byte_end":15442,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15443,"byte_end":15522,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15523,"byte_end":15603,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15604,"byte_end":15667,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15668,"byte_end":15671,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15672,"byte_end":15746,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15747,"byte_end":15827,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15828,"byte_end":15902,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15903,"byte_end":15981,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15982,"byte_end":16044,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16045,"byte_end":16109,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16110,"byte_end":16113,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16114,"byte_end":16139,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16140,"byte_end":16216,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16217,"byte_end":16220,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16221,"byte_end":16260,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16261,"byte_end":16341,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16342,"byte_end":16422,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16423,"byte_end":16459,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16460,"byte_end":16501,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16502,"byte_end":16576,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16577,"byte_end":16654,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16655,"byte_end":16734,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16735,"byte_end":16794,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16795,"byte_end":16840,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16841,"byte_end":16912,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16913,"byte_end":16969,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16970,"byte_end":17002,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17003,"byte_end":17082,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17083,"byte_end":17162,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17163,"byte_end":17220,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17221,"byte_end":17292,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17293,"byte_end":17360,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17361,"byte_end":17419,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17420,"byte_end":17498,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17499,"byte_end":17578,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17579,"byte_end":17659,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17660,"byte_end":17738,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17739,"byte_end":17784,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17785,"byte_end":17865,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17866,"byte_end":17942,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17943,"byte_end":17955,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17956,"byte_end":18032,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18033,"byte_end":18111,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18112,"byte_end":18192,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18193,"byte_end":18212,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18213,"byte_end":18235,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18236,"byte_end":18313,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18314,"byte_end":18386,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18387,"byte_end":18467,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18468,"byte_end":18534,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18535,"byte_end":18612,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18613,"byte_end":18661,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18662,"byte_end":18740,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18741,"byte_end":18817,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18818,"byte_end":18897,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18898,"byte_end":18977,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18978,"byte_end":19039,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19040,"byte_end":19111,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19112,"byte_end":19149,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19150,"byte_end":19229,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19230,"byte_end":19310,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19311,"byte_end":19343,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19408,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19409,"byte_end":19474,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19475,"byte_end":19544,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19545,"byte_end":19622,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19623,"byte_end":19694,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19695,"byte_end":19772,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19773,"byte_end":19852,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19853,"byte_end":19927,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19928,"byte_end":19940,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19941,"byte_end":20018,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20019,"byte_end":20098,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20099,"byte_end":20130,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20131,"byte_end":20206,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20207,"byte_end":20277,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20278,"byte_end":20358,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20359,"byte_end":20438,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20439,"byte_end":20515,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20516,"byte_end":20589,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20590,"byte_end":20670,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20671,"byte_end":20747,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20748,"byte_end":20826,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20827,"byte_end":20890,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20891,"byte_end":20967,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20968,"byte_end":21045,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21046,"byte_end":21125,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21126,"byte_end":21188,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21189,"byte_end":21265,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21266,"byte_end":21282,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21283,"byte_end":21362,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21363,"byte_end":21398,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21399,"byte_end":21473,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21474,"byte_end":21527,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21528,"byte_end":21605,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21606,"byte_end":21686,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21687,"byte_end":21765,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21766,"byte_end":21831,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21832,"byte_end":21912,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21913,"byte_end":21991,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21992,"byte_end":22047,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22048,"byte_end":22128,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22129,"byte_end":22185,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22186,"byte_end":22266,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22267,"byte_end":22342,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22343,"byte_end":22420,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22421,"byte_end":22498,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22499,"byte_end":22577,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22578,"byte_end":22645,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22646,"byte_end":22666,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22747,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22748,"byte_end":22819,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22820,"byte_end":22899,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22900,"byte_end":22928,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22929,"byte_end":22955,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22956,"byte_end":23012,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23013,"byte_end":23090,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23091,"byte_end":23169,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23170,"byte_end":23229,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23230,"byte_end":23252,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23253,"byte_end":23332,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23333,"byte_end":23413,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23414,"byte_end":23492,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23493,"byte_end":23511,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23512,"byte_end":23576,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23577,"byte_end":23654,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23655,"byte_end":23729,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23730,"byte_end":23769,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23770,"byte_end":23849,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23850,"byte_end":23930,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23931,"byte_end":23974,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23975,"byte_end":24054,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24055,"byte_end":24135,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24136,"byte_end":24213,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24214,"byte_end":24293,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24294,"byte_end":24317,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24318,"byte_end":24398,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24399,"byte_end":24445,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624858,"byte_end":9624862,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624535,"byte_end":9624595,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624596,"byte_end":9624599,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624600,"byte_end":9624678,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624679,"byte_end":9624752,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624753,"byte_end":9624794,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624795,"byte_end":9624815,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624816,"byte_end":9624846,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624863,"byte_end":9624873,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625290,"byte_end":9625298,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625121,"byte_end":9625159,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625162,"byte_end":9625165,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625168,"byte_end":9625246,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625249,"byte_end":9625260,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625263,"byte_end":9625280,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625525,"byte_end":9625535,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625342,"byte_end":9625378,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625381,"byte_end":9625384,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625387,"byte_end":9625464,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625467,"byte_end":9625481,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625484,"byte_end":9625495,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625498,"byte_end":9625515,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625769,"byte_end":9625776,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625585,"byte_end":9625648,"line_start":47,"line_end":47,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625651,"byte_end":9625654,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625657,"byte_end":9625725,"line_start":49,"line_end":49,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625728,"byte_end":9625739,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625742,"byte_end":9625759,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626034,"byte_end":9626043,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625846,"byte_end":9625909,"line_start":56,"line_end":56,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625912,"byte_end":9625915,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625918,"byte_end":9625990,"line_start":58,"line_end":58,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625993,"byte_end":9626004,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626007,"byte_end":9626024,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630589,"byte_end":9630594,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630266,"byte_end":9630326,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630327,"byte_end":9630330,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630331,"byte_end":9630409,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630410,"byte_end":9630483,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630484,"byte_end":9630525,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630526,"byte_end":9630546,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630547,"byte_end":9630577,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630595,"byte_end":9630606,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631029,"byte_end":9631037,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630859,"byte_end":9630898,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630901,"byte_end":9630904,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630907,"byte_end":9630985,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630988,"byte_end":9630999,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631002,"byte_end":9631019,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631266,"byte_end":9631276,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631081,"byte_end":9631118,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631121,"byte_end":9631124,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631127,"byte_end":9631205,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631208,"byte_end":9631222,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631225,"byte_end":9631236,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631239,"byte_end":9631256,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631507,"byte_end":9631514,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631326,"byte_end":9631390,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631393,"byte_end":9631396,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631399,"byte_end":9631463,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631466,"byte_end":9631477,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631480,"byte_end":9631497,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631769,"byte_end":9631778,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631584,"byte_end":9631648,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631651,"byte_end":9631654,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631657,"byte_end":9631725,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631728,"byte_end":9631739,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631742,"byte_end":9631759,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637282,"byte_end":9637287,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9636802,"byte_end":9636858,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9636859,"byte_end":9636862,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9636863,"byte_end":9636936,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9636937,"byte_end":9637015,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637016,"byte_end":9637034,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637035,"byte_end":9637115,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637116,"byte_end":9637193,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637194,"byte_end":9637218,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637219,"byte_end":9637239,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637240,"byte_end":9637270,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637288,"byte_end":9637299,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645486,"byte_end":9645490,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645162,"byte_end":9645223,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645224,"byte_end":9645227,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645228,"byte_end":9645306,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645307,"byte_end":9645380,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645381,"byte_end":9645422,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645423,"byte_end":9645443,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645444,"byte_end":9645474,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645491,"byte_end":9645501,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645918,"byte_end":9645926,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645749,"byte_end":9645787,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645790,"byte_end":9645793,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645796,"byte_end":9645874,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645877,"byte_end":9645888,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645891,"byte_end":9645908,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646153,"byte_end":9646163,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645970,"byte_end":9646006,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646009,"byte_end":9646012,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646015,"byte_end":9646092,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646095,"byte_end":9646109,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646112,"byte_end":9646123,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646126,"byte_end":9646143,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646392,"byte_end":9646399,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646207,"byte_end":9646270,"line_start":45,"line_end":45,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646273,"byte_end":9646276,"line_start":46,"line_end":46,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646279,"byte_end":9646348,"line_start":47,"line_end":47,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646351,"byte_end":9646362,"line_start":48,"line_end":48,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646365,"byte_end":9646382,"line_start":49,"line_end":49,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646658,"byte_end":9646667,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646469,"byte_end":9646532,"line_start":54,"line_end":54,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646535,"byte_end":9646538,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646541,"byte_end":9646614,"line_start":56,"line_end":56,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646617,"byte_end":9646628,"line_start":57,"line_end":57,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646631,"byte_end":9646648,"line_start":58,"line_end":58,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652454,"byte_end":9652459,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652130,"byte_end":9652191,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652192,"byte_end":9652195,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652196,"byte_end":9652274,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652275,"byte_end":9652348,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652349,"byte_end":9652390,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652391,"byte_end":9652411,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652412,"byte_end":9652442,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652460,"byte_end":9652471,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652894,"byte_end":9652902,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652724,"byte_end":9652763,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652766,"byte_end":9652769,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652772,"byte_end":9652850,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652853,"byte_end":9652864,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652867,"byte_end":9652884,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653131,"byte_end":9653141,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652946,"byte_end":9652983,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652986,"byte_end":9652989,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652992,"byte_end":9653070,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653073,"byte_end":9653087,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653090,"byte_end":9653101,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653104,"byte_end":9653121,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653372,"byte_end":9653379,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653191,"byte_end":9653255,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653258,"byte_end":9653261,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653264,"byte_end":9653328,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653331,"byte_end":9653342,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653345,"byte_end":9653362,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653634,"byte_end":9653643,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653449,"byte_end":9653513,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653516,"byte_end":9653519,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653522,"byte_end":9653590,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653593,"byte_end":9653604,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653607,"byte_end":9653624,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659147,"byte_end":9659152,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658667,"byte_end":9658723,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658724,"byte_end":9658727,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658728,"byte_end":9658801,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658802,"byte_end":9658880,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658881,"byte_end":9658899,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658900,"byte_end":9658980,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9658981,"byte_end":9659058,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659059,"byte_end":9659083,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659084,"byte_end":9659104,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659105,"byte_end":9659135,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659153,"byte_end":9659164,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667304,"byte_end":9667312,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9666964,"byte_end":9666985,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9666986,"byte_end":9666993,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9666994,"byte_end":9667017,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667018,"byte_end":9667069,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667070,"byte_end":9667121,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667122,"byte_end":9667160,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667161,"byte_end":9667203,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667204,"byte_end":9667211,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667212,"byte_end":9667223,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667224,"byte_end":9667241,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667747,"byte_end":9667757,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667384,"byte_end":9667428,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667429,"byte_end":9667436,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667437,"byte_end":9667460,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667461,"byte_end":9667512,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667513,"byte_end":9667564,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667565,"byte_end":9667605,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667606,"byte_end":9667646,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667647,"byte_end":9667654,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667655,"byte_end":9667666,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667667,"byte_end":9667684,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668169,"byte_end":9668180,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667829,"byte_end":9667849,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667850,"byte_end":9667857,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667858,"byte_end":9667881,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667882,"byte_end":9667933,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667934,"byte_end":9667985,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9667986,"byte_end":9668027,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668028,"byte_end":9668068,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668069,"byte_end":9668076,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668077,"byte_end":9668088,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668089,"byte_end":9668106,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668598,"byte_end":9668612,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668252,"byte_end":9668275,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668276,"byte_end":9668283,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668284,"byte_end":9668307,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668308,"byte_end":9668359,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668360,"byte_end":9668411,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668412,"byte_end":9668456,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668457,"byte_end":9668497,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668498,"byte_end":9668505,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668506,"byte_end":9668517,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668518,"byte_end":9668535,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669060,"byte_end":9669076,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668687,"byte_end":9668709,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668710,"byte_end":9668713,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668714,"byte_end":9668730,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668731,"byte_end":9668738,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668739,"byte_end":9668762,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668763,"byte_end":9668814,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668815,"byte_end":9668866,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668867,"byte_end":9668912,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668913,"byte_end":9668959,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668960,"byte_end":9668967,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668968,"byte_end":9668979,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9668980,"byte_end":9668997,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669555,"byte_end":9669573,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669150,"byte_end":9669195,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669196,"byte_end":9669199,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669200,"byte_end":9669216,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669217,"byte_end":9669224,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669225,"byte_end":9669248,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669249,"byte_end":9669300,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669301,"byte_end":9669352,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669353,"byte_end":9669400,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669401,"byte_end":9669454,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669455,"byte_end":9669462,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669463,"byte_end":9669474,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669475,"byte_end":9669492,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670027,"byte_end":9670043,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669647,"byte_end":9669669,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669670,"byte_end":9669673,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669674,"byte_end":9669690,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669691,"byte_end":9669698,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669699,"byte_end":9669722,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669723,"byte_end":9669774,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669775,"byte_end":9669826,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669827,"byte_end":9669872,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669873,"byte_end":9669926,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669927,"byte_end":9669934,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669935,"byte_end":9669946,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9669947,"byte_end":9669964,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670550,"byte_end":9670568,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670117,"byte_end":9670162,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670163,"byte_end":9670166,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670167,"byte_end":9670183,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670184,"byte_end":9670191,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670192,"byte_end":9670215,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670216,"byte_end":9670267,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670268,"byte_end":9670319,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670320,"byte_end":9670367,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670368,"byte_end":9670449,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670450,"byte_end":9670457,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670458,"byte_end":9670469,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670470,"byte_end":9670487,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671014,"byte_end":9671030,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670642,"byte_end":9670663,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670664,"byte_end":9670667,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670668,"byte_end":9670684,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670685,"byte_end":9670692,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670693,"byte_end":9670716,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670717,"byte_end":9670768,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670769,"byte_end":9670820,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670821,"byte_end":9670866,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670867,"byte_end":9670913,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670914,"byte_end":9670921,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670922,"byte_end":9670933,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9670934,"byte_end":9670951,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671536,"byte_end":9671554,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671104,"byte_end":9671148,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671149,"byte_end":9671152,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671153,"byte_end":9671169,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671170,"byte_end":9671177,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671178,"byte_end":9671201,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671202,"byte_end":9671253,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671254,"byte_end":9671305,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671306,"byte_end":9671353,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671354,"byte_end":9671435,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671436,"byte_end":9671443,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671444,"byte_end":9671455,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671456,"byte_end":9671473,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672001,"byte_end":9672017,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671628,"byte_end":9671650,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671651,"byte_end":9671654,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671655,"byte_end":9671671,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671672,"byte_end":9671679,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671680,"byte_end":9671703,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671704,"byte_end":9671755,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671756,"byte_end":9671807,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671808,"byte_end":9671853,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671854,"byte_end":9671900,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671901,"byte_end":9671908,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671909,"byte_end":9671920,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9671921,"byte_end":9671938,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672524,"byte_end":9672542,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672091,"byte_end":9672136,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672137,"byte_end":9672140,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672141,"byte_end":9672157,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672158,"byte_end":9672165,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672166,"byte_end":9672189,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672190,"byte_end":9672241,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672242,"byte_end":9672293,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672294,"byte_end":9672341,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672342,"byte_end":9672423,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672424,"byte_end":9672431,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672432,"byte_end":9672443,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672444,"byte_end":9672461,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672981,"byte_end":9672997,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672616,"byte_end":9672637,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672638,"byte_end":9672641,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672642,"byte_end":9672658,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672659,"byte_end":9672666,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672667,"byte_end":9672690,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672691,"byte_end":9672742,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672743,"byte_end":9672794,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672795,"byte_end":9672840,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672841,"byte_end":9672880,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672881,"byte_end":9672888,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672889,"byte_end":9672900,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9672901,"byte_end":9672918,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673503,"byte_end":9673521,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673071,"byte_end":9673115,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673116,"byte_end":9673119,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673120,"byte_end":9673136,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673137,"byte_end":9673144,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673145,"byte_end":9673168,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673169,"byte_end":9673220,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673221,"byte_end":9673272,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673273,"byte_end":9673320,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673321,"byte_end":9673402,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673403,"byte_end":9673410,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673411,"byte_end":9673422,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673423,"byte_end":9673440,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673969,"byte_end":9673986,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673595,"byte_end":9673617,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673618,"byte_end":9673621,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673622,"byte_end":9673638,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673639,"byte_end":9673646,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673647,"byte_end":9673670,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673671,"byte_end":9673722,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673723,"byte_end":9673774,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673775,"byte_end":9673821,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673822,"byte_end":9673868,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673869,"byte_end":9673876,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673877,"byte_end":9673888,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9673889,"byte_end":9673906,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674460,"byte_end":9674479,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674061,"byte_end":9674106,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674107,"byte_end":9674110,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674111,"byte_end":9674127,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674128,"byte_end":9674135,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674136,"byte_end":9674159,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674160,"byte_end":9674211,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674212,"byte_end":9674263,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674264,"byte_end":9674312,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674313,"byte_end":9674359,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674360,"byte_end":9674367,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674368,"byte_end":9674379,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674380,"byte_end":9674397,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674924,"byte_end":9674941,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674554,"byte_end":9674579,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674580,"byte_end":9674583,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674584,"byte_end":9674600,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674601,"byte_end":9674608,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674609,"byte_end":9674632,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674633,"byte_end":9674684,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674685,"byte_end":9674736,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674737,"byte_end":9674783,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674784,"byte_end":9674823,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674824,"byte_end":9674831,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674832,"byte_end":9674843,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9674844,"byte_end":9674861,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675446,"byte_end":9675465,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675016,"byte_end":9675064,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675065,"byte_end":9675068,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675069,"byte_end":9675085,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675086,"byte_end":9675093,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675094,"byte_end":9675117,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675118,"byte_end":9675169,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675170,"byte_end":9675221,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675222,"byte_end":9675270,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675271,"byte_end":9675345,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675346,"byte_end":9675353,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675354,"byte_end":9675365,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675366,"byte_end":9675383,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675916,"byte_end":9675933,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675540,"byte_end":9675564,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675565,"byte_end":9675568,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675569,"byte_end":9675585,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675586,"byte_end":9675593,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675594,"byte_end":9675617,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675618,"byte_end":9675669,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675670,"byte_end":9675721,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675722,"byte_end":9675768,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675769,"byte_end":9675815,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675816,"byte_end":9675823,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675824,"byte_end":9675835,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9675836,"byte_end":9675853,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676437,"byte_end":9676456,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676008,"byte_end":9676055,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676056,"byte_end":9676059,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676060,"byte_end":9676076,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676077,"byte_end":9676084,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676085,"byte_end":9676108,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676109,"byte_end":9676160,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676161,"byte_end":9676212,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676213,"byte_end":9676261,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676262,"byte_end":9676336,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676337,"byte_end":9676344,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676345,"byte_end":9676356,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676357,"byte_end":9676374,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676908,"byte_end":9676925,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676531,"byte_end":9676556,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676557,"byte_end":9676560,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676561,"byte_end":9676577,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676578,"byte_end":9676585,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676586,"byte_end":9676609,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676610,"byte_end":9676661,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676662,"byte_end":9676713,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676714,"byte_end":9676760,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676761,"byte_end":9676807,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676808,"byte_end":9676815,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676816,"byte_end":9676827,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9676828,"byte_end":9676845,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677430,"byte_end":9677449,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677000,"byte_end":9677048,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677049,"byte_end":9677052,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677053,"byte_end":9677069,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677070,"byte_end":9677077,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677078,"byte_end":9677101,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677102,"byte_end":9677153,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677154,"byte_end":9677205,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677206,"byte_end":9677254,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677255,"byte_end":9677329,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677330,"byte_end":9677337,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677338,"byte_end":9677349,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677350,"byte_end":9677367,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677907,"byte_end":9677924,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677524,"byte_end":9677548,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677549,"byte_end":9677552,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677553,"byte_end":9677569,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677570,"byte_end":9677577,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677578,"byte_end":9677601,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677602,"byte_end":9677653,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677654,"byte_end":9677705,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677706,"byte_end":9677752,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677753,"byte_end":9677806,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677807,"byte_end":9677814,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677815,"byte_end":9677826,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677827,"byte_end":9677844,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678428,"byte_end":9678447,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9677999,"byte_end":9678046,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678047,"byte_end":9678050,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678051,"byte_end":9678067,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678068,"byte_end":9678075,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678076,"byte_end":9678099,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678100,"byte_end":9678151,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678152,"byte_end":9678203,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678204,"byte_end":9678252,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678253,"byte_end":9678327,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678328,"byte_end":9678335,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678336,"byte_end":9678347,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678348,"byte_end":9678365,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678936,"byte_end":9678957,"line_start":418,"line_end":418,"column_start":8,"column_end":29},"name":"cmp_ordered_mask_m128","qualname":"::x86_x64::sse::cmp_ordered_mask_m128","value":"pub fn cmp_ordered_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678522,"byte_end":9678567,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678568,"byte_end":9678571,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678572,"byte_end":9678588,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678589,"byte_end":9678596,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678597,"byte_end":9678620,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678621,"byte_end":9678682,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678683,"byte_end":9678744,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordered_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678745,"byte_end":9678795,"line_start":412,"line_end":412,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678796,"byte_end":9678835,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678836,"byte_end":9678843,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678844,"byte_end":9678855,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9678856,"byte_end":9678873,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679508,"byte_end":9679531,"line_start":435,"line_end":435,"column_start":8,"column_end":31},"name":"cmp_ordered_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordered_mask_m128_s","value":"pub fn cmp_ordered_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679032,"byte_end":9679100,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679101,"byte_end":9679104,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679105,"byte_end":9679121,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679122,"byte_end":9679129,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679130,"byte_end":9679153,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679154,"byte_end":9679205,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679206,"byte_end":9679272,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordered_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679273,"byte_end":9679325,"line_start":429,"line_end":429,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679326,"byte_end":9679407,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679408,"byte_end":9679415,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679416,"byte_end":9679427,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679428,"byte_end":9679445,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680026,"byte_end":9680045,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679606,"byte_end":9679645,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679646,"byte_end":9679649,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679650,"byte_end":9679666,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679667,"byte_end":9679674,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679675,"byte_end":9679698,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679699,"byte_end":9679760,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679761,"byte_end":9679822,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679823,"byte_end":9679871,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679872,"byte_end":9679925,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679926,"byte_end":9679933,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679934,"byte_end":9679945,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9679946,"byte_end":9679963,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680583,"byte_end":9680604,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680122,"byte_end":9680184,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680185,"byte_end":9680188,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680189,"byte_end":9680205,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680206,"byte_end":9680213,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680214,"byte_end":9680237,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680238,"byte_end":9680289,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680290,"byte_end":9680356,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680357,"byte_end":9680407,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680408,"byte_end":9680482,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680483,"byte_end":9680490,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680491,"byte_end":9680502,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680503,"byte_end":9680520,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681010,"byte_end":9681027,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680681,"byte_end":9680703,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680704,"byte_end":9680707,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680708,"byte_end":9680725,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680726,"byte_end":9680733,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680734,"byte_end":9680757,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680758,"byte_end":9680809,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680810,"byte_end":9680861,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680862,"byte_end":9680909,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680910,"byte_end":9680917,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680918,"byte_end":9680929,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9680930,"byte_end":9680947,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681440,"byte_end":9681457,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681095,"byte_end":9681133,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681134,"byte_end":9681137,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681138,"byte_end":9681155,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681156,"byte_end":9681163,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681164,"byte_end":9681187,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681188,"byte_end":9681239,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681240,"byte_end":9681291,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681292,"byte_end":9681339,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681340,"byte_end":9681347,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681348,"byte_end":9681359,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681360,"byte_end":9681377,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681858,"byte_end":9681875,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681525,"byte_end":9681551,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681552,"byte_end":9681555,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681556,"byte_end":9681573,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681574,"byte_end":9681581,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681582,"byte_end":9681605,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681606,"byte_end":9681657,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681658,"byte_end":9681709,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681710,"byte_end":9681757,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681758,"byte_end":9681765,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681766,"byte_end":9681777,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681778,"byte_end":9681795,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682285,"byte_end":9682302,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681943,"byte_end":9681978,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681979,"byte_end":9681982,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9681983,"byte_end":9682000,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682001,"byte_end":9682008,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682009,"byte_end":9682032,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682033,"byte_end":9682084,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682085,"byte_end":9682136,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682137,"byte_end":9682184,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682185,"byte_end":9682192,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682193,"byte_end":9682204,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682205,"byte_end":9682222,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682700,"byte_end":9682717,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682370,"byte_end":9682393,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682394,"byte_end":9682397,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682398,"byte_end":9682415,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682416,"byte_end":9682423,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682424,"byte_end":9682447,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682448,"byte_end":9682499,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682500,"byte_end":9682551,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682552,"byte_end":9682599,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682600,"byte_end":9682607,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682608,"byte_end":9682619,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682620,"byte_end":9682637,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683119,"byte_end":9683137,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682785,"byte_end":9682811,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682812,"byte_end":9682815,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682816,"byte_end":9682833,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682834,"byte_end":9682841,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682842,"byte_end":9682865,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682866,"byte_end":9682917,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682918,"byte_end":9682969,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9682970,"byte_end":9683018,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683019,"byte_end":9683026,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683027,"byte_end":9683038,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683039,"byte_end":9683056,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683638,"byte_end":9683664,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683206,"byte_end":9683271,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683272,"byte_end":9683279,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683280,"byte_end":9683303,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683304,"byte_end":9683355,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683356,"byte_end":9683416,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683417,"byte_end":9683457,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683458,"byte_end":9683465,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683466,"byte_end":9683505,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683506,"byte_end":9683545,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683546,"byte_end":9683557,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9683558,"byte_end":9683575,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684575,"byte_end":9684594,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684292,"byte_end":9684343,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684344,"byte_end":9684351,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684352,"byte_end":9684375,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684376,"byte_end":9684427,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684428,"byte_end":9684474,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684475,"byte_end":9684482,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684483,"byte_end":9684494,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684495,"byte_end":9684512,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684951,"byte_end":9684970,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684648,"byte_end":9684719,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684720,"byte_end":9684727,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684728,"byte_end":9684751,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684752,"byte_end":9684803,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684804,"byte_end":9684850,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684851,"byte_end":9684858,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684859,"byte_end":9684870,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9684871,"byte_end":9684888,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685770,"byte_end":9685778,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685427,"byte_end":9685448,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685449,"byte_end":9685456,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685457,"byte_end":9685480,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685481,"byte_end":9685536,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685537,"byte_end":9685589,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685590,"byte_end":9685628,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685629,"byte_end":9685669,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685670,"byte_end":9685677,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685678,"byte_end":9685689,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685690,"byte_end":9685707,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686221,"byte_end":9686231,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685850,"byte_end":9685894,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685895,"byte_end":9685902,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685903,"byte_end":9685926,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685927,"byte_end":9685982,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9685983,"byte_end":9686035,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686036,"byte_end":9686076,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686077,"byte_end":9686120,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686121,"byte_end":9686128,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686129,"byte_end":9686140,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686141,"byte_end":9686158,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686601,"byte_end":9686610,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686303,"byte_end":9686343,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686344,"byte_end":9686351,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686352,"byte_end":9686375,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686376,"byte_end":9686431,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686432,"byte_end":9686458,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686459,"byte_end":9686500,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686501,"byte_end":9686508,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686509,"byte_end":9686520,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686521,"byte_end":9686538,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687067,"byte_end":9687086,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686697,"byte_end":9686756,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686757,"byte_end":9686764,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686765,"byte_end":9686788,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686789,"byte_end":9686805,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686806,"byte_end":9686842,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686843,"byte_end":9686921,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686922,"byte_end":9686929,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686930,"byte_end":9686941,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686942,"byte_end":9686959,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9686960,"byte_end":9687004,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687575,"byte_end":9687590,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687204,"byte_end":9687268,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687269,"byte_end":9687276,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687277,"byte_end":9687300,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687301,"byte_end":9687317,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687318,"byte_end":9687350,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687351,"byte_end":9687429,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687430,"byte_end":9687437,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687438,"byte_end":9687449,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687450,"byte_end":9687467,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687468,"byte_end":9687512,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688014,"byte_end":9688031,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687647,"byte_end":9687707,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687708,"byte_end":9687715,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687716,"byte_end":9687739,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687740,"byte_end":9687795,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687796,"byte_end":9687830,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687831,"byte_end":9687913,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687914,"byte_end":9687921,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687922,"byte_end":9687933,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9687934,"byte_end":9687951,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688604,"byte_end":9688623,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688119,"byte_end":9688159,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688160,"byte_end":9688163,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688164,"byte_end":9688242,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688243,"byte_end":9688323,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688324,"byte_end":9688336,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688337,"byte_end":9688344,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688345,"byte_end":9688368,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688369,"byte_end":9688406,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688407,"byte_end":9688443,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688444,"byte_end":9688503,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688504,"byte_end":9688511,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688512,"byte_end":9688523,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688524,"byte_end":9688541,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689063,"byte_end":9689071,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688719,"byte_end":9688744,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688745,"byte_end":9688752,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688753,"byte_end":9688776,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688777,"byte_end":9688829,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688830,"byte_end":9688881,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688882,"byte_end":9688920,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688921,"byte_end":9688962,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688963,"byte_end":9688970,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688971,"byte_end":9688982,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9688983,"byte_end":9689000,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689512,"byte_end":9689522,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689143,"byte_end":9689191,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689192,"byte_end":9689199,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689200,"byte_end":9689223,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689224,"byte_end":9689276,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689277,"byte_end":9689328,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689329,"byte_end":9689369,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689370,"byte_end":9689411,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689412,"byte_end":9689419,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689420,"byte_end":9689431,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689432,"byte_end":9689449,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689937,"byte_end":9689945,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689594,"byte_end":9689619,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689620,"byte_end":9689627,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689628,"byte_end":9689651,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689652,"byte_end":9689704,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689705,"byte_end":9689756,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689757,"byte_end":9689795,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689796,"byte_end":9689836,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689837,"byte_end":9689844,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689845,"byte_end":9689856,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9689857,"byte_end":9689874,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690386,"byte_end":9690396,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690017,"byte_end":9690065,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690066,"byte_end":9690073,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690074,"byte_end":9690097,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690098,"byte_end":9690150,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690151,"byte_end":9690202,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690203,"byte_end":9690243,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690244,"byte_end":9690285,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690286,"byte_end":9690293,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690294,"byte_end":9690305,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690306,"byte_end":9690323,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690849,"byte_end":9690860,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690468,"byte_end":9690527,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690528,"byte_end":9690535,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690536,"byte_end":9690559,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690560,"byte_end":9690612,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690613,"byte_end":9690664,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690665,"byte_end":9690706,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690707,"byte_end":9690748,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690749,"byte_end":9690756,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690757,"byte_end":9690768,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690769,"byte_end":9690786,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691339,"byte_end":9691357,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9690933,"byte_end":9691011,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691012,"byte_end":9691019,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691020,"byte_end":9691043,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691044,"byte_end":9691096,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691097,"byte_end":9691148,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691149,"byte_end":9691197,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691198,"byte_end":9691238,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691239,"byte_end":9691246,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691247,"byte_end":9691258,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691259,"byte_end":9691276,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691839,"byte_end":9691857,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691432,"byte_end":9691510,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691511,"byte_end":9691518,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691519,"byte_end":9691542,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691543,"byte_end":9691595,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691596,"byte_end":9691647,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691648,"byte_end":9691696,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691697,"byte_end":9691738,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691739,"byte_end":9691746,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691747,"byte_end":9691758,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691759,"byte_end":9691776,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692285,"byte_end":9692299,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691932,"byte_end":9691970,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691971,"byte_end":9691974,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9691975,"byte_end":9692038,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692039,"byte_end":9692046,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692047,"byte_end":9692070,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692071,"byte_end":9692126,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692127,"byte_end":9692157,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692158,"byte_end":9692184,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692185,"byte_end":9692192,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692193,"byte_end":9692204,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692205,"byte_end":9692222,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692696,"byte_end":9692704,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692355,"byte_end":9692376,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692377,"byte_end":9692384,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692385,"byte_end":9692408,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692409,"byte_end":9692460,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692461,"byte_end":9692512,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692513,"byte_end":9692551,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692552,"byte_end":9692595,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692596,"byte_end":9692603,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692604,"byte_end":9692615,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692616,"byte_end":9692633,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693139,"byte_end":9693149,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692776,"byte_end":9692820,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692821,"byte_end":9692828,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692829,"byte_end":9692852,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692853,"byte_end":9692904,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692905,"byte_end":9692956,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692957,"byte_end":9692997,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9692998,"byte_end":9693038,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693039,"byte_end":9693046,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693047,"byte_end":9693058,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693059,"byte_end":9693076,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693560,"byte_end":9693570,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693221,"byte_end":9693241,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693242,"byte_end":9693249,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693250,"byte_end":9693273,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693274,"byte_end":9693325,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693326,"byte_end":9693377,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693378,"byte_end":9693418,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693419,"byte_end":9693459,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693460,"byte_end":9693467,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693468,"byte_end":9693479,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693480,"byte_end":9693497,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694027,"byte_end":9694042,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693641,"byte_end":9693678,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693679,"byte_end":9693686,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693687,"byte_end":9693710,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693711,"byte_end":9693762,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693763,"byte_end":9693805,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693806,"byte_end":9693849,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693850,"byte_end":9693869,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693870,"byte_end":9693920,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693921,"byte_end":9693926,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693927,"byte_end":9693934,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693935,"byte_end":9693946,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9693947,"byte_end":9693964,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694508,"byte_end":9694525,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694100,"byte_end":9694160,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694161,"byte_end":9694168,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694169,"byte_end":9694192,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694193,"byte_end":9694244,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694245,"byte_end":9694289,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694290,"byte_end":9694330,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694331,"byte_end":9694350,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694351,"byte_end":9694401,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694402,"byte_end":9694407,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694408,"byte_end":9694415,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694416,"byte_end":9694427,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694428,"byte_end":9694445,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694984,"byte_end":9695004,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694583,"byte_end":9694626,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694627,"byte_end":9694634,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694635,"byte_end":9694658,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694659,"byte_end":9694712,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694713,"byte_end":9694760,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694761,"byte_end":9694806,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694807,"byte_end":9694826,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694827,"byte_end":9694877,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694878,"byte_end":9694883,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694884,"byte_end":9694891,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694892,"byte_end":9694903,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9694904,"byte_end":9694921,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695487,"byte_end":9695509,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695064,"byte_end":9695130,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695131,"byte_end":9695138,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695139,"byte_end":9695162,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695163,"byte_end":9695216,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695217,"byte_end":9695266,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695267,"byte_end":9695309,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695310,"byte_end":9695329,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695330,"byte_end":9695380,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695381,"byte_end":9695386,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695387,"byte_end":9695394,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695395,"byte_end":9695406,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695407,"byte_end":9695424,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695901,"byte_end":9695909,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695569,"byte_end":9695630,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695631,"byte_end":9695638,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695639,"byte_end":9695662,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695663,"byte_end":9695715,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695716,"byte_end":9695778,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695779,"byte_end":9695800,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695801,"byte_end":9695808,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695809,"byte_end":9695820,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9695821,"byte_end":9695838,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696338,"byte_end":9696348,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696019,"byte_end":9696080,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696081,"byte_end":9696088,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696089,"byte_end":9696112,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696113,"byte_end":9696152,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696153,"byte_end":9696215,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696216,"byte_end":9696237,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696238,"byte_end":9696245,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696246,"byte_end":9696257,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696258,"byte_end":9696275,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696703,"byte_end":9696717,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696407,"byte_end":9696441,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696442,"byte_end":9696449,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696450,"byte_end":9696473,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696474,"byte_end":9696517,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696518,"byte_end":9696580,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696581,"byte_end":9696602,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696603,"byte_end":9696610,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696611,"byte_end":9696622,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696623,"byte_end":9696640,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697117,"byte_end":9697134,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696777,"byte_end":9696837,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696838,"byte_end":9696845,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696846,"byte_end":9696869,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696870,"byte_end":9696931,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696932,"byte_end":9696994,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9696995,"byte_end":9697016,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697017,"byte_end":9697024,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697025,"byte_end":9697036,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697037,"byte_end":9697054,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697476,"byte_end":9697487,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697245,"byte_end":9697264,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697265,"byte_end":9697272,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697273,"byte_end":9697296,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697297,"byte_end":9697334,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697335,"byte_end":9697375,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697376,"byte_end":9697383,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697384,"byte_end":9697395,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697396,"byte_end":9697413,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698781,"byte_end":9698805,"line_start":1081,"line_end":1081,"column_start":8,"column_end":32},"name":"shuffle_abi_f32_all_m128","qualname":"::x86_x64::sse::shuffle_abi_f32_all_m128","value":"pub fn shuffle_abi_f32_all_m128<const MASK: i32>(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f32` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f32` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697539,"byte_end":9697613,"line_start":1052,"line_end":1052,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697614,"byte_end":9697632,"line_start":1053,"line_end":1053,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697633,"byte_end":9697636,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697637,"byte_end":9697716,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697717,"byte_end":9697794,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697795,"byte_end":9697875,"line_start":1057,"line_end":1057,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697876,"byte_end":9697879,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697880,"byte_end":9697957,"line_start":1059,"line_end":1059,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9697958,"byte_end":9698035,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f32_all_m128`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698036,"byte_end":9698112,"line_start":1061,"line_end":1061,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698113,"byte_end":9698120,"line_start":1062,"line_end":1062,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698121,"byte_end":9698144,"line_start":1063,"line_end":1063,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698145,"byte_end":9698196,"line_start":1064,"line_end":1064,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698197,"byte_end":9698248,"line_start":1065,"line_end":1065,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698249,"byte_end":9698255,"line_start":1066,"line_end":1066,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0>(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698256,"byte_end":9698315,"line_start":1067,"line_end":1067,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1.0, 1.0, 5.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698316,"byte_end":9698356,"line_start":1068,"line_end":1068,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698357,"byte_end":9698363,"line_start":1069,"line_end":1069,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b11_10_01_00>(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698364,"byte_end":9698435,"line_start":1070,"line_end":1070,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [1.0, 2.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698436,"byte_end":9698476,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698477,"byte_end":9698483,"line_start":1072,"line_end":1072,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b00_10_10_01>(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698484,"byte_end":9698555,"line_start":1073,"line_end":1073,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [2.0, 3.0, 7.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698556,"byte_end":9698596,"line_start":1074,"line_end":1074,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698597,"byte_end":9698604,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_ps`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698605,"byte_end":9698644,"line_start":1076,"line_end":1076,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `shufps xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698645,"byte_end":9698688,"line_start":1077,"line_end":1077,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698689,"byte_end":9698700,"line_start":1078,"line_end":1078,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698701,"byte_end":9698718,"line_start":1079,"line_end":1079,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699192,"byte_end":9699201,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698904,"byte_end":9698927,"line_start":1085,"line_end":1085,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698928,"byte_end":9698935,"line_start":1086,"line_end":1086,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698936,"byte_end":9698959,"line_start":1087,"line_end":1087,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9698960,"byte_end":9699013,"line_start":1088,"line_end":1088,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699014,"byte_end":9699050,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699051,"byte_end":9699091,"line_start":1090,"line_end":1090,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699092,"byte_end":9699099,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699100,"byte_end":9699111,"line_start":1092,"line_end":1092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699112,"byte_end":9699129,"line_start":1093,"line_end":1093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699571,"byte_end":9699582,"line_start":1109,"line_end":1109,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699260,"byte_end":9699306,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699307,"byte_end":9699314,"line_start":1100,"line_end":1100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699315,"byte_end":9699338,"line_start":1101,"line_end":1101,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699339,"byte_end":9699390,"line_start":1102,"line_end":1102,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699391,"byte_end":9699429,"line_start":1103,"line_end":1103,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699430,"byte_end":9699470,"line_start":1104,"line_end":1104,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699471,"byte_end":9699478,"line_start":1105,"line_end":1105,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699479,"byte_end":9699490,"line_start":1106,"line_end":1106,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699491,"byte_end":9699508,"line_start":1107,"line_end":1107,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699991,"byte_end":9700001,"line_start":1124,"line_end":1124,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699641,"byte_end":9699685,"line_start":1113,"line_end":1113,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699686,"byte_end":9699693,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699694,"byte_end":9699717,"line_start":1115,"line_end":1115,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699718,"byte_end":9699773,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699774,"byte_end":9699804,"line_start":1117,"line_end":1117,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699805,"byte_end":9699831,"line_start":1118,"line_end":1118,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699832,"byte_end":9699857,"line_start":1119,"line_end":1119,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699858,"byte_end":9699902,"line_start":1120,"line_end":1120,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699903,"byte_end":9699910,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9699911,"byte_end":9699928,"line_start":1122,"line_end":1122,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700394,"byte_end":9700406,"line_start":1138,"line_end":1138,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700089,"byte_end":9700142,"line_start":1128,"line_end":1128,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700143,"byte_end":9700150,"line_start":1129,"line_end":1129,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700151,"byte_end":9700174,"line_start":1130,"line_end":1130,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700175,"byte_end":9700230,"line_start":1131,"line_end":1131,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700231,"byte_end":9700251,"line_start":1132,"line_end":1132,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700252,"byte_end":9700280,"line_start":1133,"line_end":1133,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700281,"byte_end":9700305,"line_start":1134,"line_end":1134,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700306,"byte_end":9700313,"line_start":1135,"line_end":1135,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700314,"byte_end":9700331,"line_start":1136,"line_end":1136,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700858,"byte_end":9700874,"line_start":1153,"line_end":1153,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700480,"byte_end":9700546,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700547,"byte_end":9700554,"line_start":1143,"line_end":1143,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700555,"byte_end":9700578,"line_start":1144,"line_end":1144,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700579,"byte_end":9700634,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700635,"byte_end":9700665,"line_start":1146,"line_end":1146,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700666,"byte_end":9700698,"line_start":1147,"line_end":1147,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700699,"byte_end":9700724,"line_start":1148,"line_end":1148,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700725,"byte_end":9700769,"line_start":1149,"line_end":1149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700770,"byte_end":9700777,"line_start":1150,"line_end":1150,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700778,"byte_end":9700795,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701338,"byte_end":9701356,"line_start":1168,"line_end":1168,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9700963,"byte_end":9701024,"line_start":1157,"line_end":1157,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701025,"byte_end":9701032,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701033,"byte_end":9701056,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701057,"byte_end":9701112,"line_start":1160,"line_end":1160,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701113,"byte_end":9701143,"line_start":1161,"line_end":1161,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701144,"byte_end":9701178,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701179,"byte_end":9701204,"line_start":1163,"line_end":1163,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701205,"byte_end":9701249,"line_start":1164,"line_end":1164,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701250,"byte_end":9701257,"line_start":1165,"line_end":1165,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701258,"byte_end":9701275,"line_start":1166,"line_end":1166,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701951,"byte_end":9701971,"line_start":1186,"line_end":1186,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701445,"byte_end":9701489,"line_start":1172,"line_end":1172,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701490,"byte_end":9701493,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701494,"byte_end":9701572,"line_start":1174,"line_end":1174,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701573,"byte_end":9701653,"line_start":1175,"line_end":1175,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701654,"byte_end":9701666,"line_start":1176,"line_end":1176,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701667,"byte_end":9701674,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701675,"byte_end":9701698,"line_start":1178,"line_end":1178,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701699,"byte_end":9701754,"line_start":1179,"line_end":1179,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701755,"byte_end":9701780,"line_start":1180,"line_end":1180,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701781,"byte_end":9701817,"line_start":1181,"line_end":1181,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701818,"byte_end":9701862,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701863,"byte_end":9701870,"line_start":1183,"line_end":1183,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9701871,"byte_end":9701888,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702394,"byte_end":9702402,"line_start":1201,"line_end":1201,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702052,"byte_end":9702073,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702074,"byte_end":9702081,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702082,"byte_end":9702105,"line_start":1192,"line_end":1192,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702106,"byte_end":9702157,"line_start":1193,"line_end":1193,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702158,"byte_end":9702210,"line_start":1194,"line_end":1194,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702211,"byte_end":9702249,"line_start":1195,"line_end":1195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702250,"byte_end":9702293,"line_start":1196,"line_end":1196,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702294,"byte_end":9702301,"line_start":1197,"line_end":1197,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702302,"byte_end":9702313,"line_start":1198,"line_end":1198,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702314,"byte_end":9702331,"line_start":1199,"line_end":1199,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702839,"byte_end":9702849,"line_start":1216,"line_end":1216,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702474,"byte_end":9702518,"line_start":1205,"line_end":1205,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702519,"byte_end":9702526,"line_start":1206,"line_end":1206,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702527,"byte_end":9702550,"line_start":1207,"line_end":1207,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702551,"byte_end":9702602,"line_start":1208,"line_end":1208,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702603,"byte_end":9702655,"line_start":1209,"line_end":1209,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702656,"byte_end":9702696,"line_start":1210,"line_end":1210,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702697,"byte_end":9702738,"line_start":1211,"line_end":1211,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702739,"byte_end":9702746,"line_start":1212,"line_end":1212,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702747,"byte_end":9702758,"line_start":1213,"line_end":1213,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702759,"byte_end":9702776,"line_start":1214,"line_end":1214,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703600,"byte_end":9703619,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702921,"byte_end":9702976,"line_start":1220,"line_end":1220,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702977,"byte_end":9702984,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9702985,"byte_end":9703008,"line_start":1222,"line_end":1222,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703009,"byte_end":9703064,"line_start":1223,"line_end":1223,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703065,"byte_end":9703120,"line_start":1224,"line_end":1224,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703121,"byte_end":9703179,"line_start":1225,"line_end":1225,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703180,"byte_end":9703239,"line_start":1226,"line_end":1226,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703240,"byte_end":9703296,"line_start":1227,"line_end":1227,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703297,"byte_end":9703349,"line_start":1228,"line_end":1228,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703350,"byte_end":9703403,"line_start":1229,"line_end":1229,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703404,"byte_end":9703457,"line_start":1230,"line_end":1230,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703458,"byte_end":9703511,"line_start":1231,"line_end":1231,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703512,"byte_end":9703519,"line_start":1232,"line_end":1232,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703520,"byte_end":9703537,"line_start":1233,"line_end":1233,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704129,"byte_end":9704145,"line_start":1250,"line_end":1250,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703752,"byte_end":9703804,"line_start":1239,"line_end":1239,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703805,"byte_end":9703812,"line_start":1240,"line_end":1240,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703813,"byte_end":9703836,"line_start":1241,"line_end":1241,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703837,"byte_end":9703888,"line_start":1242,"line_end":1242,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703889,"byte_end":9703940,"line_start":1243,"line_end":1243,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703941,"byte_end":9703987,"line_start":1244,"line_end":1244,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9703988,"byte_end":9704028,"line_start":1245,"line_end":1245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704029,"byte_end":9704036,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704037,"byte_end":9704048,"line_start":1247,"line_end":1247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704049,"byte_end":9704066,"line_start":1248,"line_end":1248,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704597,"byte_end":9704612,"line_start":1265,"line_end":1265,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704222,"byte_end":9704273,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704274,"byte_end":9704281,"line_start":1255,"line_end":1255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704282,"byte_end":9704305,"line_start":1256,"line_end":1256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704306,"byte_end":9704357,"line_start":1257,"line_end":1257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704358,"byte_end":9704409,"line_start":1258,"line_end":1258,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704410,"byte_end":9704455,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704456,"byte_end":9704496,"line_start":1260,"line_end":1260,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704497,"byte_end":9704504,"line_start":1261,"line_end":1261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704505,"byte_end":9704516,"line_start":1262,"line_end":1262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704517,"byte_end":9704534,"line_start":1263,"line_end":1263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705029,"byte_end":9705040,"line_start":1280,"line_end":1280,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704689,"byte_end":9704709,"line_start":1269,"line_end":1269,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704710,"byte_end":9704717,"line_start":1270,"line_end":1270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704718,"byte_end":9704741,"line_start":1271,"line_end":1271,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704742,"byte_end":9704793,"line_start":1272,"line_end":1272,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704794,"byte_end":9704845,"line_start":1273,"line_end":1273,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704846,"byte_end":9704887,"line_start":1274,"line_end":1274,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704888,"byte_end":9704928,"line_start":1275,"line_end":1275,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704929,"byte_end":9704936,"line_start":1276,"line_end":1276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704937,"byte_end":9704948,"line_start":1277,"line_end":1277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9704949,"byte_end":9704966,"line_start":1278,"line_end":1278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710290,"byte_end":9710302,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9709805,"byte_end":9709845,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9709846,"byte_end":9709853,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9709854,"byte_end":9709877,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9709878,"byte_end":9709961,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9709962,"byte_end":9710053,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710054,"byte_end":9710102,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710103,"byte_end":9710188,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710189,"byte_end":9710196,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710197,"byte_end":9710208,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710209,"byte_end":9710226,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710780,"byte_end":9710793,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710380,"byte_end":9710421,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710422,"byte_end":9710429,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710430,"byte_end":9710453,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710454,"byte_end":9710512,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710513,"byte_end":9710574,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710575,"byte_end":9710624,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710625,"byte_end":9710678,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710679,"byte_end":9710686,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710687,"byte_end":9710698,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710699,"byte_end":9710716,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711210,"byte_end":9711223,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710872,"byte_end":9710913,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710914,"byte_end":9710921,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710922,"byte_end":9710945,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710946,"byte_end":9710984,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9710985,"byte_end":9711023,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711024,"byte_end":9711073,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711074,"byte_end":9711108,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711109,"byte_end":9711116,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711117,"byte_end":9711128,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711129,"byte_end":9711146,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711639,"byte_end":9711652,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711302,"byte_end":9711343,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711344,"byte_end":9711351,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711352,"byte_end":9711375,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711376,"byte_end":9711414,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711415,"byte_end":9711455,"line_start":54,"line_end":54,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711456,"byte_end":9711505,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711506,"byte_end":9711537,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711538,"byte_end":9711545,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711546,"byte_end":9711557,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711558,"byte_end":9711575,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712051,"byte_end":9712060,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711731,"byte_end":9711752,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711753,"byte_end":9711760,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711761,"byte_end":9711784,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711785,"byte_end":9711829,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711830,"byte_end":9711875,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711876,"byte_end":9711915,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711916,"byte_end":9711949,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711950,"byte_end":9711957,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711958,"byte_end":9711969,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9711970,"byte_end":9711987,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712484,"byte_end":9712495,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712136,"byte_end":9712181,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712182,"byte_end":9712189,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712190,"byte_end":9712213,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712214,"byte_end":9712258,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712259,"byte_end":9712306,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712307,"byte_end":9712348,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712349,"byte_end":9712382,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712383,"byte_end":9712390,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712391,"byte_end":9712402,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712403,"byte_end":9712420,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713218,"byte_end":9713241,"line_start":119,"line_end":119,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712571,"byte_end":9712622,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712623,"byte_end":9712630,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712631,"byte_end":9712654,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712655,"byte_end":9712680,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712681,"byte_end":9712726,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712727,"byte_end":9712762,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712763,"byte_end":9712770,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712771,"byte_end":9712796,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712797,"byte_end":9712845,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712846,"byte_end":9712886,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712887,"byte_end":9712894,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712895,"byte_end":9712954,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712955,"byte_end":9712970,"line_start":107,"line_end":107,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712971,"byte_end":9712979,"line_start":108,"line_end":108,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712980,"byte_end":9712987,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9712988,"byte_end":9713040,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713041,"byte_end":9713084,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713085,"byte_end":9713092,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713093,"byte_end":9713099,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713100,"byte_end":9713107,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713108,"byte_end":9713119,"line_start":115,"line_end":115,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713120,"byte_end":9713137,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713138,"byte_end":9713154,"line_start":117,"line_end":117,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713776,"byte_end":9713800,"line_start":134,"line_end":134,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713320,"byte_end":9713372,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713373,"byte_end":9713380,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713381,"byte_end":9713404,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713405,"byte_end":9713473,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713474,"byte_end":9713545,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713546,"byte_end":9713606,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713607,"byte_end":9713674,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713675,"byte_end":9713682,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713683,"byte_end":9713694,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713695,"byte_end":9713712,"line_start":132,"line_end":132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714489,"byte_end":9714512,"line_start":162,"line_end":162,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713880,"byte_end":9713931,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713932,"byte_end":9713939,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713940,"byte_end":9713963,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713964,"byte_end":9713989,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9713990,"byte_end":9714027,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714028,"byte_end":9714059,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714060,"byte_end":9714067,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714068,"byte_end":9714093,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714094,"byte_end":9714133,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714134,"byte_end":9714169,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714170,"byte_end":9714177,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714178,"byte_end":9714237,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714238,"byte_end":9714253,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714254,"byte_end":9714262,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714263,"byte_end":9714270,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714271,"byte_end":9714315,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714316,"byte_end":9714355,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714356,"byte_end":9714363,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714364,"byte_end":9714370,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714371,"byte_end":9714378,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714379,"byte_end":9714390,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714391,"byte_end":9714408,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714409,"byte_end":9714425,"line_start":160,"line_end":160,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715016,"byte_end":9715040,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714591,"byte_end":9714643,"line_start":166,"line_end":166,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714644,"byte_end":9714651,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714652,"byte_end":9714675,"line_start":168,"line_end":168,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714676,"byte_end":9714733,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714734,"byte_end":9714795,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714796,"byte_end":9714856,"line_start":171,"line_end":171,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714857,"byte_end":9714914,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714915,"byte_end":9714922,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714923,"byte_end":9714934,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9714935,"byte_end":9714952,"line_start":175,"line_end":175,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715434,"byte_end":9715446,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715120,"byte_end":9715140,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715141,"byte_end":9715148,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715149,"byte_end":9715172,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715173,"byte_end":9715215,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715216,"byte_end":9715258,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715259,"byte_end":9715301,"line_start":186,"line_end":186,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715302,"byte_end":9715332,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715333,"byte_end":9715340,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715341,"byte_end":9715352,"line_start":189,"line_end":189,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715353,"byte_end":9715370,"line_start":190,"line_end":190,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715836,"byte_end":9715848,"line_start":207,"line_end":207,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715522,"byte_end":9715542,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715543,"byte_end":9715550,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715551,"byte_end":9715574,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715575,"byte_end":9715613,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715614,"byte_end":9715652,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715653,"byte_end":9715701,"line_start":201,"line_end":201,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715702,"byte_end":9715734,"line_start":202,"line_end":202,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715735,"byte_end":9715742,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715743,"byte_end":9715754,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715755,"byte_end":9715772,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716247,"byte_end":9716262,"line_start":222,"line_end":222,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715927,"byte_end":9715950,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715951,"byte_end":9715958,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715959,"byte_end":9715982,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9715983,"byte_end":9716025,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716026,"byte_end":9716068,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716069,"byte_end":9716114,"line_start":216,"line_end":216,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716115,"byte_end":9716145,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716146,"byte_end":9716153,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716154,"byte_end":9716165,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716166,"byte_end":9716183,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716661,"byte_end":9716676,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716341,"byte_end":9716364,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716365,"byte_end":9716372,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716373,"byte_end":9716396,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716397,"byte_end":9716435,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716436,"byte_end":9716474,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716475,"byte_end":9716526,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716527,"byte_end":9716559,"line_start":232,"line_end":232,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716560,"byte_end":9716567,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716568,"byte_end":9716579,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716580,"byte_end":9716597,"line_start":235,"line_end":235,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717342,"byte_end":9717358,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716758,"byte_end":9716798,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716799,"byte_end":9716806,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716807,"byte_end":9716830,"line_start":243,"line_end":243,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716831,"byte_end":9716856,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716857,"byte_end":9716894,"line_start":245,"line_end":245,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716895,"byte_end":9716926,"line_start":246,"line_end":246,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716927,"byte_end":9716934,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716935,"byte_end":9716960,"line_start":248,"line_end":248,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9716961,"byte_end":9717000,"line_start":249,"line_end":249,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717001,"byte_end":9717036,"line_start":250,"line_end":250,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717037,"byte_end":9717044,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717045,"byte_end":9717097,"line_start":252,"line_end":252,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717098,"byte_end":9717113,"line_start":253,"line_end":253,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717114,"byte_end":9717122,"line_start":254,"line_end":254,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717123,"byte_end":9717130,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717131,"byte_end":9717173,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717174,"byte_end":9717208,"line_start":257,"line_end":257,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717209,"byte_end":9717216,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717217,"byte_end":9717223,"line_start":259,"line_end":259,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717224,"byte_end":9717231,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717232,"byte_end":9717243,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717244,"byte_end":9717261,"line_start":262,"line_end":262,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717262,"byte_end":9717278,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717840,"byte_end":9717857,"line_start":280,"line_end":280,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717436,"byte_end":9717477,"line_start":269,"line_end":269,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717478,"byte_end":9717485,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717486,"byte_end":9717509,"line_start":271,"line_end":271,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717510,"byte_end":9717567,"line_start":272,"line_end":272,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717568,"byte_end":9717629,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717630,"byte_end":9717683,"line_start":274,"line_end":274,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717684,"byte_end":9717738,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717739,"byte_end":9717746,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717747,"byte_end":9717758,"line_start":277,"line_end":277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717759,"byte_end":9717776,"line_start":278,"line_end":278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718339,"byte_end":9718362,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"byte_shl_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shl_imm_u128_m128i","value":"pub fn byte_shl_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register left by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register left by a number of **bytes**.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9717936,"byte_end":9718009,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718010,"byte_end":9718013,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718014,"byte_end":9718021,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718022,"byte_end":9718045,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718046,"byte_end":9718114,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718115,"byte_end":9718121,"line_start":289,"line_end":289,"column_start":1,"column_end":7}},{"value":"/ let b: u128 = byte_shl_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718122,"byte_end":9718179,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(b, 0x00000B00_00000A00_00000F11_11111100);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718180,"byte_end":9718237,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718238,"byte_end":9718245,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718246,"byte_end":9718257,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718258,"byte_end":9718275,"line_start":294,"line_end":294,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718853,"byte_end":9718876,"line_start":312,"line_end":312,"column_start":8,"column_end":31},"name":"byte_shr_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shr_imm_u128_m128i","value":"pub fn byte_shr_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register right by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register right by a number of **bytes**.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718449,"byte_end":9718523,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718524,"byte_end":9718527,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718528,"byte_end":9718535,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718536,"byte_end":9718559,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718560,"byte_end":9718628,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718629,"byte_end":9718635,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ let c: u128 = byte_shr_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718636,"byte_end":9718693,"line_start":306,"line_end":306,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, 0x00000000_0B000000_0A000000_0F111111);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718694,"byte_end":9718751,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718752,"byte_end":9718759,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718760,"byte_end":9718771,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718772,"byte_end":9718789,"line_start":310,"line_end":310,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719297,"byte_end":9719320,"line_start":326,"line_end":326,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9718963,"byte_end":9719009,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719010,"byte_end":9719017,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719018,"byte_end":9719041,"line_start":318,"line_end":318,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719042,"byte_end":9719084,"line_start":319,"line_end":319,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719085,"byte_end":9719144,"line_start":320,"line_end":320,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719145,"byte_end":9719195,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719196,"byte_end":9719203,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719204,"byte_end":9719215,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719216,"byte_end":9719233,"line_start":324,"line_end":324,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719715,"byte_end":9719739,"line_start":340,"line_end":340,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719382,"byte_end":9719429,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719430,"byte_end":9719437,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719438,"byte_end":9719461,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719462,"byte_end":9719504,"line_start":333,"line_end":333,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719505,"byte_end":9719562,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719563,"byte_end":9719613,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719614,"byte_end":9719621,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719622,"byte_end":9719633,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719634,"byte_end":9719651,"line_start":338,"line_end":338,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720159,"byte_end":9720182,"line_start":354,"line_end":354,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719806,"byte_end":9719852,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719853,"byte_end":9719860,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719861,"byte_end":9719884,"line_start":346,"line_end":346,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719885,"byte_end":9719936,"line_start":347,"line_end":347,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719937,"byte_end":9719996,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9719997,"byte_end":9720057,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720058,"byte_end":9720065,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720066,"byte_end":9720077,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720078,"byte_end":9720095,"line_start":352,"line_end":352,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720603,"byte_end":9720626,"line_start":368,"line_end":368,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720245,"byte_end":9720291,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720292,"byte_end":9720299,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720300,"byte_end":9720323,"line_start":360,"line_end":360,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720324,"byte_end":9720375,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720376,"byte_end":9720432,"line_start":362,"line_end":362,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720433,"byte_end":9720501,"line_start":363,"line_end":363,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720502,"byte_end":9720509,"line_start":364,"line_end":364,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720510,"byte_end":9720521,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720522,"byte_end":9720539,"line_start":366,"line_end":366,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721020,"byte_end":9721044,"line_start":382,"line_end":382,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720692,"byte_end":9720739,"line_start":372,"line_end":372,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720740,"byte_end":9720747,"line_start":373,"line_end":373,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720748,"byte_end":9720771,"line_start":374,"line_end":374,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720772,"byte_end":9720810,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720811,"byte_end":9720871,"line_start":376,"line_end":376,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720872,"byte_end":9720918,"line_start":377,"line_end":377,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720919,"byte_end":9720926,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720927,"byte_end":9720938,"line_start":379,"line_end":379,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9720939,"byte_end":9720956,"line_start":380,"line_end":380,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721423,"byte_end":9721446,"line_start":396,"line_end":396,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721111,"byte_end":9721157,"line_start":386,"line_end":386,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721158,"byte_end":9721165,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721166,"byte_end":9721189,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721190,"byte_end":9721228,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721229,"byte_end":9721288,"line_start":390,"line_end":390,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721289,"byte_end":9721321,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721322,"byte_end":9721329,"line_start":392,"line_end":392,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721330,"byte_end":9721341,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721342,"byte_end":9721359,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722058,"byte_end":9722078,"line_start":413,"line_end":413,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721511,"byte_end":9721552,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721553,"byte_end":9721556,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721557,"byte_end":9721615,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721616,"byte_end":9721623,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721624,"byte_end":9721647,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721648,"byte_end":9721732,"line_start":405,"line_end":405,"column_start":1,"column_end":85}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721733,"byte_end":9721824,"line_start":406,"line_end":406,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721825,"byte_end":9721881,"line_start":407,"line_end":407,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721882,"byte_end":9721956,"line_start":408,"line_end":408,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721957,"byte_end":9721964,"line_start":409,"line_end":409,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721965,"byte_end":9721976,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9721977,"byte_end":9721994,"line_start":411,"line_end":411,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722624,"byte_end":9722645,"line_start":430,"line_end":430,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722158,"byte_end":9722200,"line_start":417,"line_end":417,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722201,"byte_end":9722204,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722205,"byte_end":9722263,"line_start":419,"line_end":419,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722264,"byte_end":9722271,"line_start":420,"line_end":420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722272,"byte_end":9722295,"line_start":421,"line_end":421,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722296,"byte_end":9722354,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722355,"byte_end":9722416,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722417,"byte_end":9722474,"line_start":424,"line_end":424,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722475,"byte_end":9722522,"line_start":425,"line_end":425,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722523,"byte_end":9722530,"line_start":426,"line_end":426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722531,"byte_end":9722542,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722543,"byte_end":9722560,"line_start":428,"line_end":428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723136,"byte_end":9723157,"line_start":447,"line_end":447,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722726,"byte_end":9722768,"line_start":434,"line_end":434,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722769,"byte_end":9722772,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722773,"byte_end":9722831,"line_start":436,"line_end":436,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722832,"byte_end":9722839,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722840,"byte_end":9722863,"line_start":438,"line_end":438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722864,"byte_end":9722902,"line_start":439,"line_end":439,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722903,"byte_end":9722941,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9722942,"byte_end":9722999,"line_start":441,"line_end":441,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723000,"byte_end":9723034,"line_start":442,"line_end":442,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723035,"byte_end":9723042,"line_start":443,"line_end":443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723043,"byte_end":9723054,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723055,"byte_end":9723072,"line_start":445,"line_end":445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723595,"byte_end":9723612,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723238,"byte_end":9723273,"line_start":451,"line_end":451,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723274,"byte_end":9723277,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723278,"byte_end":9723294,"line_start":453,"line_end":453,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723295,"byte_end":9723302,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723303,"byte_end":9723326,"line_start":455,"line_end":455,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723327,"byte_end":9723369,"line_start":456,"line_end":456,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723370,"byte_end":9723412,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723413,"byte_end":9723459,"line_start":458,"line_end":458,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723460,"byte_end":9723493,"line_start":459,"line_end":459,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723494,"byte_end":9723501,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723502,"byte_end":9723513,"line_start":461,"line_end":461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723514,"byte_end":9723531,"line_start":462,"line_end":462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724073,"byte_end":9724092,"line_start":481,"line_end":481,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723690,"byte_end":9723735,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723736,"byte_end":9723739,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723740,"byte_end":9723756,"line_start":470,"line_end":470,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723757,"byte_end":9723764,"line_start":471,"line_end":471,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723765,"byte_end":9723788,"line_start":472,"line_end":472,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723789,"byte_end":9723831,"line_start":473,"line_end":473,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723832,"byte_end":9723874,"line_start":474,"line_end":474,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723875,"byte_end":9723923,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723924,"byte_end":9723971,"line_start":476,"line_end":476,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723972,"byte_end":9723979,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723980,"byte_end":9723991,"line_start":478,"line_end":478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9723992,"byte_end":9724009,"line_start":479,"line_end":479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724521,"byte_end":9724538,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724170,"byte_end":9724192,"line_start":485,"line_end":485,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724193,"byte_end":9724196,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724197,"byte_end":9724213,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724214,"byte_end":9724221,"line_start":488,"line_end":488,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724222,"byte_end":9724245,"line_start":489,"line_end":489,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724246,"byte_end":9724288,"line_start":490,"line_end":490,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724289,"byte_end":9724331,"line_start":491,"line_end":491,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724332,"byte_end":9724378,"line_start":492,"line_end":492,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724379,"byte_end":9724419,"line_start":493,"line_end":493,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724420,"byte_end":9724427,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724428,"byte_end":9724439,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724440,"byte_end":9724457,"line_start":496,"line_end":496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724999,"byte_end":9725018,"line_start":515,"line_end":515,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724616,"byte_end":9724661,"line_start":502,"line_end":502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724662,"byte_end":9724665,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724666,"byte_end":9724682,"line_start":504,"line_end":504,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724683,"byte_end":9724690,"line_start":505,"line_end":505,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724691,"byte_end":9724714,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724715,"byte_end":9724757,"line_start":507,"line_end":507,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724758,"byte_end":9724800,"line_start":508,"line_end":508,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724801,"byte_end":9724849,"line_start":509,"line_end":509,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724850,"byte_end":9724897,"line_start":510,"line_end":510,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724898,"byte_end":9724905,"line_start":511,"line_end":511,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724906,"byte_end":9724917,"line_start":512,"line_end":512,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9724918,"byte_end":9724935,"line_start":513,"line_end":513,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725648,"byte_end":9725668,"line_start":532,"line_end":532,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725096,"byte_end":9725136,"line_start":519,"line_end":519,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725137,"byte_end":9725140,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725141,"byte_end":9725199,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725200,"byte_end":9725207,"line_start":522,"line_end":522,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725208,"byte_end":9725231,"line_start":523,"line_end":523,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725232,"byte_end":9725320,"line_start":524,"line_end":524,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725321,"byte_end":9725412,"line_start":525,"line_end":525,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725413,"byte_end":9725469,"line_start":526,"line_end":526,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725470,"byte_end":9725546,"line_start":527,"line_end":527,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725547,"byte_end":9725554,"line_start":528,"line_end":528,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725555,"byte_end":9725566,"line_start":529,"line_end":529,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725567,"byte_end":9725584,"line_start":530,"line_end":530,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726217,"byte_end":9726238,"line_start":549,"line_end":549,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725748,"byte_end":9725789,"line_start":536,"line_end":536,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725790,"byte_end":9725793,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725794,"byte_end":9725852,"line_start":538,"line_end":538,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725853,"byte_end":9725860,"line_start":539,"line_end":539,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725861,"byte_end":9725884,"line_start":540,"line_end":540,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725885,"byte_end":9725944,"line_start":541,"line_end":541,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9725945,"byte_end":9726006,"line_start":542,"line_end":542,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726007,"byte_end":9726064,"line_start":543,"line_end":543,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726065,"byte_end":9726115,"line_start":544,"line_end":544,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726116,"byte_end":9726123,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726124,"byte_end":9726135,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726136,"byte_end":9726153,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726730,"byte_end":9726751,"line_start":566,"line_end":566,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726319,"byte_end":9726360,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726361,"byte_end":9726364,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726365,"byte_end":9726423,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726424,"byte_end":9726431,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726432,"byte_end":9726455,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726456,"byte_end":9726496,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726497,"byte_end":9726535,"line_start":559,"line_end":559,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726536,"byte_end":9726593,"line_start":560,"line_end":560,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726594,"byte_end":9726628,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726629,"byte_end":9726636,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726637,"byte_end":9726648,"line_start":563,"line_end":563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726649,"byte_end":9726666,"line_start":564,"line_end":564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727175,"byte_end":9727192,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726832,"byte_end":9726853,"line_start":570,"line_end":570,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726854,"byte_end":9726857,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726858,"byte_end":9726874,"line_start":572,"line_end":572,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726875,"byte_end":9726882,"line_start":573,"line_end":573,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726883,"byte_end":9726906,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726907,"byte_end":9726949,"line_start":575,"line_end":575,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726950,"byte_end":9726992,"line_start":576,"line_end":576,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9726993,"byte_end":9727039,"line_start":577,"line_end":577,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727040,"byte_end":9727073,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727074,"byte_end":9727081,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727082,"byte_end":9727093,"line_start":580,"line_end":580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727094,"byte_end":9727111,"line_start":581,"line_end":581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727652,"byte_end":9727671,"line_start":600,"line_end":600,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727270,"byte_end":9727314,"line_start":587,"line_end":587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727315,"byte_end":9727318,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727319,"byte_end":9727335,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727336,"byte_end":9727343,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727344,"byte_end":9727367,"line_start":591,"line_end":591,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727368,"byte_end":9727410,"line_start":592,"line_end":592,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727411,"byte_end":9727453,"line_start":593,"line_end":593,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727454,"byte_end":9727502,"line_start":594,"line_end":594,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727503,"byte_end":9727550,"line_start":595,"line_end":595,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727551,"byte_end":9727558,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727559,"byte_end":9727570,"line_start":597,"line_end":597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727571,"byte_end":9727588,"line_start":598,"line_end":598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728100,"byte_end":9728117,"line_start":617,"line_end":617,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727749,"byte_end":9727771,"line_start":604,"line_end":604,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727772,"byte_end":9727775,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727776,"byte_end":9727792,"line_start":606,"line_end":606,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727793,"byte_end":9727800,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727801,"byte_end":9727824,"line_start":608,"line_end":608,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727825,"byte_end":9727867,"line_start":609,"line_end":609,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727868,"byte_end":9727910,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727911,"byte_end":9727957,"line_start":611,"line_end":611,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727958,"byte_end":9727998,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9727999,"byte_end":9728006,"line_start":613,"line_end":613,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728007,"byte_end":9728018,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728019,"byte_end":9728036,"line_start":615,"line_end":615,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728578,"byte_end":9728597,"line_start":634,"line_end":634,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728195,"byte_end":9728240,"line_start":621,"line_end":621,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728241,"byte_end":9728244,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728245,"byte_end":9728261,"line_start":623,"line_end":623,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728262,"byte_end":9728269,"line_start":624,"line_end":624,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728270,"byte_end":9728293,"line_start":625,"line_end":625,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728294,"byte_end":9728336,"line_start":626,"line_end":626,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728337,"byte_end":9728379,"line_start":627,"line_end":627,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728380,"byte_end":9728428,"line_start":628,"line_end":628,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728429,"byte_end":9728476,"line_start":629,"line_end":629,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728477,"byte_end":9728484,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728485,"byte_end":9728496,"line_start":631,"line_end":631,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728497,"byte_end":9728514,"line_start":632,"line_end":632,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729227,"byte_end":9729247,"line_start":651,"line_end":651,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728675,"byte_end":9728715,"line_start":638,"line_end":638,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728716,"byte_end":9728719,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728720,"byte_end":9728778,"line_start":640,"line_end":640,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728779,"byte_end":9728786,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728787,"byte_end":9728810,"line_start":642,"line_end":642,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728811,"byte_end":9728899,"line_start":643,"line_end":643,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728900,"byte_end":9728991,"line_start":644,"line_end":644,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9728992,"byte_end":9729048,"line_start":645,"line_end":645,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729049,"byte_end":9729125,"line_start":646,"line_end":646,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729126,"byte_end":9729133,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729134,"byte_end":9729145,"line_start":648,"line_end":648,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729146,"byte_end":9729163,"line_start":649,"line_end":649,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729792,"byte_end":9729813,"line_start":668,"line_end":668,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729327,"byte_end":9729368,"line_start":655,"line_end":655,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729369,"byte_end":9729372,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729373,"byte_end":9729431,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729432,"byte_end":9729439,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729440,"byte_end":9729463,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729464,"byte_end":9729523,"line_start":660,"line_end":660,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729524,"byte_end":9729585,"line_start":661,"line_end":661,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729586,"byte_end":9729643,"line_start":662,"line_end":662,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729644,"byte_end":9729690,"line_start":663,"line_end":663,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729691,"byte_end":9729698,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729699,"byte_end":9729710,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729711,"byte_end":9729728,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730304,"byte_end":9730325,"line_start":685,"line_end":685,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729894,"byte_end":9729935,"line_start":672,"line_end":672,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729936,"byte_end":9729939,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729940,"byte_end":9729998,"line_start":674,"line_end":674,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9729999,"byte_end":9730006,"line_start":675,"line_end":675,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730007,"byte_end":9730030,"line_start":676,"line_end":676,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730031,"byte_end":9730071,"line_start":677,"line_end":677,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730072,"byte_end":9730110,"line_start":678,"line_end":678,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730111,"byte_end":9730168,"line_start":679,"line_end":679,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730169,"byte_end":9730202,"line_start":680,"line_end":680,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730203,"byte_end":9730210,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730211,"byte_end":9730222,"line_start":682,"line_end":682,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730223,"byte_end":9730240,"line_start":683,"line_end":683,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730749,"byte_end":9730766,"line_start":702,"line_end":702,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730406,"byte_end":9730427,"line_start":689,"line_end":689,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730428,"byte_end":9730431,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730432,"byte_end":9730448,"line_start":691,"line_end":691,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730449,"byte_end":9730456,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730457,"byte_end":9730480,"line_start":693,"line_end":693,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730481,"byte_end":9730523,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730524,"byte_end":9730566,"line_start":695,"line_end":695,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730567,"byte_end":9730613,"line_start":696,"line_end":696,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730614,"byte_end":9730647,"line_start":697,"line_end":697,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730648,"byte_end":9730655,"line_start":698,"line_end":698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730656,"byte_end":9730667,"line_start":699,"line_end":699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730668,"byte_end":9730685,"line_start":700,"line_end":700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731225,"byte_end":9731244,"line_start":719,"line_end":719,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730844,"byte_end":9730887,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730888,"byte_end":9730891,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730892,"byte_end":9730908,"line_start":708,"line_end":708,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730909,"byte_end":9730916,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730917,"byte_end":9730940,"line_start":710,"line_end":710,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730941,"byte_end":9730983,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9730984,"byte_end":9731026,"line_start":712,"line_end":712,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731027,"byte_end":9731075,"line_start":713,"line_end":713,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731076,"byte_end":9731123,"line_start":714,"line_end":714,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731124,"byte_end":9731131,"line_start":715,"line_end":715,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731132,"byte_end":9731143,"line_start":716,"line_end":716,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731144,"byte_end":9731161,"line_start":717,"line_end":717,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731667,"byte_end":9731685,"line_start":736,"line_end":736,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731322,"byte_end":9731344,"line_start":723,"line_end":723,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731345,"byte_end":9731348,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731349,"byte_end":9731365,"line_start":725,"line_end":725,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731366,"byte_end":9731373,"line_start":726,"line_end":726,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731374,"byte_end":9731397,"line_start":727,"line_end":727,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731398,"byte_end":9731440,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731441,"byte_end":9731483,"line_start":729,"line_end":729,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731484,"byte_end":9731531,"line_start":730,"line_end":730,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731532,"byte_end":9731565,"line_start":731,"line_end":731,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731566,"byte_end":9731573,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731574,"byte_end":9731585,"line_start":733,"line_end":733,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731586,"byte_end":9731603,"line_start":734,"line_end":734,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732147,"byte_end":9732167,"line_start":753,"line_end":753,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731764,"byte_end":9731808,"line_start":740,"line_end":740,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731809,"byte_end":9731812,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731813,"byte_end":9731829,"line_start":742,"line_end":742,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731830,"byte_end":9731837,"line_start":743,"line_end":743,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731838,"byte_end":9731861,"line_start":744,"line_end":744,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731862,"byte_end":9731904,"line_start":745,"line_end":745,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731905,"byte_end":9731947,"line_start":746,"line_end":746,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731948,"byte_end":9731997,"line_start":747,"line_end":747,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9731998,"byte_end":9732045,"line_start":748,"line_end":748,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732046,"byte_end":9732053,"line_start":749,"line_end":749,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732054,"byte_end":9732065,"line_start":750,"line_end":750,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732066,"byte_end":9732083,"line_start":751,"line_end":751,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732594,"byte_end":9732612,"line_start":770,"line_end":770,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732246,"byte_end":9732271,"line_start":757,"line_end":757,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732272,"byte_end":9732275,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732276,"byte_end":9732292,"line_start":759,"line_end":759,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732293,"byte_end":9732300,"line_start":760,"line_end":760,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732301,"byte_end":9732324,"line_start":761,"line_end":761,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732325,"byte_end":9732367,"line_start":762,"line_end":762,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732368,"byte_end":9732410,"line_start":763,"line_end":763,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732411,"byte_end":9732458,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732459,"byte_end":9732492,"line_start":765,"line_end":765,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732493,"byte_end":9732500,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732501,"byte_end":9732512,"line_start":767,"line_end":767,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732513,"byte_end":9732530,"line_start":768,"line_end":768,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733070,"byte_end":9733090,"line_start":787,"line_end":787,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732691,"byte_end":9732738,"line_start":774,"line_end":774,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732739,"byte_end":9732742,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732743,"byte_end":9732759,"line_start":776,"line_end":776,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732760,"byte_end":9732767,"line_start":777,"line_end":777,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732768,"byte_end":9732791,"line_start":778,"line_end":778,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732792,"byte_end":9732834,"line_start":779,"line_end":779,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732835,"byte_end":9732877,"line_start":780,"line_end":780,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732878,"byte_end":9732927,"line_start":781,"line_end":781,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732928,"byte_end":9732968,"line_start":782,"line_end":782,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732969,"byte_end":9732976,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732977,"byte_end":9732988,"line_start":784,"line_end":784,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9732989,"byte_end":9733006,"line_start":785,"line_end":785,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733516,"byte_end":9733534,"line_start":804,"line_end":804,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733169,"byte_end":9733193,"line_start":791,"line_end":791,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733194,"byte_end":9733197,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733198,"byte_end":9733214,"line_start":793,"line_end":793,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733215,"byte_end":9733222,"line_start":794,"line_end":794,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733223,"byte_end":9733246,"line_start":795,"line_end":795,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733247,"byte_end":9733289,"line_start":796,"line_end":796,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733290,"byte_end":9733332,"line_start":797,"line_end":797,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733333,"byte_end":9733380,"line_start":798,"line_end":798,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733381,"byte_end":9733414,"line_start":799,"line_end":799,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733415,"byte_end":9733422,"line_start":800,"line_end":800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733423,"byte_end":9733434,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733435,"byte_end":9733452,"line_start":802,"line_end":802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733991,"byte_end":9734011,"line_start":821,"line_end":821,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733613,"byte_end":9733659,"line_start":808,"line_end":808,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733660,"byte_end":9733663,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733664,"byte_end":9733680,"line_start":810,"line_end":810,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733681,"byte_end":9733688,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733689,"byte_end":9733712,"line_start":812,"line_end":812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733713,"byte_end":9733755,"line_start":813,"line_end":813,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733756,"byte_end":9733798,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733799,"byte_end":9733848,"line_start":815,"line_end":815,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733849,"byte_end":9733889,"line_start":816,"line_end":816,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733890,"byte_end":9733897,"line_start":817,"line_end":817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733898,"byte_end":9733909,"line_start":818,"line_end":818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9733910,"byte_end":9733927,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734438,"byte_end":9734456,"line_start":838,"line_end":838,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734090,"byte_end":9734115,"line_start":825,"line_end":825,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734116,"byte_end":9734119,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734120,"byte_end":9734136,"line_start":827,"line_end":827,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734137,"byte_end":9734144,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734145,"byte_end":9734168,"line_start":829,"line_end":829,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734169,"byte_end":9734211,"line_start":830,"line_end":830,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734212,"byte_end":9734254,"line_start":831,"line_end":831,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734255,"byte_end":9734302,"line_start":832,"line_end":832,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734303,"byte_end":9734336,"line_start":833,"line_end":833,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734337,"byte_end":9734344,"line_start":834,"line_end":834,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734345,"byte_end":9734356,"line_start":835,"line_end":835,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734357,"byte_end":9734374,"line_start":836,"line_end":836,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734921,"byte_end":9734941,"line_start":855,"line_end":855,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734535,"byte_end":9734582,"line_start":842,"line_end":842,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734583,"byte_end":9734586,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734587,"byte_end":9734603,"line_start":844,"line_end":844,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734604,"byte_end":9734611,"line_start":845,"line_end":845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734612,"byte_end":9734635,"line_start":846,"line_end":846,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734636,"byte_end":9734678,"line_start":847,"line_end":847,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734679,"byte_end":9734721,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734722,"byte_end":9734771,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734772,"byte_end":9734819,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734820,"byte_end":9734827,"line_start":851,"line_end":851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734828,"byte_end":9734839,"line_start":852,"line_end":852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9734840,"byte_end":9734857,"line_start":853,"line_end":853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735367,"byte_end":9735385,"line_start":872,"line_end":872,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735020,"byte_end":9735044,"line_start":859,"line_end":859,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735045,"byte_end":9735048,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735049,"byte_end":9735065,"line_start":861,"line_end":861,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735066,"byte_end":9735073,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735074,"byte_end":9735097,"line_start":863,"line_end":863,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735098,"byte_end":9735140,"line_start":864,"line_end":864,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735141,"byte_end":9735183,"line_start":865,"line_end":865,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735184,"byte_end":9735231,"line_start":866,"line_end":866,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735232,"byte_end":9735265,"line_start":867,"line_end":867,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735266,"byte_end":9735273,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735274,"byte_end":9735285,"line_start":869,"line_end":869,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735286,"byte_end":9735303,"line_start":870,"line_end":870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735849,"byte_end":9735869,"line_start":889,"line_end":889,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735464,"byte_end":9735510,"line_start":876,"line_end":876,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735511,"byte_end":9735514,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735515,"byte_end":9735531,"line_start":878,"line_end":878,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735532,"byte_end":9735539,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735540,"byte_end":9735563,"line_start":880,"line_end":880,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735564,"byte_end":9735606,"line_start":881,"line_end":881,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735607,"byte_end":9735649,"line_start":882,"line_end":882,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735650,"byte_end":9735699,"line_start":883,"line_end":883,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735700,"byte_end":9735747,"line_start":884,"line_end":884,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735748,"byte_end":9735755,"line_start":885,"line_end":885,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735756,"byte_end":9735767,"line_start":886,"line_end":886,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735768,"byte_end":9735785,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736325,"byte_end":9736347,"line_start":906,"line_end":906,"column_start":8,"column_end":30},"name":"cmp_ordered_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d","value":"pub fn cmp_ordered_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735948,"byte_end":9735993,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735994,"byte_end":9735997,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9735998,"byte_end":9736014,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736015,"byte_end":9736022,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736023,"byte_end":9736046,"line_start":897,"line_end":897,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736047,"byte_end":9736094,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736095,"byte_end":9736137,"line_start":899,"line_end":899,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736138,"byte_end":9736189,"line_start":900,"line_end":900,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736190,"byte_end":9736223,"line_start":901,"line_end":901,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736224,"byte_end":9736231,"line_start":902,"line_end":902,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736232,"byte_end":9736243,"line_start":903,"line_end":903,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736244,"byte_end":9736261,"line_start":904,"line_end":904,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736836,"byte_end":9736860,"line_start":923,"line_end":923,"column_start":8,"column_end":32},"name":"cmp_ordered_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d_s","value":"pub fn cmp_ordered_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736426,"byte_end":9736493,"line_start":910,"line_end":910,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736494,"byte_end":9736497,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736498,"byte_end":9736514,"line_start":912,"line_end":912,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736515,"byte_end":9736522,"line_start":913,"line_end":913,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736523,"byte_end":9736546,"line_start":914,"line_end":914,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736547,"byte_end":9736589,"line_start":915,"line_end":915,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736590,"byte_end":9736632,"line_start":916,"line_end":916,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736633,"byte_end":9736686,"line_start":917,"line_end":917,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736687,"byte_end":9736734,"line_start":918,"line_end":918,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736735,"byte_end":9736742,"line_start":919,"line_end":919,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736743,"byte_end":9736754,"line_start":920,"line_end":920,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736755,"byte_end":9736772,"line_start":921,"line_end":921,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737308,"byte_end":9737328,"line_start":940,"line_end":940,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736939,"byte_end":9736978,"line_start":927,"line_end":927,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736979,"byte_end":9736982,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9736983,"byte_end":9736999,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737000,"byte_end":9737007,"line_start":930,"line_end":930,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737008,"byte_end":9737031,"line_start":931,"line_end":931,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737032,"byte_end":9737079,"line_start":932,"line_end":932,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737080,"byte_end":9737122,"line_start":933,"line_end":933,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737123,"byte_end":9737172,"line_start":934,"line_end":934,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737173,"byte_end":9737206,"line_start":935,"line_end":935,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737207,"byte_end":9737214,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737215,"byte_end":9737226,"line_start":937,"line_end":937,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737227,"byte_end":9737244,"line_start":938,"line_end":938,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737816,"byte_end":9737838,"line_start":957,"line_end":957,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737409,"byte_end":9737470,"line_start":944,"line_end":944,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737471,"byte_end":9737474,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737475,"byte_end":9737491,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737492,"byte_end":9737499,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737500,"byte_end":9737523,"line_start":948,"line_end":948,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737524,"byte_end":9737571,"line_start":949,"line_end":949,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737572,"byte_end":9737614,"line_start":950,"line_end":950,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737615,"byte_end":9737666,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737667,"byte_end":9737714,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737715,"byte_end":9737722,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737723,"byte_end":9737734,"line_start":954,"line_end":954,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737735,"byte_end":9737752,"line_start":955,"line_end":955,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738238,"byte_end":9738256,"line_start":973,"line_end":973,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737919,"byte_end":9737947,"line_start":961,"line_end":961,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737948,"byte_end":9737951,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737952,"byte_end":9737969,"line_start":963,"line_end":963,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737970,"byte_end":9737977,"line_start":964,"line_end":964,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9737978,"byte_end":9738001,"line_start":965,"line_end":965,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738002,"byte_end":9738044,"line_start":966,"line_end":966,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738045,"byte_end":9738087,"line_start":967,"line_end":967,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738088,"byte_end":9738136,"line_start":968,"line_end":968,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738137,"byte_end":9738144,"line_start":969,"line_end":969,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738145,"byte_end":9738156,"line_start":970,"line_end":970,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738157,"byte_end":9738174,"line_start":971,"line_end":971,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738661,"byte_end":9738679,"line_start":989,"line_end":989,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738326,"byte_end":9738370,"line_start":977,"line_end":977,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738371,"byte_end":9738374,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738375,"byte_end":9738392,"line_start":979,"line_end":979,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738393,"byte_end":9738400,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738401,"byte_end":9738424,"line_start":981,"line_end":981,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738425,"byte_end":9738467,"line_start":982,"line_end":982,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738468,"byte_end":9738510,"line_start":983,"line_end":983,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738511,"byte_end":9738559,"line_start":984,"line_end":984,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738560,"byte_end":9738567,"line_start":985,"line_end":985,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738568,"byte_end":9738579,"line_start":986,"line_end":986,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738580,"byte_end":9738597,"line_start":987,"line_end":987,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739072,"byte_end":9739090,"line_start":1005,"line_end":1005,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738749,"byte_end":9738781,"line_start":993,"line_end":993,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738782,"byte_end":9738785,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738786,"byte_end":9738803,"line_start":995,"line_end":995,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738804,"byte_end":9738811,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738812,"byte_end":9738835,"line_start":997,"line_end":997,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738836,"byte_end":9738878,"line_start":998,"line_end":998,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738879,"byte_end":9738921,"line_start":999,"line_end":999,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738922,"byte_end":9738970,"line_start":1000,"line_end":1000,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738971,"byte_end":9738978,"line_start":1001,"line_end":1001,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738979,"byte_end":9738990,"line_start":1002,"line_end":1002,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9738991,"byte_end":9739008,"line_start":1003,"line_end":1003,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739492,"byte_end":9739510,"line_start":1021,"line_end":1021,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739160,"byte_end":9739201,"line_start":1009,"line_end":1009,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739202,"byte_end":9739205,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739206,"byte_end":9739223,"line_start":1011,"line_end":1011,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739224,"byte_end":9739231,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739232,"byte_end":9739255,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739256,"byte_end":9739298,"line_start":1014,"line_end":1014,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739299,"byte_end":9739341,"line_start":1015,"line_end":1015,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739342,"byte_end":9739390,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739391,"byte_end":9739398,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739399,"byte_end":9739410,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739411,"byte_end":9739428,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739900,"byte_end":9739918,"line_start":1037,"line_end":1037,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739580,"byte_end":9739609,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739610,"byte_end":9739613,"line_start":1026,"line_end":1026,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739614,"byte_end":9739631,"line_start":1027,"line_end":1027,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739632,"byte_end":9739639,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739640,"byte_end":9739663,"line_start":1029,"line_end":1029,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739664,"byte_end":9739706,"line_start":1030,"line_end":1030,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739707,"byte_end":9739749,"line_start":1031,"line_end":1031,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739750,"byte_end":9739798,"line_start":1032,"line_end":1032,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739799,"byte_end":9739806,"line_start":1033,"line_end":1033,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739807,"byte_end":9739818,"line_start":1034,"line_end":1034,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739819,"byte_end":9739836,"line_start":1035,"line_end":1035,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740309,"byte_end":9740328,"line_start":1053,"line_end":1053,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9739988,"byte_end":9740017,"line_start":1041,"line_end":1041,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740018,"byte_end":9740021,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740022,"byte_end":9740039,"line_start":1043,"line_end":1043,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740040,"byte_end":9740047,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740048,"byte_end":9740071,"line_start":1045,"line_end":1045,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740072,"byte_end":9740114,"line_start":1046,"line_end":1046,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740115,"byte_end":9740157,"line_start":1047,"line_end":1047,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740158,"byte_end":9740207,"line_start":1048,"line_end":1048,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740208,"byte_end":9740215,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740216,"byte_end":9740227,"line_start":1050,"line_end":1050,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740228,"byte_end":9740245,"line_start":1051,"line_end":1051,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740849,"byte_end":9740887,"line_start":1070,"line_end":1070,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740399,"byte_end":9740455,"line_start":1057,"line_end":1057,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740456,"byte_end":9740463,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740464,"byte_end":9740487,"line_start":1059,"line_end":1059,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740488,"byte_end":9740526,"line_start":1060,"line_end":1060,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740527,"byte_end":9740581,"line_start":1061,"line_end":1061,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740582,"byte_end":9740624,"line_start":1062,"line_end":1062,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740625,"byte_end":9740666,"line_start":1063,"line_end":1063,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740667,"byte_end":9740674,"line_start":1064,"line_end":1064,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740675,"byte_end":9740715,"line_start":1065,"line_end":1065,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740716,"byte_end":9740755,"line_start":1066,"line_end":1066,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740756,"byte_end":9740767,"line_start":1067,"line_end":1067,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740768,"byte_end":9740785,"line_start":1068,"line_end":1068,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741400,"byte_end":9741430,"line_start":1087,"line_end":1087,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9740953,"byte_end":9741005,"line_start":1074,"line_end":1074,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741006,"byte_end":9741013,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741014,"byte_end":9741037,"line_start":1076,"line_end":1076,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741038,"byte_end":9741076,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741077,"byte_end":9741123,"line_start":1078,"line_end":1078,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741124,"byte_end":9741175,"line_start":1079,"line_end":1079,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741176,"byte_end":9741217,"line_start":1080,"line_end":1080,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741218,"byte_end":9741225,"line_start":1081,"line_end":1081,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741226,"byte_end":9741266,"line_start":1082,"line_end":1082,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741267,"byte_end":9741306,"line_start":1083,"line_end":1083,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741307,"byte_end":9741318,"line_start":1084,"line_end":1084,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741319,"byte_end":9741336,"line_start":1085,"line_end":1085,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741923,"byte_end":9741954,"line_start":1104,"line_end":1104,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741494,"byte_end":9741552,"line_start":1091,"line_end":1091,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741553,"byte_end":9741560,"line_start":1092,"line_end":1092,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741561,"byte_end":9741584,"line_start":1093,"line_end":1093,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741585,"byte_end":9741627,"line_start":1094,"line_end":1094,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741628,"byte_end":9741675,"line_start":1095,"line_end":1095,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741676,"byte_end":9741707,"line_start":1096,"line_end":1096,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741708,"byte_end":9741740,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741741,"byte_end":9741748,"line_start":1098,"line_end":1098,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741749,"byte_end":9741789,"line_start":1099,"line_end":1099,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741790,"byte_end":9741829,"line_start":1100,"line_end":1100,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741830,"byte_end":9741841,"line_start":1101,"line_end":1101,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9741842,"byte_end":9741859,"line_start":1102,"line_end":1102,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742449,"byte_end":9742475,"line_start":1120,"line_end":1120,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742020,"byte_end":9742078,"line_start":1108,"line_end":1108,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742079,"byte_end":9742086,"line_start":1109,"line_end":1109,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742087,"byte_end":9742110,"line_start":1110,"line_end":1110,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742111,"byte_end":9742153,"line_start":1111,"line_end":1111,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742154,"byte_end":9742196,"line_start":1112,"line_end":1112,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742197,"byte_end":9742269,"line_start":1113,"line_end":1113,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742270,"byte_end":9742277,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742278,"byte_end":9742315,"line_start":1115,"line_end":1115,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742316,"byte_end":9742355,"line_start":1116,"line_end":1116,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742356,"byte_end":9742367,"line_start":1117,"line_end":1117,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742368,"byte_end":9742385,"line_start":1118,"line_end":1118,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742957,"byte_end":9742987,"line_start":1137,"line_end":1137,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742536,"byte_end":9742578,"line_start":1124,"line_end":1124,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742579,"byte_end":9742586,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742587,"byte_end":9742610,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742611,"byte_end":9742662,"line_start":1127,"line_end":1127,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742663,"byte_end":9742709,"line_start":1128,"line_end":1128,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742710,"byte_end":9742741,"line_start":1129,"line_end":1129,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742742,"byte_end":9742774,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742775,"byte_end":9742782,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742783,"byte_end":9742823,"line_start":1132,"line_end":1132,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742824,"byte_end":9742863,"line_start":1133,"line_end":1133,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742864,"byte_end":9742875,"line_start":1134,"line_end":1134,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9742876,"byte_end":9742893,"line_start":1135,"line_end":1135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743491,"byte_end":9743524,"line_start":1153,"line_end":1153,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743052,"byte_end":9743110,"line_start":1141,"line_end":1141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743111,"byte_end":9743118,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743119,"byte_end":9743142,"line_start":1143,"line_end":1143,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743143,"byte_end":9743194,"line_start":1144,"line_end":1144,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743195,"byte_end":9743244,"line_start":1145,"line_end":1145,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743245,"byte_end":9743311,"line_start":1146,"line_end":1146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743312,"byte_end":9743319,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743320,"byte_end":9743357,"line_start":1148,"line_end":1148,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743358,"byte_end":9743397,"line_start":1149,"line_end":1149,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743398,"byte_end":9743409,"line_start":1150,"line_end":1150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743410,"byte_end":9743427,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743870,"byte_end":9743890,"line_start":1167,"line_end":1167,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743586,"byte_end":9743628,"line_start":1157,"line_end":1157,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743629,"byte_end":9743636,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743637,"byte_end":9743660,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743661,"byte_end":9743703,"line_start":1160,"line_end":1160,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743704,"byte_end":9743740,"line_start":1161,"line_end":1161,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743741,"byte_end":9743768,"line_start":1162,"line_end":1162,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743769,"byte_end":9743776,"line_start":1163,"line_end":1163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743777,"byte_end":9743788,"line_start":1164,"line_end":1164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743789,"byte_end":9743806,"line_start":1165,"line_end":1165,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744231,"byte_end":9744251,"line_start":1181,"line_end":1181,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743945,"byte_end":9743991,"line_start":1171,"line_end":1171,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9743992,"byte_end":9743999,"line_start":1172,"line_end":1172,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744000,"byte_end":9744023,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744024,"byte_end":9744066,"line_start":1174,"line_end":1174,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744067,"byte_end":9744103,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744104,"byte_end":9744129,"line_start":1176,"line_end":1176,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744130,"byte_end":9744137,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744138,"byte_end":9744149,"line_start":1178,"line_end":1178,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744150,"byte_end":9744167,"line_start":1179,"line_end":1179,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744624,"byte_end":9744644,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744307,"byte_end":9744353,"line_start":1185,"line_end":1185,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744354,"byte_end":9744361,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744362,"byte_end":9744385,"line_start":1187,"line_end":1187,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744386,"byte_end":9744428,"line_start":1188,"line_end":1188,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744429,"byte_end":9744465,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744466,"byte_end":9744491,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744492,"byte_end":9744499,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744500,"byte_end":9744511,"line_start":1192,"line_end":1192,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744512,"byte_end":9744529,"line_start":1193,"line_end":1193,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744530,"byte_end":9744560,"line_start":1194,"line_end":1194,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745215,"byte_end":9745245,"line_start":1214,"line_end":1214,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744700,"byte_end":9744775,"line_start":1200,"line_end":1200,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744776,"byte_end":9744783,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744784,"byte_end":9744807,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744808,"byte_end":9744859,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744860,"byte_end":9744902,"line_start":1204,"line_end":1204,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744903,"byte_end":9744952,"line_start":1205,"line_end":1205,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9744953,"byte_end":9745004,"line_start":1206,"line_end":1206,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745005,"byte_end":9745012,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745013,"byte_end":9745050,"line_start":1208,"line_end":1208,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745051,"byte_end":9745090,"line_start":1209,"line_end":1209,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745091,"byte_end":9745102,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745103,"byte_end":9745120,"line_start":1211,"line_end":1211,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745121,"byte_end":9745151,"line_start":1212,"line_end":1212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745602,"byte_end":9745622,"line_start":1228,"line_end":1228,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745320,"byte_end":9745366,"line_start":1218,"line_end":1218,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745367,"byte_end":9745374,"line_start":1219,"line_end":1219,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745375,"byte_end":9745398,"line_start":1220,"line_end":1220,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745399,"byte_end":9745437,"line_start":1221,"line_end":1221,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745438,"byte_end":9745474,"line_start":1222,"line_end":1222,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745475,"byte_end":9745500,"line_start":1223,"line_end":1223,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745501,"byte_end":9745508,"line_start":1224,"line_end":1224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745509,"byte_end":9745520,"line_start":1225,"line_end":1225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745521,"byte_end":9745538,"line_start":1226,"line_end":1226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745992,"byte_end":9746012,"line_start":1243,"line_end":1243,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745681,"byte_end":9745727,"line_start":1232,"line_end":1232,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745728,"byte_end":9745735,"line_start":1233,"line_end":1233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745736,"byte_end":9745759,"line_start":1234,"line_end":1234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745760,"byte_end":9745796,"line_start":1235,"line_end":1235,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745797,"byte_end":9745833,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745834,"byte_end":9745859,"line_start":1237,"line_end":1237,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745860,"byte_end":9745867,"line_start":1238,"line_end":1238,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745868,"byte_end":9745879,"line_start":1239,"line_end":1239,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745880,"byte_end":9745897,"line_start":1240,"line_end":1240,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9745898,"byte_end":9745928,"line_start":1241,"line_end":1241,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746486,"byte_end":9746513,"line_start":1259,"line_end":1259,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746071,"byte_end":9746136,"line_start":1247,"line_end":1247,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746137,"byte_end":9746144,"line_start":1248,"line_end":1248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746145,"byte_end":9746168,"line_start":1249,"line_end":1249,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746169,"byte_end":9746211,"line_start":1250,"line_end":1250,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746212,"byte_end":9746262,"line_start":1251,"line_end":1251,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746263,"byte_end":9746304,"line_start":1252,"line_end":1252,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746305,"byte_end":9746312,"line_start":1253,"line_end":1253,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746313,"byte_end":9746352,"line_start":1254,"line_end":1254,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746353,"byte_end":9746392,"line_start":1255,"line_end":1255,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746393,"byte_end":9746404,"line_start":1256,"line_end":1256,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746405,"byte_end":9746422,"line_start":1257,"line_end":1257,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746927,"byte_end":9746942,"line_start":1273,"line_end":1273,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746589,"byte_end":9746662,"line_start":1263,"line_end":1263,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746663,"byte_end":9746670,"line_start":1264,"line_end":1264,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746671,"byte_end":9746694,"line_start":1265,"line_end":1265,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746695,"byte_end":9746747,"line_start":1266,"line_end":1266,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746748,"byte_end":9746803,"line_start":1267,"line_end":1267,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746804,"byte_end":9746825,"line_start":1268,"line_end":1268,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746826,"byte_end":9746833,"line_start":1269,"line_end":1269,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746834,"byte_end":9746845,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9746846,"byte_end":9746863,"line_start":1271,"line_end":1271,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747452,"byte_end":9747479,"line_start":1290,"line_end":1290,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747006,"byte_end":9747071,"line_start":1277,"line_end":1277,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747072,"byte_end":9747079,"line_start":1278,"line_end":1278,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747080,"byte_end":9747103,"line_start":1279,"line_end":1279,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747104,"byte_end":9747146,"line_start":1280,"line_end":1280,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747147,"byte_end":9747197,"line_start":1281,"line_end":1281,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747198,"byte_end":9747239,"line_start":1282,"line_end":1282,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747240,"byte_end":9747247,"line_start":1283,"line_end":1283,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747248,"byte_end":9747287,"line_start":1284,"line_end":1284,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747288,"byte_end":9747327,"line_start":1285,"line_end":1285,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747328,"byte_end":9747339,"line_start":1286,"line_end":1286,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747340,"byte_end":9747357,"line_start":1287,"line_end":1287,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747358,"byte_end":9747388,"line_start":1288,"line_end":1288,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747922,"byte_end":9747937,"line_start":1305,"line_end":1305,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747555,"byte_end":9747628,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747629,"byte_end":9747636,"line_start":1295,"line_end":1295,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747637,"byte_end":9747660,"line_start":1296,"line_end":1296,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747661,"byte_end":9747713,"line_start":1297,"line_end":1297,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747714,"byte_end":9747767,"line_start":1298,"line_end":1298,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747768,"byte_end":9747789,"line_start":1299,"line_end":1299,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747790,"byte_end":9747797,"line_start":1300,"line_end":1300,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747798,"byte_end":9747809,"line_start":1301,"line_end":1301,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747810,"byte_end":9747827,"line_start":1302,"line_end":1302,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9747828,"byte_end":9747858,"line_start":1303,"line_end":1303,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748475,"byte_end":9748505,"line_start":1322,"line_end":1322,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748001,"byte_end":9748076,"line_start":1309,"line_end":1309,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748077,"byte_end":9748084,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748085,"byte_end":9748108,"line_start":1311,"line_end":1311,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748109,"byte_end":9748151,"line_start":1312,"line_end":1312,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748152,"byte_end":9748203,"line_start":1313,"line_end":1313,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748204,"byte_end":9748253,"line_start":1314,"line_end":1314,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748254,"byte_end":9748295,"line_start":1315,"line_end":1315,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748296,"byte_end":9748303,"line_start":1316,"line_end":1316,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748304,"byte_end":9748341,"line_start":1317,"line_end":1317,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748342,"byte_end":9748381,"line_start":1318,"line_end":1318,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748382,"byte_end":9748393,"line_start":1319,"line_end":1319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748394,"byte_end":9748411,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748926,"byte_end":9748949,"line_start":1336,"line_end":1336,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748582,"byte_end":9748658,"line_start":1326,"line_end":1326,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748659,"byte_end":9748666,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748667,"byte_end":9748690,"line_start":1328,"line_end":1328,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748691,"byte_end":9748733,"line_start":1329,"line_end":1329,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748734,"byte_end":9748773,"line_start":1330,"line_end":1330,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748774,"byte_end":9748824,"line_start":1331,"line_end":1331,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748825,"byte_end":9748832,"line_start":1332,"line_end":1332,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748833,"byte_end":9748844,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9748845,"byte_end":9748862,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749336,"byte_end":9749358,"line_start":1350,"line_end":1350,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749016,"byte_end":9749060,"line_start":1340,"line_end":1340,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749061,"byte_end":9749068,"line_start":1341,"line_end":1341,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749069,"byte_end":9749092,"line_start":1342,"line_end":1342,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749093,"byte_end":9749144,"line_start":1343,"line_end":1343,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749145,"byte_end":9749183,"line_start":1344,"line_end":1344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749184,"byte_end":9749234,"line_start":1345,"line_end":1345,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749235,"byte_end":9749242,"line_start":1346,"line_end":1346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749243,"byte_end":9749254,"line_start":1347,"line_end":1347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749255,"byte_end":9749272,"line_start":1348,"line_end":1348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749694,"byte_end":9749717,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749424,"byte_end":9749466,"line_start":1354,"line_end":1354,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749467,"byte_end":9749474,"line_start":1355,"line_end":1355,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749475,"byte_end":9749498,"line_start":1356,"line_end":1356,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749499,"byte_end":9749541,"line_start":1357,"line_end":1357,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749542,"byte_end":9749592,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749593,"byte_end":9749600,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749601,"byte_end":9749612,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749613,"byte_end":9749630,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750075,"byte_end":9750098,"line_start":1377,"line_end":1377,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749774,"byte_end":9749816,"line_start":1367,"line_end":1367,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749817,"byte_end":9749824,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749825,"byte_end":9749848,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749849,"byte_end":9749891,"line_start":1370,"line_end":1370,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749892,"byte_end":9749942,"line_start":1371,"line_end":1371,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749943,"byte_end":9749950,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749951,"byte_end":9749962,"line_start":1373,"line_end":1373,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749963,"byte_end":9749980,"line_start":1374,"line_end":1374,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9749981,"byte_end":9750011,"line_start":1375,"line_end":1375,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750474,"byte_end":9750483,"line_start":1392,"line_end":1392,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750155,"byte_end":9750176,"line_start":1381,"line_end":1381,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750177,"byte_end":9750184,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750185,"byte_end":9750208,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750209,"byte_end":9750253,"line_start":1384,"line_end":1384,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750254,"byte_end":9750299,"line_start":1385,"line_end":1385,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750300,"byte_end":9750339,"line_start":1386,"line_end":1386,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750340,"byte_end":9750372,"line_start":1387,"line_end":1387,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750373,"byte_end":9750380,"line_start":1388,"line_end":1388,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750381,"byte_end":9750392,"line_start":1389,"line_end":1389,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750393,"byte_end":9750410,"line_start":1390,"line_end":1390,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750906,"byte_end":9750917,"line_start":1407,"line_end":1407,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750559,"byte_end":9750604,"line_start":1396,"line_end":1396,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750605,"byte_end":9750612,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750613,"byte_end":9750636,"line_start":1398,"line_end":1398,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750637,"byte_end":9750681,"line_start":1399,"line_end":1399,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750682,"byte_end":9750729,"line_start":1400,"line_end":1400,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750730,"byte_end":9750771,"line_start":1401,"line_end":1401,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750772,"byte_end":9750804,"line_start":1402,"line_end":1402,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750805,"byte_end":9750812,"line_start":1403,"line_end":1403,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750813,"byte_end":9750824,"line_start":1404,"line_end":1404,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750825,"byte_end":9750842,"line_start":1405,"line_end":1405,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751425,"byte_end":9751449,"line_start":1425,"line_end":1425,"column_start":8,"column_end":32},"name":"extract_i16_as_i32_m128i","qualname":"::x86_x64::sse2::extract_i16_as_i32_m128i","value":"pub fn extract_i16_as_i32_m128i<const LANE: i32>(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets an `i16` value out of an `m128i`, returns as `i32`.","sig":null,"attributes":[{"value":"/ Gets an `i16` value out of an `m128i`, returns as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9750993,"byte_end":9751053,"line_start":1411,"line_end":1411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751054,"byte_end":9751057,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751058,"byte_end":9751107,"line_start":1413,"line_end":1413,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751108,"byte_end":9751111,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751112,"byte_end":9751119,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751120,"byte_end":9751143,"line_start":1416,"line_end":1416,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751144,"byte_end":9751206,"line_start":1417,"line_end":1417,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751207,"byte_end":9751213,"line_start":1418,"line_end":1418,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<0>(a), 0xA);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751214,"byte_end":9751268,"line_start":1419,"line_end":1419,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<1>(a), 0xB);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751269,"byte_end":9751323,"line_start":1420,"line_end":1420,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751324,"byte_end":9751331,"line_start":1421,"line_end":1421,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751332,"byte_end":9751343,"line_start":1422,"line_end":1422,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751344,"byte_end":9751361,"line_start":1423,"line_end":1423,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751976,"byte_end":9752001,"line_start":1443,"line_end":1443,"column_start":8,"column_end":33},"name":"insert_i16_from_i32_m128i","qualname":"::x86_x64::sse2::insert_i16_from_i32_m128i","value":"pub fn insert_i16_from_i32_m128i<const LANE: i32>(m128i, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the low 16 bits of an `i32` value into an `m128i`.","sig":null,"attributes":[{"value":"/ Inserts the low 16 bits of an `i32` value into an `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751531,"byte_end":9751593,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751594,"byte_end":9751597,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751598,"byte_end":9751647,"line_start":1431,"line_end":1431,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751648,"byte_end":9751651,"line_start":1432,"line_end":1432,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751652,"byte_end":9751659,"line_start":1433,"line_end":1433,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751660,"byte_end":9751683,"line_start":1434,"line_end":1434,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751684,"byte_end":9751746,"line_start":1435,"line_end":1435,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751747,"byte_end":9751753,"line_start":1436,"line_end":1436,"column_start":1,"column_end":7}},{"value":"/ let b = insert_i16_from_i32_m128i::<0>(a, -1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751754,"byte_end":9751804,"line_start":1437,"line_end":1437,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(<[i16; 8]>::from(b), [-1, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751805,"byte_end":9751874,"line_start":1438,"line_end":1438,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751875,"byte_end":9751882,"line_start":1439,"line_end":1439,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751883,"byte_end":9751894,"line_start":1440,"line_end":1440,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9751895,"byte_end":9751912,"line_start":1441,"line_end":1441,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752391,"byte_end":9752401,"line_start":1457,"line_end":1457,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752102,"byte_end":9752142,"line_start":1447,"line_end":1447,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752143,"byte_end":9752150,"line_start":1448,"line_end":1448,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752151,"byte_end":9752174,"line_start":1449,"line_end":1449,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752175,"byte_end":9752219,"line_start":1450,"line_end":1450,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752220,"byte_end":9752247,"line_start":1451,"line_end":1451,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752248,"byte_end":9752289,"line_start":1452,"line_end":1452,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752290,"byte_end":9752297,"line_start":1453,"line_end":1453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752298,"byte_end":9752309,"line_start":1454,"line_end":1454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752310,"byte_end":9752327,"line_start":1455,"line_end":1455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752855,"byte_end":9752875,"line_start":1472,"line_end":1472,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752492,"byte_end":9752551,"line_start":1461,"line_end":1461,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752552,"byte_end":9752559,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752560,"byte_end":9752583,"line_start":1463,"line_end":1463,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752584,"byte_end":9752600,"line_start":1464,"line_end":1464,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752601,"byte_end":9752638,"line_start":1465,"line_end":1465,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752639,"byte_end":9752708,"line_start":1466,"line_end":1466,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752709,"byte_end":9752716,"line_start":1467,"line_end":1467,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752717,"byte_end":9752728,"line_start":1468,"line_end":1468,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752729,"byte_end":9752746,"line_start":1469,"line_end":1469,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752747,"byte_end":9752791,"line_start":1470,"line_end":1470,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753293,"byte_end":9753309,"line_start":1487,"line_end":1487,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752935,"byte_end":9752993,"line_start":1476,"line_end":1476,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9752994,"byte_end":9753001,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753002,"byte_end":9753025,"line_start":1478,"line_end":1478,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753026,"byte_end":9753042,"line_start":1479,"line_end":1479,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753043,"byte_end":9753076,"line_start":1480,"line_end":1480,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753077,"byte_end":9753146,"line_start":1481,"line_end":1481,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753147,"byte_end":9753154,"line_start":1482,"line_end":1482,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753155,"byte_end":9753166,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753167,"byte_end":9753184,"line_start":1484,"line_end":1484,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753185,"byte_end":9753229,"line_start":1485,"line_end":1485,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753667,"byte_end":9753677,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753368,"byte_end":9753408,"line_start":1491,"line_end":1491,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753409,"byte_end":9753416,"line_start":1492,"line_end":1492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753417,"byte_end":9753440,"line_start":1493,"line_end":1493,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753441,"byte_end":9753479,"line_start":1494,"line_end":1494,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753480,"byte_end":9753507,"line_start":1495,"line_end":1495,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753508,"byte_end":9753565,"line_start":1496,"line_end":1496,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753566,"byte_end":9753573,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753574,"byte_end":9753585,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753586,"byte_end":9753603,"line_start":1499,"line_end":1499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754124,"byte_end":9754147,"line_start":1516,"line_end":1516,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753775,"byte_end":9753840,"line_start":1505,"line_end":1505,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753841,"byte_end":9753848,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753849,"byte_end":9753872,"line_start":1507,"line_end":1507,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753873,"byte_end":9753909,"line_start":1508,"line_end":1508,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753910,"byte_end":9753931,"line_start":1509,"line_end":1509,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753932,"byte_end":9753980,"line_start":1510,"line_end":1510,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9753981,"byte_end":9754022,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754023,"byte_end":9754030,"line_start":1512,"line_end":1512,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754031,"byte_end":9754042,"line_start":1513,"line_end":1513,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754043,"byte_end":9754060,"line_start":1514,"line_end":1514,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754516,"byte_end":9754532,"line_start":1530,"line_end":1530,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754222,"byte_end":9754262,"line_start":1520,"line_end":1520,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754263,"byte_end":9754270,"line_start":1521,"line_end":1521,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754271,"byte_end":9754294,"line_start":1522,"line_end":1522,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754295,"byte_end":9754331,"line_start":1523,"line_end":1523,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754332,"byte_end":9754365,"line_start":1524,"line_end":1524,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754366,"byte_end":9754414,"line_start":1525,"line_end":1525,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754415,"byte_end":9754422,"line_start":1526,"line_end":1526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754423,"byte_end":9754434,"line_start":1527,"line_end":1527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754435,"byte_end":9754452,"line_start":1528,"line_end":1528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754978,"byte_end":9755000,"line_start":1545,"line_end":1545,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754631,"byte_end":9754695,"line_start":1534,"line_end":1534,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754696,"byte_end":9754703,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754704,"byte_end":9754727,"line_start":1536,"line_end":1536,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754728,"byte_end":9754764,"line_start":1537,"line_end":1537,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754765,"byte_end":9754786,"line_start":1538,"line_end":1538,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754787,"byte_end":9754834,"line_start":1539,"line_end":1539,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754835,"byte_end":9754876,"line_start":1540,"line_end":1540,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754877,"byte_end":9754884,"line_start":1541,"line_end":1541,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754885,"byte_end":9754896,"line_start":1542,"line_end":1542,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9754897,"byte_end":9754914,"line_start":1543,"line_end":1543,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755422,"byte_end":9755440,"line_start":1559,"line_end":1559,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755075,"byte_end":9755135,"line_start":1549,"line_end":1549,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755136,"byte_end":9755143,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755144,"byte_end":9755167,"line_start":1551,"line_end":1551,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755168,"byte_end":9755212,"line_start":1552,"line_end":1552,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755213,"byte_end":9755248,"line_start":1553,"line_end":1553,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755249,"byte_end":9755320,"line_start":1554,"line_end":1554,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755321,"byte_end":9755328,"line_start":1555,"line_end":1555,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755329,"byte_end":9755340,"line_start":1556,"line_end":1556,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755341,"byte_end":9755358,"line_start":1557,"line_end":1557,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756008,"byte_end":9756028,"line_start":1577,"line_end":1577,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755532,"byte_end":9755572,"line_start":1563,"line_end":1563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755573,"byte_end":9755576,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755577,"byte_end":9755655,"line_start":1565,"line_end":1565,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755656,"byte_end":9755736,"line_start":1566,"line_end":1566,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755737,"byte_end":9755749,"line_start":1567,"line_end":1567,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755750,"byte_end":9755757,"line_start":1568,"line_end":1568,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755758,"byte_end":9755781,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755782,"byte_end":9755807,"line_start":1570,"line_end":1570,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755808,"byte_end":9755845,"line_start":1571,"line_end":1571,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755846,"byte_end":9755906,"line_start":1572,"line_end":1572,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755907,"byte_end":9755914,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755915,"byte_end":9755926,"line_start":1574,"line_end":1574,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9755927,"byte_end":9755944,"line_start":1575,"line_end":1575,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756654,"byte_end":9756674,"line_start":1596,"line_end":1596,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756126,"byte_end":9756166,"line_start":1581,"line_end":1581,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756167,"byte_end":9756170,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756171,"byte_end":9756249,"line_start":1583,"line_end":1583,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756250,"byte_end":9756323,"line_start":1584,"line_end":1584,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756324,"byte_end":9756336,"line_start":1585,"line_end":1585,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756337,"byte_end":9756344,"line_start":1586,"line_end":1586,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756345,"byte_end":9756368,"line_start":1587,"line_end":1587,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756369,"byte_end":9756437,"line_start":1588,"line_end":1588,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756438,"byte_end":9756475,"line_start":1589,"line_end":1589,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756476,"byte_end":9756515,"line_start":1590,"line_end":1590,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756516,"byte_end":9756523,"line_start":1591,"line_end":1591,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756524,"byte_end":9756535,"line_start":1592,"line_end":1592,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756536,"byte_end":9756553,"line_start":1593,"line_end":1593,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756554,"byte_end":9756590,"line_start":1594,"line_end":1594,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757255,"byte_end":9757283,"line_start":1612,"line_end":1612,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756779,"byte_end":9756857,"line_start":1600,"line_end":1600,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756858,"byte_end":9756897,"line_start":1601,"line_end":1601,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756898,"byte_end":9756905,"line_start":1602,"line_end":1602,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756906,"byte_end":9756929,"line_start":1603,"line_end":1603,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756930,"byte_end":9756988,"line_start":1604,"line_end":1604,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9756989,"byte_end":9757050,"line_start":1605,"line_end":1605,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757051,"byte_end":9757115,"line_start":1606,"line_end":1606,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757116,"byte_end":9757153,"line_start":1607,"line_end":1607,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757154,"byte_end":9757161,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757162,"byte_end":9757173,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757174,"byte_end":9757191,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757845,"byte_end":9757857,"line_start":1627,"line_end":1627,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757363,"byte_end":9757407,"line_start":1616,"line_end":1616,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757408,"byte_end":9757415,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757416,"byte_end":9757439,"line_start":1618,"line_end":1618,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757440,"byte_end":9757523,"line_start":1619,"line_end":1619,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757524,"byte_end":9757613,"line_start":1620,"line_end":1620,"column_start":1,"column_end":90}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757614,"byte_end":9757662,"line_start":1621,"line_end":1621,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757663,"byte_end":9757743,"line_start":1622,"line_end":1622,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757744,"byte_end":9757751,"line_start":1623,"line_end":1623,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757752,"byte_end":9757763,"line_start":1624,"line_end":1624,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757764,"byte_end":9757781,"line_start":1625,"line_end":1625,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758338,"byte_end":9758351,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757935,"byte_end":9757980,"line_start":1631,"line_end":1631,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757981,"byte_end":9757988,"line_start":1632,"line_end":1632,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9757989,"byte_end":9758012,"line_start":1633,"line_end":1633,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758013,"byte_end":9758071,"line_start":1634,"line_end":1634,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758072,"byte_end":9758133,"line_start":1635,"line_end":1635,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758134,"byte_end":9758183,"line_start":1636,"line_end":1636,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758184,"byte_end":9758236,"line_start":1637,"line_end":1637,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758237,"byte_end":9758244,"line_start":1638,"line_end":1638,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758245,"byte_end":9758256,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758257,"byte_end":9758274,"line_start":1640,"line_end":1640,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758746,"byte_end":9758755,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758430,"byte_end":9758455,"line_start":1646,"line_end":1646,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758456,"byte_end":9758463,"line_start":1647,"line_end":1647,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758464,"byte_end":9758487,"line_start":1648,"line_end":1648,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758488,"byte_end":9758530,"line_start":1649,"line_end":1649,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758531,"byte_end":9758573,"line_start":1650,"line_end":1650,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758574,"byte_end":9758613,"line_start":1651,"line_end":1651,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758614,"byte_end":9758644,"line_start":1652,"line_end":1652,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758645,"byte_end":9758652,"line_start":1653,"line_end":1653,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758653,"byte_end":9758664,"line_start":1654,"line_end":1654,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758665,"byte_end":9758682,"line_start":1655,"line_end":1655,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759174,"byte_end":9759185,"line_start":1672,"line_end":1672,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758831,"byte_end":9758879,"line_start":1661,"line_end":1661,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758880,"byte_end":9758887,"line_start":1662,"line_end":1662,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758888,"byte_end":9758911,"line_start":1663,"line_end":1663,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758912,"byte_end":9758955,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758956,"byte_end":9758998,"line_start":1665,"line_end":1665,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9758999,"byte_end":9759040,"line_start":1666,"line_end":1666,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759041,"byte_end":9759072,"line_start":1667,"line_end":1667,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759073,"byte_end":9759080,"line_start":1668,"line_end":1668,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759081,"byte_end":9759092,"line_start":1669,"line_end":1669,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759093,"byte_end":9759110,"line_start":1670,"line_end":1670,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759732,"byte_end":9759744,"line_start":1687,"line_end":1687,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759261,"byte_end":9759305,"line_start":1676,"line_end":1676,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759306,"byte_end":9759313,"line_start":1677,"line_end":1677,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759314,"byte_end":9759337,"line_start":1678,"line_end":1678,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759338,"byte_end":9759421,"line_start":1679,"line_end":1679,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759422,"byte_end":9759506,"line_start":1680,"line_end":1680,"column_start":1,"column_end":85}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759507,"byte_end":9759555,"line_start":1681,"line_end":1681,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759556,"byte_end":9759630,"line_start":1682,"line_end":1682,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759631,"byte_end":9759638,"line_start":1683,"line_end":1683,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759639,"byte_end":9759650,"line_start":1684,"line_end":1684,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759651,"byte_end":9759668,"line_start":1685,"line_end":1685,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760228,"byte_end":9760241,"line_start":1702,"line_end":1702,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759822,"byte_end":9759867,"line_start":1691,"line_end":1691,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759868,"byte_end":9759875,"line_start":1692,"line_end":1692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759876,"byte_end":9759899,"line_start":1693,"line_end":1693,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759900,"byte_end":9759958,"line_start":1694,"line_end":1694,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9759959,"byte_end":9760020,"line_start":1695,"line_end":1695,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760021,"byte_end":9760070,"line_start":1696,"line_end":1696,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760071,"byte_end":9760126,"line_start":1697,"line_end":1697,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760127,"byte_end":9760134,"line_start":1698,"line_end":1698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760135,"byte_end":9760146,"line_start":1699,"line_end":1699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760147,"byte_end":9760164,"line_start":1700,"line_end":1700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760637,"byte_end":9760646,"line_start":1717,"line_end":1717,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760320,"byte_end":9760345,"line_start":1706,"line_end":1706,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760346,"byte_end":9760353,"line_start":1707,"line_end":1707,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760354,"byte_end":9760377,"line_start":1708,"line_end":1708,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760378,"byte_end":9760421,"line_start":1709,"line_end":1709,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760422,"byte_end":9760464,"line_start":1710,"line_end":1710,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760465,"byte_end":9760504,"line_start":1711,"line_end":1711,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760505,"byte_end":9760535,"line_start":1712,"line_end":1712,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760536,"byte_end":9760543,"line_start":1713,"line_end":1713,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760544,"byte_end":9760555,"line_start":1714,"line_end":1714,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760556,"byte_end":9760573,"line_start":1715,"line_end":1715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761065,"byte_end":9761076,"line_start":1732,"line_end":1732,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760722,"byte_end":9760770,"line_start":1721,"line_end":1721,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760771,"byte_end":9760778,"line_start":1722,"line_end":1722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760779,"byte_end":9760802,"line_start":1723,"line_end":1723,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760803,"byte_end":9760846,"line_start":1724,"line_end":1724,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760847,"byte_end":9760889,"line_start":1725,"line_end":1725,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760890,"byte_end":9760931,"line_start":1726,"line_end":1726,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760932,"byte_end":9760963,"line_start":1727,"line_end":1727,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760964,"byte_end":9760971,"line_start":1728,"line_end":1728,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760972,"byte_end":9760983,"line_start":1729,"line_end":1729,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9760984,"byte_end":9761001,"line_start":1730,"line_end":1730,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761461,"byte_end":9761477,"line_start":1746,"line_end":1746,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761152,"byte_end":9761212,"line_start":1736,"line_end":1736,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761213,"byte_end":9761220,"line_start":1737,"line_end":1737,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761221,"byte_end":9761244,"line_start":1738,"line_end":1738,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761245,"byte_end":9761281,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761282,"byte_end":9761314,"line_start":1740,"line_end":1740,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761315,"byte_end":9761359,"line_start":1741,"line_end":1741,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761360,"byte_end":9761367,"line_start":1742,"line_end":1742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761368,"byte_end":9761379,"line_start":1743,"line_end":1743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761380,"byte_end":9761397,"line_start":1744,"line_end":1744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761912,"byte_end":9761938,"line_start":1761,"line_end":1761,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761542,"byte_end":9761616,"line_start":1750,"line_end":1750,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761617,"byte_end":9761624,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761625,"byte_end":9761648,"line_start":1752,"line_end":1752,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761649,"byte_end":9761685,"line_start":1753,"line_end":1753,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761686,"byte_end":9761722,"line_start":1754,"line_end":1754,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761723,"byte_end":9761768,"line_start":1755,"line_end":1755,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761769,"byte_end":9761810,"line_start":1756,"line_end":1756,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761811,"byte_end":9761818,"line_start":1757,"line_end":1757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761819,"byte_end":9761830,"line_start":1758,"line_end":1758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9761831,"byte_end":9761848,"line_start":1759,"line_end":1759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762429,"byte_end":9762447,"line_start":1777,"line_end":1777,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762015,"byte_end":9762058,"line_start":1765,"line_end":1765,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762059,"byte_end":9762062,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762063,"byte_end":9762126,"line_start":1767,"line_end":1767,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762127,"byte_end":9762134,"line_start":1768,"line_end":1768,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762135,"byte_end":9762158,"line_start":1769,"line_end":1769,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762159,"byte_end":9762253,"line_start":1770,"line_end":1770,"column_start":1,"column_end":95}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762254,"byte_end":9762288,"line_start":1771,"line_end":1771,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762289,"byte_end":9762327,"line_start":1772,"line_end":1772,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762328,"byte_end":9762335,"line_start":1773,"line_end":1773,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762336,"byte_end":9762347,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762348,"byte_end":9762365,"line_start":1775,"line_end":1775,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762837,"byte_end":9762852,"line_start":1793,"line_end":1793,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762506,"byte_end":9762544,"line_start":1781,"line_end":1781,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762545,"byte_end":9762548,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762549,"byte_end":9762601,"line_start":1783,"line_end":1783,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762602,"byte_end":9762609,"line_start":1784,"line_end":1784,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762610,"byte_end":9762633,"line_start":1785,"line_end":1785,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762634,"byte_end":9762678,"line_start":1786,"line_end":1786,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762679,"byte_end":9762710,"line_start":1787,"line_end":1787,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762711,"byte_end":9762735,"line_start":1788,"line_end":1788,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762736,"byte_end":9762743,"line_start":1789,"line_end":1789,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762744,"byte_end":9762755,"line_start":1790,"line_end":1790,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762756,"byte_end":9762773,"line_start":1791,"line_end":1791,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763339,"byte_end":9763362,"line_start":1809,"line_end":1809,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762909,"byte_end":9762982,"line_start":1797,"line_end":1797,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762983,"byte_end":9762986,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762987,"byte_end":9762994,"line_start":1799,"line_end":1799,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9762995,"byte_end":9763018,"line_start":1800,"line_end":1800,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763019,"byte_end":9763064,"line_start":1801,"line_end":1801,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763065,"byte_end":9763110,"line_start":1802,"line_end":1802,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763111,"byte_end":9763170,"line_start":1803,"line_end":1803,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763171,"byte_end":9763237,"line_start":1804,"line_end":1804,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763238,"byte_end":9763245,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763246,"byte_end":9763257,"line_start":1806,"line_end":1806,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763258,"byte_end":9763275,"line_start":1807,"line_end":1807,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763764,"byte_end":9763773,"line_start":1824,"line_end":1824,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763441,"byte_end":9763462,"line_start":1813,"line_end":1813,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763463,"byte_end":9763470,"line_start":1814,"line_end":1814,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763471,"byte_end":9763494,"line_start":1815,"line_end":1815,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763495,"byte_end":9763539,"line_start":1816,"line_end":1816,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763540,"byte_end":9763585,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763586,"byte_end":9763625,"line_start":1818,"line_end":1818,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763626,"byte_end":9763662,"line_start":1819,"line_end":1819,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763663,"byte_end":9763670,"line_start":1820,"line_end":1820,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763671,"byte_end":9763682,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763683,"byte_end":9763700,"line_start":1822,"line_end":1822,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764198,"byte_end":9764209,"line_start":1839,"line_end":1839,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763849,"byte_end":9763894,"line_start":1828,"line_end":1828,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763895,"byte_end":9763902,"line_start":1829,"line_end":1829,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763903,"byte_end":9763926,"line_start":1830,"line_end":1830,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763927,"byte_end":9763971,"line_start":1831,"line_end":1831,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9763972,"byte_end":9764019,"line_start":1832,"line_end":1832,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764020,"byte_end":9764061,"line_start":1833,"line_end":1833,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764062,"byte_end":9764096,"line_start":1834,"line_end":1834,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764097,"byte_end":9764104,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764105,"byte_end":9764116,"line_start":1836,"line_end":1836,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764117,"byte_end":9764134,"line_start":1837,"line_end":1837,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764754,"byte_end":9764777,"line_start":1855,"line_end":1855,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764285,"byte_end":9764358,"line_start":1843,"line_end":1843,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764359,"byte_end":9764377,"line_start":1844,"line_end":1844,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764378,"byte_end":9764385,"line_start":1845,"line_end":1845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764386,"byte_end":9764409,"line_start":1846,"line_end":1846,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764410,"byte_end":9764475,"line_start":1847,"line_end":1847,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764476,"byte_end":9764544,"line_start":1848,"line_end":1848,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764545,"byte_end":9764604,"line_start":1849,"line_end":1849,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764605,"byte_end":9764652,"line_start":1850,"line_end":1850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764653,"byte_end":9764660,"line_start":1851,"line_end":1851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764661,"byte_end":9764672,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764673,"byte_end":9764690,"line_start":1853,"line_end":1853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765329,"byte_end":9765352,"line_start":1871,"line_end":1871,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764858,"byte_end":9764931,"line_start":1859,"line_end":1859,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764932,"byte_end":9764950,"line_start":1860,"line_end":1860,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764951,"byte_end":9764958,"line_start":1861,"line_end":1861,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764959,"byte_end":9764982,"line_start":1862,"line_end":1862,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9764983,"byte_end":9765047,"line_start":1863,"line_end":1863,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765048,"byte_end":9765115,"line_start":1864,"line_end":1864,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765116,"byte_end":9765175,"line_start":1865,"line_end":1865,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765176,"byte_end":9765227,"line_start":1866,"line_end":1866,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765228,"byte_end":9765235,"line_start":1867,"line_end":1867,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765236,"byte_end":9765247,"line_start":1868,"line_end":1868,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765248,"byte_end":9765265,"line_start":1869,"line_end":1869,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765916,"byte_end":9765938,"line_start":1887,"line_end":1887,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765433,"byte_end":9765505,"line_start":1875,"line_end":1875,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765506,"byte_end":9765524,"line_start":1876,"line_end":1876,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765525,"byte_end":9765532,"line_start":1877,"line_end":1877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765533,"byte_end":9765556,"line_start":1878,"line_end":1878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765557,"byte_end":9765622,"line_start":1879,"line_end":1879,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765623,"byte_end":9765691,"line_start":1880,"line_end":1880,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765692,"byte_end":9765750,"line_start":1881,"line_end":1881,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765751,"byte_end":9765814,"line_start":1882,"line_end":1882,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765815,"byte_end":9765822,"line_start":1883,"line_end":1883,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765823,"byte_end":9765834,"line_start":1884,"line_end":1884,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9765835,"byte_end":9765852,"line_start":1885,"line_end":1885,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766332,"byte_end":9766343,"line_start":1902,"line_end":1902,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766019,"byte_end":9766039,"line_start":1891,"line_end":1891,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766040,"byte_end":9766047,"line_start":1892,"line_end":1892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766048,"byte_end":9766071,"line_start":1893,"line_end":1893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766072,"byte_end":9766114,"line_start":1894,"line_end":1894,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766115,"byte_end":9766157,"line_start":1895,"line_end":1895,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766158,"byte_end":9766199,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766200,"byte_end":9766230,"line_start":1897,"line_end":1897,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766231,"byte_end":9766238,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766239,"byte_end":9766250,"line_start":1899,"line_end":1899,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766251,"byte_end":9766268,"line_start":1900,"line_end":1900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766731,"byte_end":9766742,"line_start":1917,"line_end":1917,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766418,"byte_end":9766438,"line_start":1906,"line_end":1906,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766439,"byte_end":9766446,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766447,"byte_end":9766470,"line_start":1908,"line_end":1908,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766471,"byte_end":9766509,"line_start":1909,"line_end":1909,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766510,"byte_end":9766548,"line_start":1910,"line_end":1910,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766549,"byte_end":9766596,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766597,"byte_end":9766629,"line_start":1912,"line_end":1912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766630,"byte_end":9766637,"line_start":1913,"line_end":1913,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766638,"byte_end":9766649,"line_start":1914,"line_end":1914,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766650,"byte_end":9766667,"line_start":1915,"line_end":1915,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767265,"byte_end":9767285,"line_start":1932,"line_end":1932,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766820,"byte_end":9766878,"line_start":1921,"line_end":1921,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766879,"byte_end":9766886,"line_start":1922,"line_end":1922,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766887,"byte_end":9766910,"line_start":1923,"line_end":1923,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766911,"byte_end":9766965,"line_start":1924,"line_end":1924,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9766966,"byte_end":9767027,"line_start":1925,"line_end":1925,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767028,"byte_end":9767084,"line_start":1926,"line_end":1926,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767085,"byte_end":9767163,"line_start":1927,"line_end":1927,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767164,"byte_end":9767171,"line_start":1928,"line_end":1928,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767172,"byte_end":9767183,"line_start":1929,"line_end":1929,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767184,"byte_end":9767201,"line_start":1930,"line_end":1930,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767752,"byte_end":9767773,"line_start":1947,"line_end":1947,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767366,"byte_end":9767425,"line_start":1936,"line_end":1936,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767426,"byte_end":9767433,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767434,"byte_end":9767457,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767458,"byte_end":9767500,"line_start":1939,"line_end":1939,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767501,"byte_end":9767543,"line_start":1940,"line_end":1940,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767544,"byte_end":9767601,"line_start":1941,"line_end":1941,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767602,"byte_end":9767650,"line_start":1942,"line_end":1942,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767651,"byte_end":9767658,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767659,"byte_end":9767670,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767671,"byte_end":9767688,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768315,"byte_end":9768335,"line_start":1962,"line_end":1962,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767854,"byte_end":9767912,"line_start":1951,"line_end":1951,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767913,"byte_end":9767920,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767921,"byte_end":9767944,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9767945,"byte_end":9768003,"line_start":1954,"line_end":1954,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768004,"byte_end":9768067,"line_start":1955,"line_end":1955,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768068,"byte_end":9768124,"line_start":1956,"line_end":1956,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768125,"byte_end":9768213,"line_start":1957,"line_end":1957,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768214,"byte_end":9768221,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768222,"byte_end":9768233,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768234,"byte_end":9768251,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769066,"byte_end":9769090,"line_start":1981,"line_end":1981,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768417,"byte_end":9768464,"line_start":1966,"line_end":1966,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768465,"byte_end":9768468,"line_start":1967,"line_end":1967,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768469,"byte_end":9768538,"line_start":1968,"line_end":1968,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768539,"byte_end":9768589,"line_start":1969,"line_end":1969,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768590,"byte_end":9768642,"line_start":1970,"line_end":1970,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768643,"byte_end":9768650,"line_start":1971,"line_end":1971,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768651,"byte_end":9768674,"line_start":1972,"line_end":1972,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768675,"byte_end":9768764,"line_start":1973,"line_end":1973,"column_start":1,"column_end":90}},{"value":"/ let b = m128i::from([20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768765,"byte_end":9768868,"line_start":1974,"line_end":1974,"column_start":1,"column_end":104}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768869,"byte_end":9768929,"line_start":1975,"line_end":1975,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768930,"byte_end":9768964,"line_start":1976,"line_end":1976,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768965,"byte_end":9768972,"line_start":1977,"line_end":1977,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768973,"byte_end":9768984,"line_start":1978,"line_end":1978,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9768985,"byte_end":9769002,"line_start":1979,"line_end":1979,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769667,"byte_end":9769679,"line_start":1997,"line_end":1997,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769168,"byte_end":9769230,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769231,"byte_end":9769238,"line_start":1986,"line_end":1986,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769239,"byte_end":9769262,"line_start":1987,"line_end":1987,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769263,"byte_end":9769346,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769347,"byte_end":9769429,"line_start":1989,"line_end":1989,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769430,"byte_end":9769487,"line_start":1990,"line_end":1990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769488,"byte_end":9769495,"line_start":1991,"line_end":1991,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769496,"byte_end":9769507,"line_start":1992,"line_end":1992,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769508,"byte_end":9769525,"line_start":1993,"line_end":1993,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769526,"byte_end":9769562,"line_start":1994,"line_end":1994,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769563,"byte_end":9769603,"line_start":1995,"line_end":1995,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770329,"byte_end":9770342,"line_start":2013,"line_end":2013,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769887,"byte_end":9769949,"line_start":2001,"line_end":2001,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769950,"byte_end":9769957,"line_start":2002,"line_end":2002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769958,"byte_end":9769981,"line_start":2003,"line_end":2003,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9769982,"byte_end":9770036,"line_start":2004,"line_end":2004,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770037,"byte_end":9770091,"line_start":2005,"line_end":2005,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770092,"byte_end":9770149,"line_start":2006,"line_end":2006,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770150,"byte_end":9770157,"line_start":2007,"line_end":2007,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770158,"byte_end":9770169,"line_start":2008,"line_end":2008,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770170,"byte_end":9770187,"line_start":2009,"line_end":2009,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770188,"byte_end":9770224,"line_start":2010,"line_end":2010,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770225,"byte_end":9770265,"line_start":2011,"line_end":2011,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770811,"byte_end":9770824,"line_start":2027,"line_end":2027,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770479,"byte_end":9770541,"line_start":2017,"line_end":2017,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770542,"byte_end":9770549,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770550,"byte_end":9770573,"line_start":2019,"line_end":2019,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770574,"byte_end":9770612,"line_start":2020,"line_end":2020,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770613,"byte_end":9770651,"line_start":2021,"line_end":2021,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770652,"byte_end":9770709,"line_start":2022,"line_end":2022,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770710,"byte_end":9770717,"line_start":2023,"line_end":2023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770718,"byte_end":9770729,"line_start":2024,"line_end":2024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770730,"byte_end":9770747,"line_start":2025,"line_end":2025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771241,"byte_end":9771254,"line_start":2041,"line_end":2041,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770917,"byte_end":9770979,"line_start":2031,"line_end":2031,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770980,"byte_end":9770987,"line_start":2032,"line_end":2032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9770988,"byte_end":9771011,"line_start":2033,"line_end":2033,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771012,"byte_end":9771048,"line_start":2034,"line_end":2034,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771049,"byte_end":9771081,"line_start":2035,"line_end":2035,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771082,"byte_end":9771139,"line_start":2036,"line_end":2036,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771140,"byte_end":9771147,"line_start":2037,"line_end":2037,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771148,"byte_end":9771159,"line_start":2038,"line_end":2038,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771160,"byte_end":9771177,"line_start":2039,"line_end":2039,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771642,"byte_end":9771651,"line_start":2055,"line_end":2055,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771326,"byte_end":9771388,"line_start":2045,"line_end":2045,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771389,"byte_end":9771396,"line_start":2046,"line_end":2046,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771397,"byte_end":9771420,"line_start":2047,"line_end":2047,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771421,"byte_end":9771463,"line_start":2048,"line_end":2048,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771464,"byte_end":9771496,"line_start":2049,"line_end":2049,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771497,"byte_end":9771540,"line_start":2050,"line_end":2050,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771541,"byte_end":9771548,"line_start":2051,"line_end":2051,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771549,"byte_end":9771560,"line_start":2052,"line_end":2052,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771561,"byte_end":9771578,"line_start":2053,"line_end":2053,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772019,"byte_end":9772030,"line_start":2069,"line_end":2069,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771719,"byte_end":9771768,"line_start":2059,"line_end":2059,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771769,"byte_end":9771776,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771777,"byte_end":9771800,"line_start":2061,"line_end":2061,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771801,"byte_end":9771843,"line_start":2062,"line_end":2062,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771844,"byte_end":9771873,"line_start":2063,"line_end":2063,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771874,"byte_end":9771917,"line_start":2064,"line_end":2064,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771918,"byte_end":9771925,"line_start":2065,"line_end":2065,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771926,"byte_end":9771937,"line_start":2066,"line_end":2066,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9771938,"byte_end":9771955,"line_start":2067,"line_end":2067,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772393,"byte_end":9772408,"line_start":2083,"line_end":2083,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772087,"byte_end":9772138,"line_start":2073,"line_end":2073,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772139,"byte_end":9772146,"line_start":2074,"line_end":2074,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772147,"byte_end":9772170,"line_start":2075,"line_end":2075,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772171,"byte_end":9772213,"line_start":2076,"line_end":2076,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772214,"byte_end":9772247,"line_start":2077,"line_end":2077,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772248,"byte_end":9772291,"line_start":2078,"line_end":2078,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772292,"byte_end":9772299,"line_start":2079,"line_end":2079,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772300,"byte_end":9772311,"line_start":2080,"line_end":2080,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772312,"byte_end":9772329,"line_start":2081,"line_end":2081,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772819,"byte_end":9772837,"line_start":2097,"line_end":2097,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772466,"byte_end":9772514,"line_start":2087,"line_end":2087,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772515,"byte_end":9772522,"line_start":2088,"line_end":2088,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772523,"byte_end":9772546,"line_start":2089,"line_end":2089,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772547,"byte_end":9772624,"line_start":2090,"line_end":2090,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772625,"byte_end":9772659,"line_start":2091,"line_end":2091,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772660,"byte_end":9772717,"line_start":2092,"line_end":2092,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772718,"byte_end":9772725,"line_start":2093,"line_end":2093,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772726,"byte_end":9772737,"line_start":2094,"line_end":2094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772738,"byte_end":9772755,"line_start":2095,"line_end":2095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773228,"byte_end":9773247,"line_start":2111,"line_end":2111,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772896,"byte_end":9772945,"line_start":2101,"line_end":2101,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772946,"byte_end":9772953,"line_start":2102,"line_end":2102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772954,"byte_end":9772977,"line_start":2103,"line_end":2103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9772978,"byte_end":9773032,"line_start":2104,"line_end":2104,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773033,"byte_end":9773068,"line_start":2105,"line_end":2105,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773069,"byte_end":9773126,"line_start":2106,"line_end":2106,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773127,"byte_end":9773134,"line_start":2107,"line_end":2107,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773135,"byte_end":9773146,"line_start":2108,"line_end":2108,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773147,"byte_end":9773164,"line_start":2109,"line_end":2109,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773624,"byte_end":9773643,"line_start":2125,"line_end":2125,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773308,"byte_end":9773357,"line_start":2115,"line_end":2115,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773358,"byte_end":9773365,"line_start":2116,"line_end":2116,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773366,"byte_end":9773389,"line_start":2117,"line_end":2117,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773390,"byte_end":9773428,"line_start":2118,"line_end":2118,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773429,"byte_end":9773464,"line_start":2119,"line_end":2119,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773465,"byte_end":9773522,"line_start":2120,"line_end":2120,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773523,"byte_end":9773530,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773531,"byte_end":9773542,"line_start":2122,"line_end":2122,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773543,"byte_end":9773560,"line_start":2123,"line_end":2123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774019,"byte_end":9774038,"line_start":2139,"line_end":2139,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773704,"byte_end":9773754,"line_start":2129,"line_end":2129,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773755,"byte_end":9773762,"line_start":2130,"line_end":2130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773763,"byte_end":9773786,"line_start":2131,"line_end":2131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773787,"byte_end":9773823,"line_start":2132,"line_end":2132,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773824,"byte_end":9773859,"line_start":2133,"line_end":2133,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773860,"byte_end":9773917,"line_start":2134,"line_end":2134,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773918,"byte_end":9773925,"line_start":2135,"line_end":2135,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773926,"byte_end":9773937,"line_start":2136,"line_end":2136,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9773938,"byte_end":9773955,"line_start":2137,"line_end":2137,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774607,"byte_end":9774628,"line_start":2155,"line_end":2155,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\ni8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774100,"byte_end":9774161,"line_start":2143,"line_end":2143,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774162,"byte_end":9774169,"line_start":2144,"line_end":2144,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774170,"byte_end":9774193,"line_start":2145,"line_end":2145,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774194,"byte_end":9774277,"line_start":2146,"line_end":2146,"column_start":1,"column_end":84}},{"value":"/ let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774278,"byte_end":9774369,"line_start":2147,"line_end":2147,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774370,"byte_end":9774427,"line_start":2148,"line_end":2148,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774428,"byte_end":9774435,"line_start":2149,"line_end":2149,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774436,"byte_end":9774447,"line_start":2150,"line_end":2150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774448,"byte_end":9774465,"line_start":2151,"line_end":2151,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774466,"byte_end":9774502,"line_start":2152,"line_end":2152,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774503,"byte_end":9774543,"line_start":2153,"line_end":2153,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775287,"byte_end":9775309,"line_start":2171,"line_end":2171,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774837,"byte_end":9774898,"line_start":2159,"line_end":2159,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774899,"byte_end":9774906,"line_start":2160,"line_end":2160,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774907,"byte_end":9774930,"line_start":2161,"line_end":2161,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774931,"byte_end":9774985,"line_start":2162,"line_end":2162,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9774986,"byte_end":9775049,"line_start":2163,"line_end":2163,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775050,"byte_end":9775107,"line_start":2164,"line_end":2164,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775108,"byte_end":9775115,"line_start":2165,"line_end":2165,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775116,"byte_end":9775127,"line_start":2166,"line_end":2166,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775128,"byte_end":9775145,"line_start":2167,"line_end":2167,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775146,"byte_end":9775182,"line_start":2168,"line_end":2168,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775183,"byte_end":9775223,"line_start":2169,"line_end":2169,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775787,"byte_end":9775809,"line_start":2185,"line_end":2185,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775447,"byte_end":9775508,"line_start":2175,"line_end":2175,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775509,"byte_end":9775516,"line_start":2176,"line_end":2176,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775517,"byte_end":9775540,"line_start":2177,"line_end":2177,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775541,"byte_end":9775579,"line_start":2178,"line_end":2178,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775580,"byte_end":9775627,"line_start":2179,"line_end":2179,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775628,"byte_end":9775685,"line_start":2180,"line_end":2180,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775686,"byte_end":9775693,"line_start":2181,"line_end":2181,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775694,"byte_end":9775705,"line_start":2182,"line_end":2182,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775706,"byte_end":9775723,"line_start":2183,"line_end":2183,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776227,"byte_end":9776245,"line_start":2199,"line_end":2199,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775903,"byte_end":9775964,"line_start":2189,"line_end":2189,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775965,"byte_end":9775972,"line_start":2190,"line_end":2190,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775973,"byte_end":9775996,"line_start":2191,"line_end":2191,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9775997,"byte_end":9776039,"line_start":2192,"line_end":2192,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776040,"byte_end":9776081,"line_start":2193,"line_end":2193,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776082,"byte_end":9776125,"line_start":2194,"line_end":2194,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776126,"byte_end":9776133,"line_start":2195,"line_end":2195,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776134,"byte_end":9776145,"line_start":2196,"line_end":2196,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776146,"byte_end":9776163,"line_start":2197,"line_end":2197,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776529,"byte_end":9776541,"line_start":2212,"line_end":2212,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776314,"byte_end":9776333,"line_start":2203,"line_end":2203,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776334,"byte_end":9776341,"line_start":2204,"line_end":2204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776342,"byte_end":9776365,"line_start":2205,"line_end":2205,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776366,"byte_end":9776393,"line_start":2206,"line_end":2206,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776394,"byte_end":9776427,"line_start":2207,"line_end":2207,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776428,"byte_end":9776435,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776436,"byte_end":9776447,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776448,"byte_end":9776465,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776822,"byte_end":9776834,"line_start":2225,"line_end":2225,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776598,"byte_end":9776618,"line_start":2216,"line_end":2216,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776619,"byte_end":9776626,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776627,"byte_end":9776650,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776651,"byte_end":9776678,"line_start":2219,"line_end":2219,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776679,"byte_end":9776720,"line_start":2220,"line_end":2220,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776721,"byte_end":9776728,"line_start":2221,"line_end":2221,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776729,"byte_end":9776740,"line_start":2222,"line_end":2222,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776741,"byte_end":9776758,"line_start":2223,"line_end":2223,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777341,"byte_end":9777365,"line_start":2244,"line_end":2244,"column_start":8,"column_end":32},"name":"shuffle_ai_f32_all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_f32_all_m128i","value":"pub fn shuffle_ai_f32_all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `i32` lanes in `$a` using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `i32` lanes in `$a` using an immediate","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776888,"byte_end":9776942,"line_start":2229,"line_end":2229,"column_start":1,"column_end":55}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776943,"byte_end":9776961,"line_start":2230,"line_end":2230,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776962,"byte_end":9776965,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776966,"byte_end":9776973,"line_start":2232,"line_end":2232,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776974,"byte_end":9776997,"line_start":2233,"line_end":2233,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([6, 7, 8, 9]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9776998,"byte_end":9777036,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777037,"byte_end":9777043,"line_start":2235,"line_end":2235,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_f32_all_m128i::<0b01_10_10_00>(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777044,"byte_end":9777101,"line_start":2236,"line_end":2236,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(<[i32; 4]>::from(c), [6, 8, 8, 7]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777102,"byte_end":9777152,"line_start":2237,"line_end":2237,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777153,"byte_end":9777160,"line_start":2238,"line_end":2238,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777161,"byte_end":9777203,"line_start":2239,"line_end":2239,"column_start":1,"column_end":43}},{"value":"/ * **Assembly:** `pshufd xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777204,"byte_end":9777247,"line_start":2240,"line_end":2240,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777248,"byte_end":9777259,"line_start":2241,"line_end":2241,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777260,"byte_end":9777277,"line_start":2242,"line_end":2242,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778454,"byte_end":9778479,"line_start":2272,"line_end":2272,"column_start":8,"column_end":33},"name":"shuffle_abi_f64_all_m128d","qualname":"::x86_x64::sse2::shuffle_abi_f64_all_m128d","value":"pub fn shuffle_abi_f64_all_m128d<const MASK: i32>(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f64` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f64` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777456,"byte_end":9777530,"line_start":2248,"line_end":2248,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777531,"byte_end":9777549,"line_start":2249,"line_end":2249,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777550,"byte_end":9777553,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777554,"byte_end":9777633,"line_start":2251,"line_end":2251,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777634,"byte_end":9777711,"line_start":2252,"line_end":2252,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777712,"byte_end":9777792,"line_start":2253,"line_end":2253,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777793,"byte_end":9777796,"line_start":2254,"line_end":2254,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777797,"byte_end":9777874,"line_start":2255,"line_end":2255,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777875,"byte_end":9777952,"line_start":2256,"line_end":2256,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f64_all_m128d`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9777953,"byte_end":9778030,"line_start":2257,"line_end":2257,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778031,"byte_end":9778038,"line_start":2258,"line_end":2258,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778039,"byte_end":9778062,"line_start":2259,"line_end":2259,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778063,"byte_end":9778105,"line_start":2260,"line_end":2260,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([3.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778106,"byte_end":9778148,"line_start":2261,"line_end":2261,"column_start":1,"column_end":43}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778149,"byte_end":9778155,"line_start":2262,"line_end":2262,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b00>(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778156,"byte_end":9778219,"line_start":2263,"line_end":2263,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 3.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778220,"byte_end":9778250,"line_start":2264,"line_end":2264,"column_start":1,"column_end":31}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778251,"byte_end":9778257,"line_start":2265,"line_end":2265,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b10>(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778258,"byte_end":9778321,"line_start":2266,"line_end":2266,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778322,"byte_end":9778352,"line_start":2267,"line_end":2267,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778353,"byte_end":9778360,"line_start":2268,"line_end":2268,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778361,"byte_end":9778372,"line_start":2269,"line_end":2269,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778373,"byte_end":9778390,"line_start":2270,"line_end":2270,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779063,"byte_end":9779090,"line_start":2288,"line_end":2288,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_h64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_h64all_m128i","value":"pub fn shuffle_ai_i16_h64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the high `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);\n ```\n * **Intrinsic:** [`_mm_shufflehi_epi16`]\n * **Assembly:** `pshufhw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the high `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778582,"byte_end":9778656,"line_start":2276,"line_end":2276,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778657,"byte_end":9778664,"line_start":2277,"line_end":2277,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778665,"byte_end":9778688,"line_start":2278,"line_end":2278,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778689,"byte_end":9778743,"line_start":2279,"line_end":2279,"column_start":1,"column_end":55}},{"value":"/ let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778744,"byte_end":9778804,"line_start":2280,"line_end":2280,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778805,"byte_end":9778871,"line_start":2281,"line_end":2281,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778872,"byte_end":9778879,"line_start":2282,"line_end":2282,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflehi_epi16`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778880,"byte_end":9778924,"line_start":2283,"line_end":2283,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshufhw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778925,"byte_end":9778969,"line_start":2284,"line_end":2284,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778970,"byte_end":9778981,"line_start":2285,"line_end":2285,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9778982,"byte_end":9778999,"line_start":2286,"line_end":2286,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779670,"byte_end":9779697,"line_start":2305,"line_end":2305,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_l64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_l64all_m128i","value":"pub fn shuffle_ai_i16_l64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the low `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n //\n let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);\n ```\n * **Intrinsic:** [`_mm_shufflelo_epi16`]\n * **Assembly:** `pshuflw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the low `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779183,"byte_end":9779256,"line_start":2292,"line_end":2292,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779257,"byte_end":9779264,"line_start":2293,"line_end":2293,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779265,"byte_end":9779288,"line_start":2294,"line_end":2294,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779289,"byte_end":9779343,"line_start":2295,"line_end":2295,"column_start":1,"column_end":55}},{"value":"/ //","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779344,"byte_end":9779350,"line_start":2296,"line_end":2296,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779351,"byte_end":9779411,"line_start":2297,"line_end":2297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779412,"byte_end":9779478,"line_start":2298,"line_end":2298,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779479,"byte_end":9779486,"line_start":2299,"line_end":2299,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflelo_epi16`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779487,"byte_end":9779531,"line_start":2300,"line_end":2300,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshuflw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779532,"byte_end":9779576,"line_start":2301,"line_end":2301,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779577,"byte_end":9779588,"line_start":2302,"line_end":2302,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779589,"byte_end":9779606,"line_start":2303,"line_end":2303,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780261,"byte_end":9780278,"line_start":2322,"line_end":2322,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779790,"byte_end":9779867,"line_start":2309,"line_end":2309,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779868,"byte_end":9779871,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779872,"byte_end":9779892,"line_start":2311,"line_end":2311,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779893,"byte_end":9779900,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779901,"byte_end":9779924,"line_start":2313,"line_end":2313,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779925,"byte_end":9779979,"line_start":2314,"line_end":2314,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9779980,"byte_end":9780016,"line_start":2315,"line_end":2315,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780017,"byte_end":9780070,"line_start":2316,"line_end":2316,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780071,"byte_end":9780159,"line_start":2317,"line_end":2317,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780160,"byte_end":9780167,"line_start":2318,"line_end":2318,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780168,"byte_end":9780179,"line_start":2319,"line_end":2319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780180,"byte_end":9780197,"line_start":2320,"line_end":2320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780788,"byte_end":9780805,"line_start":2339,"line_end":2339,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780365,"byte_end":9780442,"line_start":2326,"line_end":2326,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780443,"byte_end":9780446,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780447,"byte_end":9780467,"line_start":2328,"line_end":2328,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780468,"byte_end":9780475,"line_start":2329,"line_end":2329,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780476,"byte_end":9780499,"line_start":2330,"line_end":2330,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780500,"byte_end":9780542,"line_start":2331,"line_end":2331,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780543,"byte_end":9780579,"line_start":2332,"line_end":2332,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780580,"byte_end":9780633,"line_start":2333,"line_end":2333,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780634,"byte_end":9780686,"line_start":2334,"line_end":2334,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780687,"byte_end":9780694,"line_start":2335,"line_end":2335,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780695,"byte_end":9780706,"line_start":2336,"line_end":2336,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780707,"byte_end":9780724,"line_start":2337,"line_end":2337,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781293,"byte_end":9781310,"line_start":2356,"line_end":2356,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780892,"byte_end":9780969,"line_start":2343,"line_end":2343,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780970,"byte_end":9780973,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780974,"byte_end":9780994,"line_start":2345,"line_end":2345,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9780995,"byte_end":9781002,"line_start":2346,"line_end":2346,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781003,"byte_end":9781026,"line_start":2347,"line_end":2347,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781027,"byte_end":9781063,"line_start":2348,"line_end":2348,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781064,"byte_end":9781100,"line_start":2349,"line_end":2349,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781101,"byte_end":9781154,"line_start":2350,"line_end":2350,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781155,"byte_end":9781191,"line_start":2351,"line_end":2351,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781192,"byte_end":9781199,"line_start":2352,"line_end":2352,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781200,"byte_end":9781211,"line_start":2353,"line_end":2353,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781212,"byte_end":9781229,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781783,"byte_end":9781800,"line_start":2371,"line_end":2371,"column_start":8,"column_end":25},"name":"shl_imm_u16_m128i","qualname":"::x86_x64::sse2::shl_imm_u16_m128i","value":"pub fn shl_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes left by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781397,"byte_end":9781445,"line_start":2360,"line_end":2360,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781446,"byte_end":9781449,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781450,"byte_end":9781457,"line_start":2362,"line_end":2362,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781458,"byte_end":9781481,"line_start":2363,"line_end":2363,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781482,"byte_end":9781536,"line_start":2364,"line_end":2364,"column_start":1,"column_end":55}},{"value":"/ let c: [u16; 8] = shl_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781537,"byte_end":9781592,"line_start":2365,"line_end":2365,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781593,"byte_end":9781681,"line_start":2366,"line_end":2366,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781682,"byte_end":9781689,"line_start":2367,"line_end":2367,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781690,"byte_end":9781701,"line_start":2368,"line_end":2368,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781702,"byte_end":9781719,"line_start":2369,"line_end":2369,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782220,"byte_end":9782237,"line_start":2386,"line_end":2386,"column_start":8,"column_end":25},"name":"shl_imm_u32_m128i","qualname":"::x86_x64::sse2::shl_imm_u32_m128i","value":"pub fn shl_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes left by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781886,"byte_end":9781934,"line_start":2375,"line_end":2375,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781935,"byte_end":9781938,"line_start":2376,"line_end":2376,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781939,"byte_end":9781946,"line_start":2377,"line_end":2377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781947,"byte_end":9781970,"line_start":2378,"line_end":2378,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9781971,"byte_end":9782009,"line_start":2379,"line_end":2379,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = shl_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782010,"byte_end":9782065,"line_start":2380,"line_end":2380,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782066,"byte_end":9782118,"line_start":2381,"line_end":2381,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782119,"byte_end":9782126,"line_start":2382,"line_end":2382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782127,"byte_end":9782138,"line_start":2383,"line_end":2383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782139,"byte_end":9782156,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782644,"byte_end":9782661,"line_start":2401,"line_end":2401,"column_start":8,"column_end":25},"name":"shl_imm_u64_m128i","qualname":"::x86_x64::sse2::shl_imm_u64_m128i","value":"pub fn shl_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes left by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782323,"byte_end":9782372,"line_start":2390,"line_end":2390,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782373,"byte_end":9782376,"line_start":2391,"line_end":2391,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782377,"byte_end":9782384,"line_start":2392,"line_end":2392,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782385,"byte_end":9782408,"line_start":2393,"line_end":2393,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782409,"byte_end":9782445,"line_start":2394,"line_end":2394,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782446,"byte_end":9782501,"line_start":2395,"line_end":2395,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782502,"byte_end":9782542,"line_start":2396,"line_end":2396,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782543,"byte_end":9782550,"line_start":2397,"line_end":2397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782551,"byte_end":9782562,"line_start":2398,"line_end":2398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782563,"byte_end":9782580,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783018,"byte_end":9783028,"line_start":2415,"line_end":2415,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782747,"byte_end":9782770,"line_start":2405,"line_end":2405,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782771,"byte_end":9782778,"line_start":2406,"line_end":2406,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782779,"byte_end":9782802,"line_start":2407,"line_end":2407,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782803,"byte_end":9782847,"line_start":2408,"line_end":2408,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782848,"byte_end":9782885,"line_start":2409,"line_end":2409,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782886,"byte_end":9782916,"line_start":2410,"line_end":2410,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782917,"byte_end":9782924,"line_start":2411,"line_end":2411,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782925,"byte_end":9782936,"line_start":2412,"line_end":2412,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9782937,"byte_end":9782954,"line_start":2413,"line_end":2413,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783442,"byte_end":9783454,"line_start":2430,"line_end":2430,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783090,"byte_end":9783147,"line_start":2419,"line_end":2419,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783148,"byte_end":9783155,"line_start":2420,"line_end":2420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783156,"byte_end":9783179,"line_start":2421,"line_end":2421,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783180,"byte_end":9783222,"line_start":2422,"line_end":2422,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783223,"byte_end":9783266,"line_start":2423,"line_end":2423,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783267,"byte_end":9783298,"line_start":2424,"line_end":2424,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783299,"byte_end":9783340,"line_start":2425,"line_end":2425,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783341,"byte_end":9783348,"line_start":2426,"line_end":2426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783349,"byte_end":9783360,"line_start":2427,"line_end":2427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783361,"byte_end":9783378,"line_start":2428,"line_end":2428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784021,"byte_end":9784038,"line_start":2447,"line_end":2447,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783531,"byte_end":9783609,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783610,"byte_end":9783613,"line_start":2435,"line_end":2435,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783614,"byte_end":9783644,"line_start":2436,"line_end":2436,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783645,"byte_end":9783652,"line_start":2437,"line_end":2437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783653,"byte_end":9783676,"line_start":2438,"line_end":2438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783677,"byte_end":9783735,"line_start":2439,"line_end":2439,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783736,"byte_end":9783772,"line_start":2440,"line_end":2440,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783773,"byte_end":9783826,"line_start":2441,"line_end":2441,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783827,"byte_end":9783919,"line_start":2442,"line_end":2442,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783920,"byte_end":9783927,"line_start":2443,"line_end":2443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783928,"byte_end":9783939,"line_start":2444,"line_end":2444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9783940,"byte_end":9783957,"line_start":2445,"line_end":2445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784563,"byte_end":9784580,"line_start":2464,"line_end":2464,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784125,"byte_end":9784203,"line_start":2451,"line_end":2451,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784204,"byte_end":9784207,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784208,"byte_end":9784238,"line_start":2453,"line_end":2453,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784239,"byte_end":9784246,"line_start":2454,"line_end":2454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784247,"byte_end":9784270,"line_start":2455,"line_end":2455,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784271,"byte_end":9784315,"line_start":2456,"line_end":2456,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784316,"byte_end":9784352,"line_start":2457,"line_end":2457,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784353,"byte_end":9784406,"line_start":2458,"line_end":2458,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784407,"byte_end":9784461,"line_start":2459,"line_end":2459,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784462,"byte_end":9784469,"line_start":2460,"line_end":2460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784470,"byte_end":9784481,"line_start":2461,"line_end":2461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784482,"byte_end":9784499,"line_start":2462,"line_end":2462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785097,"byte_end":9785114,"line_start":2481,"line_end":2481,"column_start":8,"column_end":25},"name":"shr_imm_i16_m128i","qualname":"::x86_x64::sse2::shr_imm_i16_m128i","value":"pub fn shr_imm_i16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784667,"byte_end":9784716,"line_start":2468,"line_end":2468,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784717,"byte_end":9784720,"line_start":2469,"line_end":2469,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784721,"byte_end":9784751,"line_start":2470,"line_end":2470,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784752,"byte_end":9784755,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784756,"byte_end":9784763,"line_start":2472,"line_end":2472,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784764,"byte_end":9784787,"line_start":2473,"line_end":2473,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784788,"byte_end":9784846,"line_start":2474,"line_end":2474,"column_start":1,"column_end":59}},{"value":"/ let c: [i16; 8] = shr_imm_i16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784847,"byte_end":9784902,"line_start":2475,"line_end":2475,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784903,"byte_end":9784995,"line_start":2476,"line_end":2476,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9784996,"byte_end":9785003,"line_start":2477,"line_end":2477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785004,"byte_end":9785015,"line_start":2478,"line_end":2478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785016,"byte_end":9785033,"line_start":2479,"line_end":2479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785574,"byte_end":9785591,"line_start":2498,"line_end":2498,"column_start":8,"column_end":25},"name":"shr_imm_i32_m128i","qualname":"::x86_x64::sse2::shr_imm_i32_m128i","value":"pub fn shr_imm_i32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785200,"byte_end":9785249,"line_start":2485,"line_end":2485,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785250,"byte_end":9785253,"line_start":2486,"line_end":2486,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785254,"byte_end":9785284,"line_start":2487,"line_end":2487,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785285,"byte_end":9785288,"line_start":2488,"line_end":2488,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785289,"byte_end":9785296,"line_start":2489,"line_end":2489,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785297,"byte_end":9785320,"line_start":2490,"line_end":2490,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785321,"byte_end":9785361,"line_start":2491,"line_end":2491,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = shr_imm_i32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785362,"byte_end":9785417,"line_start":2492,"line_end":2492,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785418,"byte_end":9785472,"line_start":2493,"line_end":2493,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785473,"byte_end":9785480,"line_start":2494,"line_end":2494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785481,"byte_end":9785492,"line_start":2495,"line_end":2495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785493,"byte_end":9785510,"line_start":2496,"line_end":2496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786145,"byte_end":9786162,"line_start":2514,"line_end":2514,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785677,"byte_end":9785755,"line_start":2502,"line_end":2502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785756,"byte_end":9785759,"line_start":2503,"line_end":2503,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785760,"byte_end":9785767,"line_start":2504,"line_end":2504,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785768,"byte_end":9785791,"line_start":2505,"line_end":2505,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785792,"byte_end":9785854,"line_start":2506,"line_end":2506,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785855,"byte_end":9785891,"line_start":2507,"line_end":2507,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785892,"byte_end":9785945,"line_start":2508,"line_end":2508,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9785946,"byte_end":9786043,"line_start":2509,"line_end":2509,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786044,"byte_end":9786051,"line_start":2510,"line_end":2510,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786052,"byte_end":9786063,"line_start":2511,"line_end":2511,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786064,"byte_end":9786081,"line_start":2512,"line_end":2512,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786661,"byte_end":9786678,"line_start":2530,"line_end":2530,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786249,"byte_end":9786327,"line_start":2518,"line_end":2518,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786328,"byte_end":9786331,"line_start":2519,"line_end":2519,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786332,"byte_end":9786339,"line_start":2520,"line_end":2520,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786340,"byte_end":9786363,"line_start":2521,"line_end":2521,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786364,"byte_end":9786410,"line_start":2522,"line_end":2522,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786411,"byte_end":9786447,"line_start":2523,"line_end":2523,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786448,"byte_end":9786501,"line_start":2524,"line_end":2524,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786502,"byte_end":9786559,"line_start":2525,"line_end":2525,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786560,"byte_end":9786567,"line_start":2526,"line_end":2526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786568,"byte_end":9786579,"line_start":2527,"line_end":2527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786580,"byte_end":9786597,"line_start":2528,"line_end":2528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787169,"byte_end":9787186,"line_start":2547,"line_end":2547,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786765,"byte_end":9786843,"line_start":2534,"line_end":2534,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786844,"byte_end":9786847,"line_start":2535,"line_end":2535,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786848,"byte_end":9786868,"line_start":2536,"line_end":2536,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786869,"byte_end":9786876,"line_start":2537,"line_end":2537,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786877,"byte_end":9786900,"line_start":2538,"line_end":2538,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786901,"byte_end":9786938,"line_start":2539,"line_end":2539,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786939,"byte_end":9786975,"line_start":2540,"line_end":2540,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9786976,"byte_end":9787029,"line_start":2541,"line_end":2541,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787030,"byte_end":9787067,"line_start":2542,"line_end":2542,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787068,"byte_end":9787075,"line_start":2543,"line_end":2543,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787076,"byte_end":9787087,"line_start":2544,"line_end":2544,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787088,"byte_end":9787105,"line_start":2545,"line_end":2545,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787780,"byte_end":9787797,"line_start":2566,"line_end":2566,"column_start":8,"column_end":25},"name":"shr_imm_u16_m128i","qualname":"::x86_x64::sse2::shr_imm_u16_m128i","value":"pub fn shr_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787273,"byte_end":9787322,"line_start":2551,"line_end":2551,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787323,"byte_end":9787326,"line_start":2552,"line_end":2552,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787327,"byte_end":9787347,"line_start":2553,"line_end":2553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787348,"byte_end":9787351,"line_start":2554,"line_end":2554,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787352,"byte_end":9787359,"line_start":2555,"line_end":2555,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787360,"byte_end":9787383,"line_start":2556,"line_end":2556,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787384,"byte_end":9787446,"line_start":2557,"line_end":2557,"column_start":1,"column_end":63}},{"value":"/ let c: [u16; 8] = shr_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787447,"byte_end":9787502,"line_start":2558,"line_end":2558,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787503,"byte_end":9787600,"line_start":2559,"line_end":2559,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787601,"byte_end":9787608,"line_start":2560,"line_end":2560,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi16`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787609,"byte_end":9787648,"line_start":2561,"line_end":2561,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlw xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787649,"byte_end":9787686,"line_start":2562,"line_end":2562,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787687,"byte_end":9787698,"line_start":2563,"line_end":2563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787699,"byte_end":9787716,"line_start":2564,"line_end":2564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788304,"byte_end":9788321,"line_start":2583,"line_end":2583,"column_start":8,"column_end":25},"name":"shr_imm_u32_m128i","qualname":"::x86_x64::sse2::shr_imm_u32_m128i","value":"pub fn shr_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787883,"byte_end":9787932,"line_start":2570,"line_end":2570,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787933,"byte_end":9787936,"line_start":2571,"line_end":2571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787937,"byte_end":9787944,"line_start":2572,"line_end":2572,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787945,"byte_end":9787968,"line_start":2573,"line_end":2573,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 300, 400]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9787969,"byte_end":9788011,"line_start":2574,"line_end":2574,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = shr_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788012,"byte_end":9788067,"line_start":2575,"line_end":2575,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788068,"byte_end":9788124,"line_start":2576,"line_end":2576,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788125,"byte_end":9788132,"line_start":2577,"line_end":2577,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi32`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788133,"byte_end":9788172,"line_start":2578,"line_end":2578,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrld xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788173,"byte_end":9788210,"line_start":2579,"line_end":2579,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788211,"byte_end":9788222,"line_start":2580,"line_end":2580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788223,"byte_end":9788240,"line_start":2581,"line_end":2581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788811,"byte_end":9788828,"line_start":2600,"line_end":2600,"column_start":8,"column_end":25},"name":"shr_imm_u64_m128i","qualname":"::x86_x64::sse2::shr_imm_u64_m128i","value":"pub fn shr_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes right by an immediate.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788407,"byte_end":9788457,"line_start":2587,"line_end":2587,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788458,"byte_end":9788461,"line_start":2588,"line_end":2588,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788462,"byte_end":9788469,"line_start":2589,"line_end":2589,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788470,"byte_end":9788493,"line_start":2590,"line_end":2590,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 200]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788494,"byte_end":9788532,"line_start":2591,"line_end":2591,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = shr_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788533,"byte_end":9788588,"line_start":2592,"line_end":2592,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 >> 3, 200 >> 3]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788589,"byte_end":9788631,"line_start":2593,"line_end":2593,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788632,"byte_end":9788639,"line_start":2594,"line_end":2594,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi64`]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788640,"byte_end":9788679,"line_start":2595,"line_end":2595,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlq xmm, imm8`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788680,"byte_end":9788717,"line_start":2596,"line_end":2596,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788718,"byte_end":9788729,"line_start":2597,"line_end":2597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788730,"byte_end":9788747,"line_start":2598,"line_end":2598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789244,"byte_end":9789255,"line_start":2615,"line_end":2615,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788914,"byte_end":9788958,"line_start":2604,"line_end":2604,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788959,"byte_end":9788966,"line_start":2605,"line_end":2605,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788967,"byte_end":9788990,"line_start":2606,"line_end":2606,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9788991,"byte_end":9789035,"line_start":2607,"line_end":2607,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789036,"byte_end":9789067,"line_start":2608,"line_end":2608,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789068,"byte_end":9789095,"line_start":2609,"line_end":2609,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789096,"byte_end":9789121,"line_start":2610,"line_end":2610,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789122,"byte_end":9789154,"line_start":2611,"line_end":2611,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789155,"byte_end":9789162,"line_start":2612,"line_end":2612,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789163,"byte_end":9789180,"line_start":2613,"line_end":2613,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789642,"byte_end":9789655,"line_start":2629,"line_end":2629,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789346,"byte_end":9789399,"line_start":2619,"line_end":2619,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789400,"byte_end":9789407,"line_start":2620,"line_end":2620,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789408,"byte_end":9789431,"line_start":2621,"line_end":2621,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789432,"byte_end":9789476,"line_start":2622,"line_end":2622,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789477,"byte_end":9789497,"line_start":2623,"line_end":2623,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789498,"byte_end":9789527,"line_start":2624,"line_end":2624,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789528,"byte_end":9789552,"line_start":2625,"line_end":2625,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789553,"byte_end":9789560,"line_start":2626,"line_end":2626,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789561,"byte_end":9789578,"line_start":2627,"line_end":2627,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790088,"byte_end":9790105,"line_start":2644,"line_end":2644,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789730,"byte_end":9789796,"line_start":2633,"line_end":2633,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789797,"byte_end":9789804,"line_start":2634,"line_end":2634,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789805,"byte_end":9789828,"line_start":2635,"line_end":2635,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789829,"byte_end":9789873,"line_start":2636,"line_end":2636,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789874,"byte_end":9789905,"line_start":2637,"line_end":2637,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789906,"byte_end":9789939,"line_start":2638,"line_end":2638,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789940,"byte_end":9789965,"line_start":2639,"line_end":2639,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789966,"byte_end":9789998,"line_start":2640,"line_end":2640,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9789999,"byte_end":9790006,"line_start":2641,"line_end":2641,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790007,"byte_end":9790024,"line_start":2642,"line_end":2642,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790527,"byte_end":9790538,"line_start":2659,"line_end":2659,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790197,"byte_end":9790241,"line_start":2648,"line_end":2648,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790242,"byte_end":9790249,"line_start":2649,"line_end":2649,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790250,"byte_end":9790273,"line_start":2650,"line_end":2650,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790274,"byte_end":9790312,"line_start":2651,"line_end":2651,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790313,"byte_end":9790344,"line_start":2652,"line_end":2652,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790345,"byte_end":9790372,"line_start":2653,"line_end":2653,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790373,"byte_end":9790404,"line_start":2654,"line_end":2654,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790405,"byte_end":9790437,"line_start":2655,"line_end":2655,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790438,"byte_end":9790445,"line_start":2656,"line_end":2656,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790446,"byte_end":9790463,"line_start":2657,"line_end":2657,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790915,"byte_end":9790933,"line_start":2673,"line_end":2673,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790613,"byte_end":9790667,"line_start":2663,"line_end":2663,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790668,"byte_end":9790675,"line_start":2664,"line_end":2664,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790676,"byte_end":9790699,"line_start":2665,"line_end":2665,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790700,"byte_end":9790744,"line_start":2666,"line_end":2666,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790745,"byte_end":9790765,"line_start":2667,"line_end":2667,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790766,"byte_end":9790800,"line_start":2668,"line_end":2668,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790801,"byte_end":9790825,"line_start":2669,"line_end":2669,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790826,"byte_end":9790833,"line_start":2670,"line_end":2670,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9790834,"byte_end":9790851,"line_start":2671,"line_end":2671,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791332,"byte_end":9791349,"line_start":2688,"line_end":2688,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791009,"byte_end":9791053,"line_start":2677,"line_end":2677,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791054,"byte_end":9791061,"line_start":2678,"line_end":2678,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791062,"byte_end":9791085,"line_start":2679,"line_end":2679,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791086,"byte_end":9791122,"line_start":2680,"line_end":2680,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791123,"byte_end":9791145,"line_start":2681,"line_end":2681,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791146,"byte_end":9791179,"line_start":2682,"line_end":2682,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791180,"byte_end":9791205,"line_start":2683,"line_end":2683,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791206,"byte_end":9791213,"line_start":2684,"line_end":2684,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791214,"byte_end":9791231,"line_start":2685,"line_end":2685,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791232,"byte_end":9791268,"line_start":2686,"line_end":2686,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791783,"byte_end":9791803,"line_start":2703,"line_end":2703,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791444,"byte_end":9791488,"line_start":2692,"line_end":2692,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791489,"byte_end":9791496,"line_start":2693,"line_end":2693,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791497,"byte_end":9791520,"line_start":2694,"line_end":2694,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791521,"byte_end":9791565,"line_start":2695,"line_end":2695,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791566,"byte_end":9791597,"line_start":2696,"line_end":2696,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791598,"byte_end":9791634,"line_start":2697,"line_end":2697,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791635,"byte_end":9791660,"line_start":2698,"line_end":2698,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791661,"byte_end":9791693,"line_start":2699,"line_end":2699,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791694,"byte_end":9791701,"line_start":2700,"line_end":2700,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791702,"byte_end":9791719,"line_start":2701,"line_end":2701,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792205,"byte_end":9792226,"line_start":2717,"line_end":2717,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791895,"byte_end":9791939,"line_start":2707,"line_end":2707,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791940,"byte_end":9791947,"line_start":2708,"line_end":2708,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791948,"byte_end":9791971,"line_start":2709,"line_end":2709,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9791972,"byte_end":9792016,"line_start":2710,"line_end":2710,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792017,"byte_end":9792044,"line_start":2711,"line_end":2711,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792045,"byte_end":9792082,"line_start":2712,"line_end":2712,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792083,"byte_end":9792115,"line_start":2713,"line_end":2713,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792116,"byte_end":9792123,"line_start":2714,"line_end":2714,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792124,"byte_end":9792141,"line_start":2715,"line_end":2715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792702,"byte_end":9792723,"line_start":2731,"line_end":2731,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792308,"byte_end":9792352,"line_start":2721,"line_end":2721,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792353,"byte_end":9792360,"line_start":2722,"line_end":2722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792361,"byte_end":9792384,"line_start":2723,"line_end":2723,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792385,"byte_end":9792468,"line_start":2724,"line_end":2724,"column_start":1,"column_end":84}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792469,"byte_end":9792496,"line_start":2725,"line_end":2725,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792497,"byte_end":9792534,"line_start":2726,"line_end":2726,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792535,"byte_end":9792612,"line_start":2727,"line_end":2727,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792613,"byte_end":9792620,"line_start":2728,"line_end":2728,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792621,"byte_end":9792638,"line_start":2729,"line_end":2729,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793304,"byte_end":9793316,"line_start":2746,"line_end":2746,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792815,"byte_end":9792855,"line_start":2735,"line_end":2735,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792856,"byte_end":9792863,"line_start":2736,"line_end":2736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792864,"byte_end":9792887,"line_start":2737,"line_end":2737,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792888,"byte_end":9792971,"line_start":2738,"line_end":2738,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9792972,"byte_end":9793063,"line_start":2739,"line_end":2739,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793064,"byte_end":9793112,"line_start":2740,"line_end":2740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793113,"byte_end":9793202,"line_start":2741,"line_end":2741,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793203,"byte_end":9793210,"line_start":2742,"line_end":2742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793211,"byte_end":9793222,"line_start":2743,"line_end":2743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793223,"byte_end":9793240,"line_start":2744,"line_end":2744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793802,"byte_end":9793815,"line_start":2761,"line_end":2761,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793394,"byte_end":9793435,"line_start":2750,"line_end":2750,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793436,"byte_end":9793443,"line_start":2751,"line_end":2751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793444,"byte_end":9793467,"line_start":2752,"line_end":2752,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793468,"byte_end":9793526,"line_start":2753,"line_end":2753,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793527,"byte_end":9793592,"line_start":2754,"line_end":2754,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793593,"byte_end":9793642,"line_start":2755,"line_end":2755,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793643,"byte_end":9793700,"line_start":2756,"line_end":2756,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793701,"byte_end":9793708,"line_start":2757,"line_end":2757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793709,"byte_end":9793720,"line_start":2758,"line_end":2758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793721,"byte_end":9793738,"line_start":2759,"line_end":2759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794242,"byte_end":9794255,"line_start":2776,"line_end":2776,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793894,"byte_end":9793935,"line_start":2765,"line_end":2765,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793936,"byte_end":9793943,"line_start":2766,"line_end":2766,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793944,"byte_end":9793967,"line_start":2767,"line_end":2767,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9793968,"byte_end":9794006,"line_start":2768,"line_end":2768,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794007,"byte_end":9794049,"line_start":2769,"line_end":2769,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794050,"byte_end":9794099,"line_start":2770,"line_end":2770,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794100,"byte_end":9794140,"line_start":2771,"line_end":2771,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794141,"byte_end":9794148,"line_start":2772,"line_end":2772,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794149,"byte_end":9794160,"line_start":2773,"line_end":2773,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794161,"byte_end":9794178,"line_start":2774,"line_end":2774,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794670,"byte_end":9794683,"line_start":2791,"line_end":2791,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794334,"byte_end":9794375,"line_start":2780,"line_end":2780,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794376,"byte_end":9794383,"line_start":2781,"line_end":2781,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794384,"byte_end":9794407,"line_start":2782,"line_end":2782,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794408,"byte_end":9794446,"line_start":2783,"line_end":2783,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794447,"byte_end":9794487,"line_start":2784,"line_end":2784,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794488,"byte_end":9794537,"line_start":2785,"line_end":2785,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794538,"byte_end":9794568,"line_start":2786,"line_end":2786,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794569,"byte_end":9794576,"line_start":2787,"line_end":2787,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794577,"byte_end":9794588,"line_start":2788,"line_end":2788,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794589,"byte_end":9794606,"line_start":2789,"line_end":2789,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795081,"byte_end":9795090,"line_start":2806,"line_end":2806,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794762,"byte_end":9794783,"line_start":2795,"line_end":2795,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794784,"byte_end":9794791,"line_start":2796,"line_end":2796,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794792,"byte_end":9794815,"line_start":2797,"line_end":2797,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794816,"byte_end":9794860,"line_start":2798,"line_end":2798,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794861,"byte_end":9794906,"line_start":2799,"line_end":2799,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794907,"byte_end":9794946,"line_start":2800,"line_end":2800,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794947,"byte_end":9794979,"line_start":2801,"line_end":2801,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794980,"byte_end":9794987,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9794988,"byte_end":9794999,"line_start":2803,"line_end":2803,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795000,"byte_end":9795017,"line_start":2804,"line_end":2804,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795513,"byte_end":9795524,"line_start":2821,"line_end":2821,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795166,"byte_end":9795211,"line_start":2810,"line_end":2810,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795212,"byte_end":9795219,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795220,"byte_end":9795243,"line_start":2812,"line_end":2812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795244,"byte_end":9795288,"line_start":2813,"line_end":2813,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795289,"byte_end":9795336,"line_start":2814,"line_end":2814,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795337,"byte_end":9795378,"line_start":2815,"line_end":2815,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795379,"byte_end":9795411,"line_start":2816,"line_end":2816,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795412,"byte_end":9795419,"line_start":2817,"line_end":2817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795420,"byte_end":9795431,"line_start":2818,"line_end":2818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795432,"byte_end":9795449,"line_start":2819,"line_end":2819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796116,"byte_end":9796139,"line_start":2836,"line_end":2836,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795600,"byte_end":9795651,"line_start":2825,"line_end":2825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795652,"byte_end":9795659,"line_start":2826,"line_end":2826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795660,"byte_end":9795683,"line_start":2827,"line_end":2827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795684,"byte_end":9795772,"line_start":2828,"line_end":2828,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795773,"byte_end":9795863,"line_start":2829,"line_end":2829,"column_start":1,"column_end":91}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795864,"byte_end":9795923,"line_start":2830,"line_end":2830,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9795924,"byte_end":9796014,"line_start":2831,"line_end":2831,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796015,"byte_end":9796022,"line_start":2832,"line_end":2832,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796023,"byte_end":9796034,"line_start":2833,"line_end":2833,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796035,"byte_end":9796052,"line_start":2834,"line_end":2834,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796657,"byte_end":9796681,"line_start":2851,"line_end":2851,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796218,"byte_end":9796270,"line_start":2840,"line_end":2840,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796271,"byte_end":9796278,"line_start":2841,"line_end":2841,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796279,"byte_end":9796302,"line_start":2842,"line_end":2842,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796303,"byte_end":9796361,"line_start":2843,"line_end":2843,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796362,"byte_end":9796432,"line_start":2844,"line_end":2844,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796433,"byte_end":9796493,"line_start":2845,"line_end":2845,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796494,"byte_end":9796555,"line_start":2846,"line_end":2846,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796556,"byte_end":9796563,"line_start":2847,"line_end":2847,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796564,"byte_end":9796575,"line_start":2848,"line_end":2848,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796576,"byte_end":9796593,"line_start":2849,"line_end":2849,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797259,"byte_end":9797282,"line_start":2866,"line_end":2866,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796761,"byte_end":9796812,"line_start":2855,"line_end":2855,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796813,"byte_end":9796820,"line_start":2856,"line_end":2856,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796821,"byte_end":9796844,"line_start":2857,"line_end":2857,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796845,"byte_end":9796932,"line_start":2858,"line_end":2858,"column_start":1,"column_end":88}},{"value":"/ let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9796933,"byte_end":9797021,"line_start":2859,"line_end":2859,"column_start":1,"column_end":89}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797022,"byte_end":9797081,"line_start":2860,"line_end":2860,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797082,"byte_end":9797157,"line_start":2861,"line_end":2861,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797158,"byte_end":9797165,"line_start":2862,"line_end":2862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797166,"byte_end":9797177,"line_start":2863,"line_end":2863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797178,"byte_end":9797195,"line_start":2864,"line_end":2864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797806,"byte_end":9797830,"line_start":2881,"line_end":2881,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797361,"byte_end":9797413,"line_start":2870,"line_end":2870,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797414,"byte_end":9797421,"line_start":2871,"line_end":2871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797422,"byte_end":9797445,"line_start":2872,"line_end":2872,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797446,"byte_end":9797516,"line_start":2873,"line_end":2873,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797517,"byte_end":9797589,"line_start":2874,"line_end":2874,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797590,"byte_end":9797650,"line_start":2875,"line_end":2875,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797651,"byte_end":9797704,"line_start":2876,"line_end":2876,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797705,"byte_end":9797712,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797713,"byte_end":9797724,"line_start":2878,"line_end":2878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797725,"byte_end":9797742,"line_start":2879,"line_end":2879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798419,"byte_end":9798439,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797910,"byte_end":9797967,"line_start":2885,"line_end":2885,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797968,"byte_end":9797975,"line_start":2886,"line_end":2886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9797976,"byte_end":9797999,"line_start":2887,"line_end":2887,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798000,"byte_end":9798083,"line_start":2888,"line_end":2888,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798084,"byte_end":9798175,"line_start":2889,"line_end":2889,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798176,"byte_end":9798232,"line_start":2890,"line_end":2890,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798233,"byte_end":9798317,"line_start":2891,"line_end":2891,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798318,"byte_end":9798325,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798326,"byte_end":9798337,"line_start":2893,"line_end":2893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798338,"byte_end":9798355,"line_start":2894,"line_end":2894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798949,"byte_end":9798970,"line_start":2911,"line_end":2911,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798522,"byte_end":9798580,"line_start":2900,"line_end":2900,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798581,"byte_end":9798588,"line_start":2901,"line_end":2901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798589,"byte_end":9798612,"line_start":2902,"line_end":2902,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798613,"byte_end":9798671,"line_start":2903,"line_end":2903,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798672,"byte_end":9798733,"line_start":2904,"line_end":2904,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798734,"byte_end":9798791,"line_start":2905,"line_end":2905,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798792,"byte_end":9798847,"line_start":2906,"line_end":2906,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798848,"byte_end":9798855,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798856,"byte_end":9798867,"line_start":2908,"line_end":2908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9798868,"byte_end":9798885,"line_start":2909,"line_end":2909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799415,"byte_end":9799436,"line_start":2926,"line_end":2926,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799054,"byte_end":9799112,"line_start":2915,"line_end":2915,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799113,"byte_end":9799120,"line_start":2916,"line_end":2916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799121,"byte_end":9799144,"line_start":2917,"line_end":2917,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799145,"byte_end":9799183,"line_start":2918,"line_end":2918,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799184,"byte_end":9799222,"line_start":2919,"line_end":2919,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799223,"byte_end":9799280,"line_start":2920,"line_end":2920,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799281,"byte_end":9799313,"line_start":2921,"line_end":2921,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799314,"byte_end":9799321,"line_start":2922,"line_end":2922,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799322,"byte_end":9799333,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799334,"byte_end":9799351,"line_start":2924,"line_end":2924,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799878,"byte_end":9799899,"line_start":2941,"line_end":2941,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799520,"byte_end":9799578,"line_start":2930,"line_end":2930,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799579,"byte_end":9799586,"line_start":2931,"line_end":2931,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799587,"byte_end":9799610,"line_start":2932,"line_end":2932,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799611,"byte_end":9799649,"line_start":2933,"line_end":2933,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799650,"byte_end":9799690,"line_start":2934,"line_end":2934,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799691,"byte_end":9799748,"line_start":2935,"line_end":2935,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799749,"byte_end":9799776,"line_start":2936,"line_end":2936,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799777,"byte_end":9799784,"line_start":2937,"line_end":2937,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799785,"byte_end":9799796,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799797,"byte_end":9799814,"line_start":2939,"line_end":2939,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800341,"byte_end":9800358,"line_start":2956,"line_end":2956,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9799983,"byte_end":9800035,"line_start":2945,"line_end":2945,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800036,"byte_end":9800043,"line_start":2946,"line_end":2946,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800044,"byte_end":9800067,"line_start":2947,"line_end":2947,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800068,"byte_end":9800112,"line_start":2948,"line_end":2948,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800113,"byte_end":9800158,"line_start":2949,"line_end":2949,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800159,"byte_end":9800206,"line_start":2950,"line_end":2950,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800207,"byte_end":9800239,"line_start":2951,"line_end":2951,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800240,"byte_end":9800247,"line_start":2952,"line_end":2952,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800248,"byte_end":9800259,"line_start":2953,"line_end":2953,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800260,"byte_end":9800277,"line_start":2954,"line_end":2954,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800942,"byte_end":9800961,"line_start":2971,"line_end":2971,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800439,"byte_end":9800495,"line_start":2960,"line_end":2960,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800496,"byte_end":9800503,"line_start":2961,"line_end":2961,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800504,"byte_end":9800527,"line_start":2962,"line_end":2962,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800528,"byte_end":9800611,"line_start":2963,"line_end":2963,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800612,"byte_end":9800707,"line_start":2964,"line_end":2964,"column_start":1,"column_end":96}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800708,"byte_end":9800763,"line_start":2965,"line_end":2965,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800764,"byte_end":9800840,"line_start":2966,"line_end":2966,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800841,"byte_end":9800848,"line_start":2967,"line_end":2967,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800849,"byte_end":9800860,"line_start":2968,"line_end":2968,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9800861,"byte_end":9800878,"line_start":2969,"line_end":2969,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801458,"byte_end":9801478,"line_start":2986,"line_end":2986,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801044,"byte_end":9801101,"line_start":2975,"line_end":2975,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801102,"byte_end":9801109,"line_start":2976,"line_end":2976,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801110,"byte_end":9801133,"line_start":2977,"line_end":2977,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801134,"byte_end":9801192,"line_start":2978,"line_end":2978,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801193,"byte_end":9801254,"line_start":2979,"line_end":2979,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801255,"byte_end":9801311,"line_start":2980,"line_end":2980,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801312,"byte_end":9801356,"line_start":2981,"line_end":2981,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801357,"byte_end":9801364,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801365,"byte_end":9801376,"line_start":2983,"line_end":2983,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801377,"byte_end":9801394,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801921,"byte_end":9801941,"line_start":3001,"line_end":3001,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801562,"byte_end":9801619,"line_start":2990,"line_end":2990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801620,"byte_end":9801627,"line_start":2991,"line_end":2991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801628,"byte_end":9801651,"line_start":2992,"line_end":2992,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801652,"byte_end":9801690,"line_start":2993,"line_end":2993,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801691,"byte_end":9801729,"line_start":2994,"line_end":2994,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801730,"byte_end":9801786,"line_start":2995,"line_end":2995,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801787,"byte_end":9801819,"line_start":2996,"line_end":2996,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801820,"byte_end":9801827,"line_start":2997,"line_end":2997,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801828,"byte_end":9801839,"line_start":2998,"line_end":2998,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9801840,"byte_end":9801857,"line_start":2999,"line_end":2999,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802385,"byte_end":9802405,"line_start":3016,"line_end":3016,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802025,"byte_end":9802082,"line_start":3005,"line_end":3005,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802083,"byte_end":9802090,"line_start":3006,"line_end":3006,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802091,"byte_end":9802114,"line_start":3007,"line_end":3007,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802115,"byte_end":9802153,"line_start":3008,"line_end":3008,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802154,"byte_end":9802194,"line_start":3009,"line_end":3009,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802195,"byte_end":9802251,"line_start":3010,"line_end":3010,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802252,"byte_end":9802283,"line_start":3011,"line_end":3011,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802284,"byte_end":9802291,"line_start":3012,"line_end":3012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802292,"byte_end":9802303,"line_start":3013,"line_end":3013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802304,"byte_end":9802321,"line_start":3014,"line_end":3014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802846,"byte_end":9802862,"line_start":3031,"line_end":3031,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802489,"byte_end":9802540,"line_start":3020,"line_end":3020,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802541,"byte_end":9802548,"line_start":3021,"line_end":3021,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802549,"byte_end":9802572,"line_start":3022,"line_end":3022,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802573,"byte_end":9802617,"line_start":3023,"line_end":3023,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802618,"byte_end":9802663,"line_start":3024,"line_end":3024,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802664,"byte_end":9802710,"line_start":3025,"line_end":3025,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802711,"byte_end":9802744,"line_start":3026,"line_end":3026,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802745,"byte_end":9802752,"line_start":3027,"line_end":3027,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802753,"byte_end":9802764,"line_start":3028,"line_end":3028,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802765,"byte_end":9802782,"line_start":3029,"line_end":3029,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803257,"byte_end":9803269,"line_start":3046,"line_end":3046,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802943,"byte_end":9802963,"line_start":3035,"line_end":3035,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802964,"byte_end":9802971,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802972,"byte_end":9802995,"line_start":3037,"line_end":3037,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9802996,"byte_end":9803038,"line_start":3038,"line_end":3038,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803039,"byte_end":9803081,"line_start":3039,"line_end":3039,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803082,"byte_end":9803124,"line_start":3040,"line_end":3040,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803125,"byte_end":9803155,"line_start":3041,"line_end":3041,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803156,"byte_end":9803163,"line_start":3042,"line_end":3042,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803164,"byte_end":9803175,"line_start":3043,"line_end":3043,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803176,"byte_end":9803193,"line_start":3044,"line_end":3044,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803659,"byte_end":9803671,"line_start":3061,"line_end":3061,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803345,"byte_end":9803365,"line_start":3050,"line_end":3050,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803366,"byte_end":9803373,"line_start":3051,"line_end":3051,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803374,"byte_end":9803397,"line_start":3052,"line_end":3052,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803398,"byte_end":9803436,"line_start":3053,"line_end":3053,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803437,"byte_end":9803475,"line_start":3054,"line_end":3054,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803476,"byte_end":9803524,"line_start":3055,"line_end":3055,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803525,"byte_end":9803557,"line_start":3056,"line_end":3056,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803558,"byte_end":9803565,"line_start":3057,"line_end":3057,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803566,"byte_end":9803577,"line_start":3058,"line_end":3058,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9803578,"byte_end":9803595,"line_start":3059,"line_end":3059,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":10541,"byte_end":10563,"line_start":233,"line_end":233,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11408,"byte_end":11432,"line_start":253,"line_end":253,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11723,"byte_end":11736,"line_start":265,"line_end":265,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12067,"byte_end":12080,"line_start":278,"line_end":278,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12029,"byte_end":12057,"line_start":277,"line_end":277,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624941,"byte_end":9624945,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625008,"byte_end":9625012,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625098,"byte_end":9625102,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625112,"byte_end":9625116,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626134,"byte_end":9626138,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626233,"byte_end":9626237,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626259,"byte_end":9626263,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626391,"byte_end":9626395,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626993,"byte_end":9626997,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9627315,"byte_end":9627319,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9627678,"byte_end":9627682,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628047,"byte_end":9628051,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628372,"byte_end":9628376,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628697,"byte_end":9628701,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9629070,"byte_end":9629074,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9629440,"byte_end":9629444,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630674,"byte_end":9630679,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630742,"byte_end":9630747,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630834,"byte_end":9630839,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630849,"byte_end":9630854,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631869,"byte_end":9631874,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631969,"byte_end":9631974,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631996,"byte_end":9632001,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9632129,"byte_end":9632134,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9632734,"byte_end":9632739,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9633154,"byte_end":9633159,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9633605,"byte_end":9633610,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634072,"byte_end":9634077,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634492,"byte_end":9634497,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634912,"byte_end":9634917,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9635385,"byte_end":9635390,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9635855,"byte_end":9635860,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637367,"byte_end":9637372,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637435,"byte_end":9637440,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637527,"byte_end":9637532,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637552,"byte_end":9637557,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637652,"byte_end":9637657,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637679,"byte_end":9637684,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637822,"byte_end":9637827,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638113,"byte_end":9638118,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638415,"byte_end":9638420,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638706,"byte_end":9638711,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639008,"byte_end":9639013,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639299,"byte_end":9639304,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639601,"byte_end":9639606,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639892,"byte_end":9639897,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640191,"byte_end":9640196,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640466,"byte_end":9640471,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640806,"byte_end":9640811,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9641272,"byte_end":9641277,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9641771,"byte_end":9641776,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9642230,"byte_end":9642235,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9642701,"byte_end":9642706,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9643172,"byte_end":9643177,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9643635,"byte_end":9643640,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9644095,"byte_end":9644100,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645569,"byte_end":9645573,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645636,"byte_end":9645640,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645726,"byte_end":9645730,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645740,"byte_end":9645744,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646758,"byte_end":9646762,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646857,"byte_end":9646861,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646883,"byte_end":9646887,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9647015,"byte_end":9647019,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9647617,"byte_end":9647621,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9648103,"byte_end":9648107,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9648608,"byte_end":9648612,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9649121,"byte_end":9649125,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9649606,"byte_end":9649610,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9650091,"byte_end":9650095,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9650608,"byte_end":9650612,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9651122,"byte_end":9651126,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652539,"byte_end":9652544,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652607,"byte_end":9652612,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652699,"byte_end":9652704,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652714,"byte_end":9652719,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653734,"byte_end":9653739,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653834,"byte_end":9653839,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653861,"byte_end":9653866,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653994,"byte_end":9653999,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9654599,"byte_end":9654604,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655019,"byte_end":9655024,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655470,"byte_end":9655475,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655937,"byte_end":9655942,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9656357,"byte_end":9656362,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9656777,"byte_end":9656782,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9657250,"byte_end":9657255,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9657720,"byte_end":9657725,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659232,"byte_end":9659237,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659300,"byte_end":9659305,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659392,"byte_end":9659397,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659417,"byte_end":9659422,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659517,"byte_end":9659522,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659544,"byte_end":9659549,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659687,"byte_end":9659692,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659978,"byte_end":9659983,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660281,"byte_end":9660286,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660575,"byte_end":9660580,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660879,"byte_end":9660884,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661170,"byte_end":9661175,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661472,"byte_end":9661477,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661763,"byte_end":9661768,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662067,"byte_end":9662072,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662357,"byte_end":9662362,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662707,"byte_end":9662712,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9663185,"byte_end":9663190,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9663696,"byte_end":9663701,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9664167,"byte_end":9664172,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9664658,"byte_end":9664663,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9665149,"byte_end":9665154,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9665624,"byte_end":9665629,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9666096,"byte_end":9666101,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705724,"byte_end":9705728,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705872,"byte_end":9705876,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705987,"byte_end":9705991,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706144,"byte_end":9706148,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706261,"byte_end":9706265,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706415,"byte_end":9706419,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706532,"byte_end":9706536,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706689,"byte_end":9706693,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706804,"byte_end":9706808,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706952,"byte_end":9706956,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707064,"byte_end":9707068,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707212,"byte_end":9707216,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707324,"byte_end":9707328,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707466,"byte_end":9707470,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707833,"byte_end":9707837,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707981,"byte_end":9707985,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9708099,"byte_end":9708103,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804402,"byte_end":9804407,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804552,"byte_end":9804557,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804668,"byte_end":9804673,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804827,"byte_end":9804832,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804945,"byte_end":9804950,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805101,"byte_end":9805106,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805219,"byte_end":9805224,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805378,"byte_end":9805383,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805494,"byte_end":9805499,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805644,"byte_end":9805649,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805757,"byte_end":9805762,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805907,"byte_end":9805912,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806020,"byte_end":9806025,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806165,"byte_end":9806170,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806534,"byte_end":9806539,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806684,"byte_end":9806689,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806803,"byte_end":9806808,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807218,"byte_end":9807223,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807377,"byte_end":9807382,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807495,"byte_end":9807500,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807651,"byte_end":9807656,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807769,"byte_end":9807774,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807928,"byte_end":9807933,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808044,"byte_end":9808049,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808401,"byte_end":9808406,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808750,"byte_end":9808755,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":7091,"byte_end":7109,"line_start":133,"line_end":133,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9624941,"byte_end":9624945,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625008,"byte_end":9625012,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625098,"byte_end":9625102,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9625112,"byte_end":9625116,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626134,"byte_end":9626138,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626233,"byte_end":9626237,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626259,"byte_end":9626263,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626391,"byte_end":9626395,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9626993,"byte_end":9626997,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9627315,"byte_end":9627319,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9627678,"byte_end":9627682,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628047,"byte_end":9628051,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628372,"byte_end":9628376,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9628697,"byte_end":9628701,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9629070,"byte_end":9629074,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":9629440,"byte_end":9629444,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630674,"byte_end":9630679,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630742,"byte_end":9630747,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630834,"byte_end":9630839,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9630849,"byte_end":9630854,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631869,"byte_end":9631874,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631969,"byte_end":9631974,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9631996,"byte_end":9632001,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9632129,"byte_end":9632134,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9632734,"byte_end":9632739,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9633154,"byte_end":9633159,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9633605,"byte_end":9633610,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634072,"byte_end":9634077,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634492,"byte_end":9634497,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9634912,"byte_end":9634917,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9635385,"byte_end":9635390,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":9635855,"byte_end":9635860,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637367,"byte_end":9637372,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637435,"byte_end":9637440,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637527,"byte_end":9637532,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637552,"byte_end":9637557,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637652,"byte_end":9637657,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637679,"byte_end":9637684,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9637822,"byte_end":9637827,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638113,"byte_end":9638118,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638415,"byte_end":9638420,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9638706,"byte_end":9638711,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639008,"byte_end":9639013,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639299,"byte_end":9639304,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639601,"byte_end":9639606,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9639892,"byte_end":9639897,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640191,"byte_end":9640196,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640466,"byte_end":9640471,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9640806,"byte_end":9640811,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9641272,"byte_end":9641277,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9641771,"byte_end":9641776,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9642230,"byte_end":9642235,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9642701,"byte_end":9642706,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9643172,"byte_end":9643177,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9643635,"byte_end":9643640,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":9644095,"byte_end":9644100,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645569,"byte_end":9645573,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645636,"byte_end":9645640,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645726,"byte_end":9645730,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9645740,"byte_end":9645744,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646758,"byte_end":9646762,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646857,"byte_end":9646861,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9646883,"byte_end":9646887,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9647015,"byte_end":9647019,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9647617,"byte_end":9647621,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9648103,"byte_end":9648107,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9648608,"byte_end":9648612,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9649121,"byte_end":9649125,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9649606,"byte_end":9649610,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9650091,"byte_end":9650095,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9650608,"byte_end":9650612,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":9651122,"byte_end":9651126,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652539,"byte_end":9652544,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652607,"byte_end":9652612,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652699,"byte_end":9652704,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9652714,"byte_end":9652719,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653734,"byte_end":9653739,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653834,"byte_end":9653839,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653861,"byte_end":9653866,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9653994,"byte_end":9653999,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9654599,"byte_end":9654604,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655019,"byte_end":9655024,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655470,"byte_end":9655475,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9655937,"byte_end":9655942,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9656357,"byte_end":9656362,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9656777,"byte_end":9656782,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9657250,"byte_end":9657255,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":9657720,"byte_end":9657725,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659232,"byte_end":9659237,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":218}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659300,"byte_end":9659305,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":315}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659392,"byte_end":9659397,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":382}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659417,"byte_end":9659422,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659517,"byte_end":9659522,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":3067}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659544,"byte_end":9659549,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659687,"byte_end":9659692,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9659978,"byte_end":9659983,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660281,"byte_end":9660286,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660575,"byte_end":9660580,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9660879,"byte_end":9660884,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661170,"byte_end":9661175,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661472,"byte_end":9661477,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9661763,"byte_end":9661768,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662067,"byte_end":9662072,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662357,"byte_end":9662362,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9662707,"byte_end":9662712,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9663185,"byte_end":9663190,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9663696,"byte_end":9663701,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9696}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9664167,"byte_end":9664172,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9704}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9664658,"byte_end":9664663,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9706}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9665149,"byte_end":9665154,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9698}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9665624,"byte_end":9665629,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9700}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":9666096,"byte_end":9666101,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9694}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705724,"byte_end":9705728,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3125}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705872,"byte_end":9705876,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3156}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9705987,"byte_end":9705991,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706144,"byte_end":9706148,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706261,"byte_end":9706265,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706415,"byte_end":9706419,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706532,"byte_end":9706536,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706689,"byte_end":9706693,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706804,"byte_end":9706808,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3140}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9706952,"byte_end":9706956,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3168}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707064,"byte_end":9707068,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3135}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707212,"byte_end":9707216,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3164}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707324,"byte_end":9707328,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3152}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707466,"byte_end":9707470,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707833,"byte_end":9707837,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9707981,"byte_end":9707985,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3160}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9708099,"byte_end":9708103,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804402,"byte_end":9804407,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3125}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804552,"byte_end":9804557,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3156}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804668,"byte_end":9804673,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804827,"byte_end":9804832,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9804945,"byte_end":9804950,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805101,"byte_end":9805106,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805219,"byte_end":9805224,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805378,"byte_end":9805383,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805494,"byte_end":9805499,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3140}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805644,"byte_end":9805649,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3168}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805757,"byte_end":9805762,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3135}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9805907,"byte_end":9805912,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3164}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806020,"byte_end":9806025,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3152}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806165,"byte_end":9806170,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806534,"byte_end":9806539,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806684,"byte_end":9806689,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3160}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9806803,"byte_end":9806808,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807218,"byte_end":9807223,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3184}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807377,"byte_end":9807382,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3211}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807495,"byte_end":9807500,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3189}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807651,"byte_end":9807656,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3215}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807769,"byte_end":9807774,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3194}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9807928,"byte_end":9807933,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3219}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808044,"byte_end":9808049,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3177}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808401,"byte_end":9808406,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9808750,"byte_end":9808755,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2714}}]}