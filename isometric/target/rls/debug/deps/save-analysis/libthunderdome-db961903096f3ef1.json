{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","thunderdome","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=db961903096f3ef1","-C","extra-filename=-db961903096f3ef1","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libthunderdome-db961903096f3ef1.rmeta"},"prelude":{"crate_id":{"name":"thunderdome","disambiguator":[9051733460832085044,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":3564,"line_start":1,"line_end":90,"column_start":1,"column_end":34}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3424,"byte_end":3429,"line_start":86,"line_end":86,"column_start":24,"column_end":29},"alias_span":null,"name":"Arena","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3431,"byte_end":3436,"line_start":86,"line_end":86,"column_start":31,"column_end":36},"alias_span":null,"name":"Index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3461,"byte_end":3466,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3494,"byte_end":3502,"line_start":88,"line_end":88,"column_start":27,"column_end":35},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3525,"byte_end":3529,"line_start":89,"line_end":89,"column_start":22,"column_end":26},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3556,"byte_end":3563,"line_start":90,"line_end":90,"column_start":26,"column_end":33},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":3564,"line_start":1,"line_end":90,"column_start":1,"column_end":34},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":82},{"krate":0,"index":119},{"krate":0,"index":126},{"krate":0,"index":135},{"krate":0,"index":164},{"krate":0,"index":207},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":266}],"decl_id":null,"docs":"[![GitHub CI Status](https://github.com/LPGhatguy/thunderdome/workflows/CI/badge.svg)](https://github.com/LPGhatguy/thunderdome/actions)\n[![thunderdome on crates.io](https://img.shields.io/crates/v/thunderdome.svg)](https://crates.io/crates/thunderdome)\n[![thunderdome docs](https://img.shields.io/badge/docs-docs.rs-orange.svg)](https://docs.rs/thunderdome)","sig":null,"attributes":[{"value":"*\n[![GitHub CI Status](https://github.com/LPGhatguy/thunderdome/workflows/CI/badge.svg)](https://github.com/LPGhatguy/thunderdome/actions)\n[![thunderdome on crates.io](https://img.shields.io/crates/v/thunderdome.svg)](https://crates.io/crates/thunderdome)\n[![thunderdome docs](https://img.shields.io/badge/docs-docs.rs-orange.svg)](https://docs.rs/thunderdome)\n\nThunderdome is a ~gladitorial~ generational arena inspired by\n[generational-arena](https://crates.io/crates/generational-arena),\n[slotmap](https://crates.io/crates/slotmap), and\n[slab](https://crates.io/crates/slab). It provides constant time insertion,\nlookup, and removal via small (8 byte) keys returned from `Arena`.\n\nThunderdome's key type, `Index`, is still 8 bytes when put inside of an\n`Option<T>` thanks to Rust's `NonZero*` types.\n\n## Basic Examples\n\n```rust\n# use thunderdome::{Arena, Index};\nlet mut arena = Arena::new();\n\nlet foo = arena.insert(\"Foo\");\nlet bar = arena.insert(\"Bar\");\n\nassert_eq!(arena[foo], \"Foo\");\nassert_eq!(arena[bar], \"Bar\");\n\narena[bar] = \"Replaced\";\nassert_eq!(arena[bar], \"Replaced\");\n\nlet foo_value = arena.remove(foo);\nassert_eq!(foo_value, Some(\"Foo\"));\n\n// The slot previously used by foo will be reused for baz\nlet baz = arena.insert(\"Baz\");\nassert_eq!(arena[baz], \"Baz\");\n\n// foo is no longer a valid key\nassert_eq!(arena.get(foo), None);\n```\n\n## Comparison With Similar Crates\n\n| Feature                      | Thunderdome | generational-arena | slotmap | slab |\n|------------------------------|-------------|--------------------|---------|------|\n| Generational Indices¹        | Yes         | Yes                | Yes     | No   |\n| `size_of::<Index>()`         | 8           | 16                 | 8       | 8    |\n| `size_of::<Option<Index>>()` | 8           | 24                 | 8       | 16   |\n| Max Elements                 | 2³²         | 2⁶⁴                | 2³²     | 2⁶⁴  |\n| Non-`Copy` Values            | Yes         | Yes                | Sorta²  | Yes  |\n| `no_std` Support             | No          | Yes                | No      | No   |\n| Serde Support                | No          | Yes                | Yes     | No   |\n\n* Sizes calculated on rustc `1.44.0-x86_64-pc-windows-msvc`\n* See [the Thunderdome comparison\n  Cargo.toml](https://github.com/LPGhatguy/thunderdome/blob/main/comparison/Cargo.toml)\n  for versions of each library tested.\n\n1. Generational indices help solve the [ABA\n   Problem](https://en.wikipedia.org/wiki/ABA_problem), which can cause dangling\n   keys to mistakenly access newly-inserted data.\n2. slotmap's `SlotMap` and `HopSlotMap` require values to be `Copy` on stable\n  Rust versions. slotmap's `DenseSlotMap` type supports non-`Copy` types on\n  stable, but has different performance trade-offs.\n\n## Minimum Supported Rust Version (MSRV)\n\nThunderdome supports Rust 1.34.1 and newer. Until Thunderdome reaches 1.0,\nchanges to the MSRV will require major version bumps. After 1.0, MSRV changes\nwill only require minor version bumps, but will need significant justification.\n*/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":0,"byte_end":3047,"line_start":1,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3049,"byte_end":3073,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"deny(clippy :: integer_arithmetic)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\lib.rs","byte_start":3267,"byte_end":3303,"line_start":76,"line_end":76,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4043,"byte_end":4048,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"Arena","qualname":"::arena::Arena","value":"Arena {  }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" Container that can have elements inserted into it and removed from it.","sig":null,"attributes":[{"value":"/ Container that can have elements inserted into it and removed from it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":3815,"byte_end":3889,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":3890,"byte_end":3893,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Indices use the [`Index`][Index] type, created by inserting values with","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":3894,"byte_end":3969,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ [`Arena::insert`][Arena::insert].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":3970,"byte_end":4007,"line_start":15,"line_end":15,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4289,"byte_end":4294,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"Index","qualname":"::arena::Index","value":"Index {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"decl_id":null,"docs":" Index type for [`Arena`][Arena] that has a generation attached to it.\n","sig":null,"attributes":[{"value":"/ Index type for [`Arena`][Arena] that has a generation attached to it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4136,"byte_end":4209,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4557,"byte_end":4564,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"to_bits","qualname":"<Index>::to_bits","value":"pub fn to_bits(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Convert this `Index` to an equivalent `u64` representation. Mostly\n useful for passing to code outside of Rust.\n","sig":null,"attributes":[{"value":"/ Convert this `Index` to an equivalent `u64` representation. Mostly","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4382,"byte_end":4452,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ useful for passing to code outside of Rust.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4457,"byte_end":4504,"line_start":32,"line_end":32,"column_start":5,"column_end":52}},{"value":"allow(clippy :: integer_arithmetic)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4509,"byte_end":4545,"line_start":33,"line_end":33,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":5128,"byte_end":5137,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"from_bits","qualname":"<Index>::from_bits","value":"pub fn from_bits(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert back from a value generated with `Index::to_bits`. Don't call\n this with arbitrary inputs; you'll almost certainly just get invalid\n and/or malformed indices.","sig":null,"attributes":[{"value":"/ Convert back from a value generated with `Index::to_bits`. Don't call","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4747,"byte_end":4820,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ this with arbitrary inputs; you'll almost certainly just get invalid","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4825,"byte_end":4897,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ and/or malformed indices.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4902,"byte_end":4931,"line_start":41,"line_end":41,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4936,"byte_end":4939,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ If fed an index which was not generated by thunderdome or even just run","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4944,"byte_end":5019,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ `Index::from_bits(0)`, this function may panic!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":5024,"byte_end":5075,"line_start":44,"line_end":44,"column_start":5,"column_end":56}},{"value":"allow(clippy :: integer_arithmetic)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":5080,"byte_end":5116,"line_start":45,"line_end":45,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6396,"byte_end":6399,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<Arena<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty arena.\n","sig":null,"attributes":[{"value":"/ Construct an empty arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6355,"byte_end":6384,"line_start":93,"line_end":93,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6648,"byte_end":6661,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Arena<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty arena with space to hold exactly `capacity` elements\n without reallocating.\n","sig":null,"attributes":[{"value":"/ Construct an empty arena with space to hold exactly `capacity` elements","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6531,"byte_end":6606,"line_start":102,"line_end":102,"column_start":5,"column_end":80}},{"value":"/ without reallocating.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6611,"byte_end":6636,"line_start":103,"line_end":103,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6895,"byte_end":6898,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"len","qualname":"<Arena<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements contained in the arena.\n","sig":null,"attributes":[{"value":"/ Return the number of elements contained in the arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6826,"byte_end":6883,"line_start":112,"line_end":112,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7093,"byte_end":7101,"line_start":119,"line_end":119,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Arena<T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements the arena can hold without allocating,\n including the elements currently in the arena.\n","sig":null,"attributes":[{"value":"/ Return the number of elements the arena can hold without allocating,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6954,"byte_end":7026,"line_start":117,"line_end":117,"column_start":5,"column_end":77}},{"value":"/ including the elements currently in the arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7031,"byte_end":7081,"line_start":118,"line_end":118,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7214,"byte_end":7222,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Arena<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the arena is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether the arena is empty.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7163,"byte_end":7202,"line_start":123,"line_end":123,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7396,"byte_end":7402,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"insert","qualname":"<Arena<T>>::insert","value":"pub fn insert(&mut Self, T) -> Index","parent":null,"children":[],"decl_id":null,"docs":" Insert a new value into the arena, returning an index that can be used\n to later retrieve the value.\n","sig":null,"attributes":[{"value":"/ Insert a new value into the arena, returning an index that can be used","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7273,"byte_end":7347,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ to later retrieve the value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":7352,"byte_end":7384,"line_start":129,"line_end":129,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9537,"byte_end":9540,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"get","qualname":"<Arena<T>>::get","value":"pub fn get(&Self, Index) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to a value inside the arena by\n [`Index`][Index], returning `None` if the index is not contained in the\n arena.\n","sig":null,"attributes":[{"value":"/ Get an immutable reference to a value inside the arena by","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9369,"byte_end":9430,"line_start":176,"line_end":176,"column_start":5,"column_end":66}},{"value":"/ [`Index`][Index], returning `None` if the index is not contained in the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9435,"byte_end":9510,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9515,"byte_end":9525,"line_start":178,"line_end":178,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9977,"byte_end":9984,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Arena<T>>::get_mut","value":"pub fn get_mut(&mut Self, Index) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a value inside the arena by [`Index`][Index],\n returning `None` if the index is not contained in the arena.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to a value inside the arena by [`Index`][Index],","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9820,"byte_end":9896,"line_start":188,"line_end":188,"column_start":5,"column_end":81}},{"value":"/ returning `None` if the index is not contained in the arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":9901,"byte_end":9965,"line_start":189,"line_end":189,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":10397,"byte_end":10403,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"remove","qualname":"<Arena<T>>::remove","value":"pub fn remove(&mut Self, Index) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value contained at the given index from the arena, returning\n it if it was present.\n","sig":null,"attributes":[{"value":"/ Remove the value contained at the given index from the arena, returning","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":10280,"byte_end":10355,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ it if it was present.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":10360,"byte_end":10385,"line_start":200,"line_end":200,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12041,"byte_end":12051,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"invalidate","qualname":"<Arena<T>>::invalidate","value":"pub fn invalidate(&mut Self, Index) -> Option<Index>","parent":null,"children":[],"decl_id":null,"docs":" Invalidate the given index and return a new index to the same value. This\n is roughly equivalent to `remove` followed by `insert`, but much faster.\n If the old index is already invalid, this method returns `None`.\n","sig":null,"attributes":[{"value":"/ Invalidate the given index and return a new index to the same value. This","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":11798,"byte_end":11875,"line_start":233,"line_end":233,"column_start":5,"column_end":82}},{"value":"/ is roughly equivalent to `remove` followed by `insert`, but much faster.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":11880,"byte_end":11956,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ If the old index is already invalid, this method returns `None`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":11961,"byte_end":12029,"line_start":235,"line_end":235,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12577,"byte_end":12582,"line_start":253,"line_end":253,"column_start":12,"column_end":17},"name":"clear","qualname":"<Arena<T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the arena and drop all elements.\n","sig":null,"attributes":[{"value":"/ Clear the arena and drop all elements.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12523,"byte_end":12565,"line_start":252,"line_end":252,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12774,"byte_end":12778,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"iter","qualname":"<Arena<T>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all of the indexes and values contained in the arena.","sig":null,"attributes":[{"value":"/ Iterate over all of the indexes and values contained in the arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12644,"byte_end":12714,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12719,"byte_end":12722,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Iteration order is not defined.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12727,"byte_end":12762,"line_start":259,"line_end":259,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13091,"byte_end":13099,"line_start":271,"line_end":271,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Arena<T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all of the indexes and values contained in the arena, with\n mutable access to each value.","sig":null,"attributes":[{"value":"/ Iterate over all of the indexes and values contained in the arena, with","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12918,"byte_end":12993,"line_start":267,"line_end":267,"column_start":5,"column_end":80}},{"value":"/ mutable access to each value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":12998,"byte_end":13031,"line_start":268,"line_end":268,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13036,"byte_end":13039,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Iteration order is not defined.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13044,"byte_end":13079,"line_start":270,"line_end":270,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13590,"byte_end":13595,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"name":"drain","qualname":"<Arena<T>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that removes each element from the arena.","sig":null,"attributes":[{"value":"/ Returns an iterator that removes each element from the arena.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13253,"byte_end":13318,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13323,"byte_end":13326,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ Iteration order is not defined.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13331,"byte_end":13366,"line_start":280,"line_end":280,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13371,"byte_end":13374,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If the iterator is dropped before it is fully consumed, any uniterated","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13379,"byte_end":13453,"line_start":282,"line_end":282,"column_start":5,"column_end":79}},{"value":"/ items will be dropped from the arena, and the arena will be empty.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13458,"byte_end":13528,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ The arena's capacity will not be changed.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13533,"byte_end":13578,"line_start":284,"line_end":284,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":18993,"byte_end":18998,"line_start":6,"line_end":6,"column_start":12,"column_end":17},"name":"Drain","qualname":"::drain::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" See [`Arena::drain`][Arena::drain].\n","sig":null,"attributes":[{"value":"/ See [`Arena::drain`][Arena::drain].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":18942,"byte_end":18981,"line_start":5,"line_end":5,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":25112,"byte_end":25120,"line_start":6,"line_end":6,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::into_iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":" Iterator typed used when an Arena is turned [`IntoIterator`][IntoIterator].\n","sig":null,"attributes":[{"value":"/ Iterator typed used when an Arena is turned [`IntoIterator`][IntoIterator].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":25021,"byte_end":25100,"line_start":5,"line_end":5,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":27767,"byte_end":27771,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":" See [`Arena::iter`][Arena::iter].\n","sig":null,"attributes":[{"value":"/ See [`Arena::iter`][Arena::iter].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":27718,"byte_end":27755,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":30141,"byte_end":30148,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::iter_mut::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" See [`Arena::iter_mut`][Arena::iter_mut].\n","sig":null,"attributes":[{"value":"/ See [`Arena::iter_mut`][Arena::iter_mut].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":30084,"byte_end":30129,"line_start":7,"line_end":7,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4370,"byte_end":4375,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":5554,"byte_end":5559,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6340,"byte_end":6345,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13757,"byte_end":13762,"line_start":294,"line_end":294,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15335,"byte_end":15340,"line_start":333,"line_end":333,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15428,"byte_end":15433,"line_start":339,"line_end":339,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15658,"byte_end":15663,"line_start":351,"line_end":351,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15882,"byte_end":15887,"line_start":360,"line_end":360,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":19102,"byte_end":19107,"line_start":11,"line_end":11,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20458,"byte_end":20463,"line_start":46,"line_end":46,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20508,"byte_end":20513,"line_start":47,"line_end":47,"column_start":35,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20546,"byte_end":20551,"line_start":49,"line_end":49,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\free_pointer.rs","byte_start":22252,"byte_end":22263,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\generation.rs","byte_start":23696,"byte_end":23706,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":25208,"byte_end":25216,"line_start":11,"line_end":11,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":26563,"byte_end":26571,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":26608,"byte_end":26616,"line_start":47,"line_end":47,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":27894,"byte_end":27898,"line_start":13,"line_end":13,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":29011,"byte_end":29015,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":29060,"byte_end":29064,"line_start":51,"line_end":51,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":30274,"byte_end":30281,"line_start":13,"line_end":13,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":31398,"byte_end":31405,"line_start":50,"line_end":50,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":31450,"byte_end":31457,"line_start":51,"line_end":51,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":4370,"byte_end":4375,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":5554,"byte_end":5559,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":6340,"byte_end":6345,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":13757,"byte_end":13762,"line_start":294,"line_end":294,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15335,"byte_end":15340,"line_start":333,"line_end":333,"column_start":21,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15428,"byte_end":15433,"line_start":339,"line_end":339,"column_start":26,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":7790}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15658,"byte_end":15663,"line_start":351,"line_end":351,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\arena.rs","byte_start":15882,"byte_end":15887,"line_start":360,"line_end":360,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":19102,"byte_end":19107,"line_start":11,"line_end":11,"column_start":26,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20458,"byte_end":20463,"line_start":46,"line_end":46,"column_start":31,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20508,"byte_end":20513,"line_start":47,"line_end":47,"column_start":35,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\drain.rs","byte_start":20546,"byte_end":20551,"line_start":49,"line_end":49,"column_start":22,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\free_pointer.rs","byte_start":22252,"byte_end":22263,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\generation.rs","byte_start":23696,"byte_end":23706,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":25208,"byte_end":25216,"line_start":11,"line_end":11,"column_start":22,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":150},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":26563,"byte_end":26571,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":150},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\into_iter.rs","byte_start":26608,"byte_end":26616,"line_start":47,"line_end":47,"column_start":31,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":150},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":27894,"byte_end":27898,"line_start":13,"line_end":13,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":29011,"byte_end":29015,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter.rs","byte_start":29060,"byte_end":29064,"line_start":51,"line_end":51,"column_start":35,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":30274,"byte_end":30281,"line_start":13,"line_end":13,"column_start":26,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":31398,"byte_end":31405,"line_start":50,"line_end":50,"column_start":31,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\thunderdome-0.3.0\\src\\iter_mut.rs","byte_start":31450,"byte_end":31457,"line_start":51,"line_end":51,"column_start":35,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":7859}}]}