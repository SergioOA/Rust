{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","external_memory","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=29523e782fab39ea","-C","extra-filename=-29523e782fab39ea","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","--extern","bitflags=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libbitflags-119d3dde1facfd5c.rmeta","--extern","drm_fourcc=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libdrm_fourcc-59cedfe82bd4dd71.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libexternal_memory-29523e782fab39ea.rmeta"},"prelude":{"crate_id":{"name":"external_memory","disambiguator":[7902531812354765766,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":16,"id":{"name":"drm_fourcc","disambiguator":[1365079497483268968,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":17,"id":{"name":"serde","disambiguator":[7454409990564063588,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":18,"id":{"name":"serde_derive","disambiguator":[535096255079302254,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","num":19,"id":{"name":"bitflags","disambiguator":[3297404274272602299,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":0,"byte_end":30536,"line_start":1,"line_end":686,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":150,"byte_end":151,"line_start":9,"line_end":9,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"Handle","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":176,"byte_end":177,"line_start":12,"line_end":12,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Ptr","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":958},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":200,"byte_end":211,"line_start":14,"line_end":14,"column_start":21,"column_end":32},"alias_span":null,"name":"DrmModifier","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":0,"byte_end":30536,"line_start":1,"line_end":686,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":211},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":57},{"krate":0,"index":236},{"krate":0,"index":261},{"krate":0,"index":59},{"krate":0,"index":64},{"krate":0,"index":263},{"krate":0,"index":288},{"krate":0,"index":65},{"krate":0,"index":290},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":314},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30586,"byte_end":30592,"line_start":3,"line_end":3,"column_start":12,"column_end":18},"name":"Handle","qualname":"::handle::Handle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Windows handle.\n","sig":null,"attributes":[{"value":"/ Windows handle.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30555,"byte_end":30574,"line_start":2,"line_end":2,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31100,"byte_end":31103,"line_start":3,"line_end":3,"column_start":12,"column_end":15},"name":"Ptr","qualname":"::ptr::Ptr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Pointer to a host allocated memory.\n","sig":null,"attributes":[{"value":"/ Pointer to a host allocated memory.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31049,"byte_end":31088,"line_start":2,"line_end":2,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31176,"byte_end":31186,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"as_raw_ptr","qualname":"<Ptr>::as_raw_ptr","value":"pub fn as_raw_ptr(&Self) -> *mut std::ffi::c_void","parent":null,"children":[],"decl_id":null,"docs":" Get the inner ptr\n","sig":null,"attributes":[{"value":"/ Get the inner ptr","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31143,"byte_end":31164,"line_start":5,"line_end":5,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":433,"byte_end":439,"line_start":24,"line_end":24,"column_start":5,"column_end":11},"name":"Handle","qualname":"::PlatformMemory::Handle","value":"PlatformMemory::Handle(Handle)","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Windows handle.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":379,"byte_end":404,"line_start":22,"line_end":22,"column_start":5,"column_end":30}},{"value":"/ Windows handle.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":409,"byte_end":428,"line_start":23,"line_end":23,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":475,"byte_end":478,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Ptr","qualname":"::PlatformMemory::Ptr","value":"PlatformMemory::Ptr(Ptr)","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Host pointer.\n","sig":null,"attributes":[{"value":"/ Host pointer.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":453,"byte_end":470,"line_start":25,"line_end":25,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":289,"byte_end":303,"line_start":18,"line_end":18,"column_start":10,"column_end":24},"name":"PlatformMemory","qualname":"::PlatformMemory","value":"pub enum PlatformMemory { Handle(Handle), Ptr(Ptr), }","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":32}],"decl_id":null,"docs":" Representation of an os specific memory.\n","sig":null,"attributes":[{"value":"/ Representation of an os specific memory.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":235,"byte_end":279,"line_start":17,"line_end":17,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":781,"byte_end":787,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"handle","qualname":"<PlatformMemory>::handle","value":"pub fn handle(&Self) -> Option<&Handle>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":744,"byte_end":769,"line_start":38,"line_end":38,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":998,"byte_end":1001,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"ptr","qualname":"<PlatformMemory>::ptr","value":"pub fn ptr(&Self) -> Option<&Ptr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2969,"byte_end":2975,"line_start":123,"line_end":123,"column_start":5,"column_end":11},"name":"Handle","qualname":"::PlatformMemoryType::Handle","value":"PlatformMemoryType::Handle","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2939,"byte_end":2964,"line_start":122,"line_end":122,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2981,"byte_end":2984,"line_start":124,"line_end":124,"column_start":5,"column_end":8},"name":"Ptr","qualname":"::PlatformMemoryType::Ptr","value":"PlatformMemoryType::Ptr","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2879,"byte_end":2897,"line_start":119,"line_end":119,"column_start":10,"column_end":28},"name":"PlatformMemoryType","qualname":"::PlatformMemoryType","value":"pub enum PlatformMemoryType { Handle, Ptr, }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Representation of os specific memory types.\n","sig":null,"attributes":[{"value":"/ Representation of os specific memory types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2822,"byte_end":2869,"line_start":118,"line_end":118,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":3129,"byte_end":3152,"line_start":131,"line_end":131,"column_start":16,"column_end":39},"name":"ExternalMemoryTypeFlags","qualname":"::ExternalMemoryTypeFlags","value":"ExternalMemoryTypeFlags {  }","parent":null,"children":[{"krate":0,"index":84}],"decl_id":null,"docs":" External memory type flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":4186,"byte_end":4198,"line_start":144,"line_end":144,"column_start":15,"column_end":27},"name":"OPAQUE_WIN32","qualname":"::ExternalMemoryTypeFlags::OPAQUE_WIN32","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies an NT handle that has only limited valid usage outside of Vulkan and other compatible APIs.\n It must be compatible with the functions DuplicateHandle, CloseHandle, CompareObjectHandles, GetHandleInformation, and SetHandleInformation.\n It owns a reference to the underlying memory resource represented by its memory object.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":4678,"byte_end":4694,"line_start":150,"line_end":150,"column_start":15,"column_end":31},"name":"OPAQUE_WIN32_KMT","qualname":"::ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies a global share handle that has only limited valid usage outside of Vulkan and other compatible APIs.\n It is not compatible with any native APIs.\n It does not own a reference to the underlying memory resource represented by its memory object, and will therefore become invalid when all the memory objects with it are destroyed.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":5013,"byte_end":5026,"line_start":155,"line_end":155,"column_start":15,"column_end":28},"name":"D3D11_TEXTURE","qualname":"::ExternalMemoryTypeFlags::D3D11_TEXTURE","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies an NT handle returned by IDXGIResource1::CreateSharedHandle referring to a Direct3D 10 or 11 texture resource.\n It owns a reference to the memory used by the Direct3D resource.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":5469,"byte_end":5486,"line_start":160,"line_end":160,"column_start":15,"column_end":32},"name":"D3D11_TEXTURE_KMT","qualname":"::ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies a global share handle returned by IDXGIResource::GetSharedHandle referring to a Direct3D 10 or 11 texture resource.\n It does not own a reference to the underlying Direct3D resource, and will therefore become invalid when all the memory objects and Direct3D resources associated with it are destroyed.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":5793,"byte_end":5803,"line_start":165,"line_end":165,"column_start":15,"column_end":25},"name":"D3D12_HEAP","qualname":"::ExternalMemoryTypeFlags::D3D12_HEAP","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies an NT handle returned by ID3D12Device::CreateSharedHandle referring to a Direct3D 12 heap resource.\n It owns a reference to the resources used by the Direct3D heap.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":6116,"byte_end":6130,"line_start":170,"line_end":170,"column_start":15,"column_end":29},"name":"D3D12_RESOURCE","qualname":"::ExternalMemoryTypeFlags::D3D12_RESOURCE","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Specifies an NT handle returned by ID3D12Device::CreateSharedHandle referring to a Direct3D 12 committed resource.\n It owns a reference to the memory used by the Direct3D resource.\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bitflags-1.3.2\\src\\lib.rs","byte_start":13539856,"byte_end":13539874,"line_start":520,"line_end":520,"column_start":19,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":6982,"byte_end":6997,"line_start":182,"line_end":182,"column_start":15,"column_end":30},"name":"HOST_ALLOCATION","qualname":"::ExternalMemoryTypeFlags::HOST_ALLOCATION","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" Specifies a host pointer returned by a host memory allocation command.\n It does not own a reference to the underlying memory resource, and will therefore become invalid if the host memory is freed.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":7279,"byte_end":7305,"line_start":185,"line_end":185,"column_start":15,"column_end":41},"name":"HOST_MAPPED_FOREIGN_MEMORY","qualname":"::ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY","value":"Self","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" Specifies a host pointer to host mapped foreign memory.\n It does not own a reference to the underlying memory resource, and will therefore become invalid if the foreign memory is unmapped or otherwise becomes no longer available.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10400,"byte_end":10411,"line_start":253,"line_end":253,"column_start":5,"column_end":16},"name":"OpaqueWin32","qualname":"::ExternalMemoryType::OpaqueWin32","value":"ExternalMemoryType::OpaqueWin32","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10231,"byte_end":10256,"line_start":250,"line_end":250,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10261,"byte_end":10299,"line_start":251,"line_end":251,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10304,"byte_end":10395,"line_start":252,"line_end":252,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10594,"byte_end":10608,"line_start":257,"line_end":257,"column_start":5,"column_end":19},"name":"OpaqueWin32Kmt","qualname":"::ExternalMemoryType::OpaqueWin32Kmt","value":"ExternalMemoryType::OpaqueWin32Kmt","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10417,"byte_end":10442,"line_start":254,"line_end":254,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10447,"byte_end":10485,"line_start":255,"line_end":255,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10490,"byte_end":10589,"line_start":256,"line_end":256,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10785,"byte_end":10797,"line_start":261,"line_end":261,"column_start":5,"column_end":17},"name":"D3D11Texture","qualname":"::ExternalMemoryType::D3D11Texture","value":"ExternalMemoryType::D3D11Texture","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10614,"byte_end":10639,"line_start":258,"line_end":258,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10644,"byte_end":10682,"line_start":259,"line_end":259,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10687,"byte_end":10780,"line_start":260,"line_end":260,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10982,"byte_end":10997,"line_start":265,"line_end":265,"column_start":5,"column_end":20},"name":"D3D11TextureKmt","qualname":"::ExternalMemoryType::D3D11TextureKmt","value":"ExternalMemoryType::D3D11TextureKmt","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10803,"byte_end":10828,"line_start":262,"line_end":262,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10833,"byte_end":10871,"line_start":263,"line_end":263,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10876,"byte_end":10977,"line_start":264,"line_end":264,"column_start":5,"column_end":106}}]},{"kind":"TupleVariant","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11168,"byte_end":11177,"line_start":269,"line_end":269,"column_start":5,"column_end":14},"name":"D3D12Heap","qualname":"::ExternalMemoryType::D3D12Heap","value":"ExternalMemoryType::D3D12Heap","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11003,"byte_end":11028,"line_start":266,"line_end":266,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11033,"byte_end":11071,"line_start":267,"line_end":267,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11076,"byte_end":11163,"line_start":268,"line_end":268,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11356,"byte_end":11369,"line_start":273,"line_end":273,"column_start":5,"column_end":18},"name":"D3D12Resource","qualname":"::ExternalMemoryType::D3D12Resource","value":"ExternalMemoryType::D3D12Resource","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE].\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11183,"byte_end":11208,"line_start":270,"line_end":270,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11213,"byte_end":11251,"line_start":271,"line_end":271,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11256,"byte_end":11351,"line_start":272,"line_end":272,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11924,"byte_end":11938,"line_start":283,"line_end":283,"column_start":5,"column_end":19},"name":"HostAllocation","qualname":"::ExternalMemoryType::HostAllocation","value":"ExternalMemoryType::HostAllocation","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11822,"byte_end":11919,"line_start":282,"line_end":282,"column_start":5,"column_end":102}}]},{"kind":"TupleVariant","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":12068,"byte_end":12091,"line_start":285,"line_end":285,"column_start":5,"column_end":28},"name":"HostMappedForeignMemory","qualname":"::ExternalMemoryType::HostMappedForeignMemory","value":"ExternalMemoryType::HostMappedForeignMemory","parent":{"krate":0,"index":211},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":11944,"byte_end":12063,"line_start":284,"line_end":284,"column_start":5,"column_end":124}}]},{"kind":"Enum","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":10035,"byte_end":10053,"line_start":245,"line_end":245,"column_start":10,"column_end":28},"name":"ExternalMemoryType","qualname":"::ExternalMemoryType","value":"pub enum ExternalMemoryType {\n    OpaqueWin32,\n    OpaqueWin32Kmt,\n    D3D11Texture,\n    D3D11TextureKmt,\n    D3D12Heap,\n    D3D12Resource,\n    HostAllocation,\n    HostMappedForeignMemory,\n}","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226}],"decl_id":null,"docs":" External memory types.\n","sig":null,"attributes":[{"value":"/ External memory types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":9958,"byte_end":9984,"line_start":243,"line_end":243,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13880,"byte_end":13891,"line_start":325,"line_end":325,"column_start":5,"column_end":16},"name":"OpaqueWin32","qualname":"::ExternalBufferMemory::OpaqueWin32","value":"ExternalBufferMemory::OpaqueWin32(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13688,"byte_end":13703,"line_start":322,"line_end":322,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13708,"byte_end":13746,"line_start":323,"line_end":323,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13751,"byte_end":13875,"line_start":324,"line_end":324,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14105,"byte_end":14119,"line_start":329,"line_end":329,"column_start":5,"column_end":19},"name":"OpaqueWin32Kmt","qualname":"::ExternalBufferMemory::OpaqueWin32Kmt","value":"ExternalBufferMemory::OpaqueWin32Kmt(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13905,"byte_end":13920,"line_start":326,"line_end":326,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13925,"byte_end":13963,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13968,"byte_end":14100,"line_start":328,"line_end":328,"column_start":5,"column_end":137}}]},{"kind":"TupleVariant","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14327,"byte_end":14339,"line_start":333,"line_end":333,"column_start":5,"column_end":17},"name":"D3D11Texture","qualname":"::ExternalBufferMemory::D3D11Texture","value":"ExternalBufferMemory::D3D11Texture(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14133,"byte_end":14148,"line_start":330,"line_end":330,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14153,"byte_end":14191,"line_start":331,"line_end":331,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14196,"byte_end":14322,"line_start":332,"line_end":332,"column_start":5,"column_end":131}}]},{"kind":"TupleVariant","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14555,"byte_end":14570,"line_start":337,"line_end":337,"column_start":5,"column_end":20},"name":"D3D11TextureKmt","qualname":"::ExternalBufferMemory::D3D11TextureKmt","value":"ExternalBufferMemory::D3D11TextureKmt(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14353,"byte_end":14368,"line_start":334,"line_end":334,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14373,"byte_end":14411,"line_start":335,"line_end":335,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14416,"byte_end":14550,"line_start":336,"line_end":336,"column_start":5,"column_end":139}}]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14772,"byte_end":14781,"line_start":341,"line_end":341,"column_start":5,"column_end":14},"name":"D3D12Heap","qualname":"::ExternalBufferMemory::D3D12Heap","value":"ExternalBufferMemory::D3D12Heap(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14584,"byte_end":14599,"line_start":338,"line_end":338,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14604,"byte_end":14642,"line_start":339,"line_end":339,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14647,"byte_end":14767,"line_start":340,"line_end":340,"column_start":5,"column_end":125}}]},{"kind":"TupleVariant","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14991,"byte_end":15004,"line_start":345,"line_end":345,"column_start":5,"column_end":18},"name":"D3D12Resource","qualname":"::ExternalBufferMemory::D3D12Resource","value":"ExternalBufferMemory::D3D12Resource(Handle)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14795,"byte_end":14810,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14815,"byte_end":14853,"line_start":343,"line_end":343,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":14858,"byte_end":14986,"line_start":344,"line_end":344,"column_start":5,"column_end":133}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15642,"byte_end":15656,"line_start":355,"line_end":355,"column_start":5,"column_end":19},"name":"HostAllocation","qualname":"::ExternalBufferMemory::HostAllocation","value":"ExternalBufferMemory::HostAllocation(Ptr)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION] while holding a [Ptr][Ptr].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION] while holding a [Ptr][Ptr].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15513,"byte_end":15637,"line_start":354,"line_end":354,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15818,"byte_end":15841,"line_start":357,"line_end":357,"column_start":5,"column_end":28},"name":"HostMappedForeignMemory","qualname":"::ExternalBufferMemory::HostMappedForeignMemory","value":"ExternalBufferMemory::HostMappedForeignMemory(Ptr)","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY] while holding a [Ptr][Ptr].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY] while holding a [Ptr][Ptr].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15667,"byte_end":15813,"line_start":356,"line_end":356,"column_start":5,"column_end":151}}]},{"kind":"Enum","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13471,"byte_end":13491,"line_start":317,"line_end":317,"column_start":10,"column_end":30},"name":"ExternalBufferMemory","qualname":"::ExternalBufferMemory","value":"pub enum ExternalBufferMemory {\n    OpaqueWin32(Handle),\n    OpaqueWin32Kmt(Handle),\n    D3D11Texture(Handle),\n    D3D11TextureKmt(Handle),\n    D3D12Heap(Handle),\n    D3D12Resource(Handle),\n    HostAllocation(Ptr),\n    HostMappedForeignMemory(Ptr),\n}","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258}],"decl_id":null,"docs":" Representation of an external memory for buffer creation.\n","sig":null,"attributes":[{"value":"/ Representation of an external memory for buffer creation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":13383,"byte_end":13444,"line_start":315,"line_end":315,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15962,"byte_end":15982,"line_start":361,"line_end":361,"column_start":12,"column_end":32},"name":"external_memory_type","qualname":"<ExternalBufferMemory>::external_memory_type","value":"pub fn external_memory_type(&Self) -> ExternalMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Get the [ExternalMemoryType][ExternalMemoryType] from this enum.\n","sig":null,"attributes":[{"value":"/ Get the [ExternalMemoryType][ExternalMemoryType] from this enum.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15882,"byte_end":15950,"line_start":360,"line_end":360,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":17248,"byte_end":17268,"line_start":387,"line_end":387,"column_start":12,"column_end":32},"name":"platform_memory_type","qualname":"<ExternalBufferMemory>::platform_memory_type","value":"pub fn platform_memory_type(&Self) -> PlatformMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Get the [PlatformMemoryType][PlatformMemoryType] from this enum.\n","sig":null,"attributes":[{"value":"/ Get the [PlatformMemoryType][PlatformMemoryType] from this enum.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":17168,"byte_end":17236,"line_start":386,"line_end":386,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":18879,"byte_end":18885,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"name":"handle","qualname":"<ExternalBufferMemory>::handle","value":"pub fn handle(&Self) -> Option<&Handle>","parent":null,"children":[],"decl_id":null,"docs":" Get the associated windows handle as ([Handle][Handle]).\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":18787,"byte_end":18802,"line_start":424,"line_end":424,"column_start":5,"column_end":20}},{"value":"/ Get the associated windows handle as ([Handle][Handle]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":18807,"byte_end":18867,"line_start":425,"line_end":425,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19381,"byte_end":19384,"line_start":439,"line_end":439,"column_start":12,"column_end":15},"name":"ptr","qualname":"<ExternalBufferMemory>::ptr","value":"pub fn ptr(&Self) -> Option<&Ptr>","parent":null,"children":[],"decl_id":null,"docs":" Get the associated host pointer as ([Ptr][Ptr]).\n","sig":null,"attributes":[{"value":"/ Get the associated host pointer as ([Ptr][Ptr]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19317,"byte_end":19369,"line_start":438,"line_end":438,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19806,"byte_end":19830,"line_start":451,"line_end":451,"column_start":10,"column_end":34},"name":"ExternalBufferMemoryType","qualname":"::ExternalBufferMemoryType","value":"ExternalMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Representation of an external memory type for buffers.\n","sig":null,"attributes":[{"value":"/ Representation of an external memory type for buffers.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19738,"byte_end":19796,"line_start":450,"line_end":450,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20350,"byte_end":20361,"line_start":464,"line_end":464,"column_start":5,"column_end":16},"name":"OpaqueWin32","qualname":"::ExternalImageMemory::OpaqueWin32","value":"ExternalImageMemory::OpaqueWin32(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20158,"byte_end":20173,"line_start":461,"line_end":461,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20178,"byte_end":20216,"line_start":462,"line_end":462,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20221,"byte_end":20345,"line_start":463,"line_end":463,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20575,"byte_end":20589,"line_start":468,"line_end":468,"column_start":5,"column_end":19},"name":"OpaqueWin32Kmt","qualname":"::ExternalImageMemory::OpaqueWin32Kmt","value":"ExternalImageMemory::OpaqueWin32Kmt(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20375,"byte_end":20390,"line_start":465,"line_end":465,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20395,"byte_end":20433,"line_start":466,"line_end":466,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20438,"byte_end":20570,"line_start":467,"line_end":467,"column_start":5,"column_end":137}}]},{"kind":"TupleVariant","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20797,"byte_end":20809,"line_start":472,"line_end":472,"column_start":5,"column_end":17},"name":"D3D11Texture","qualname":"::ExternalImageMemory::D3D11Texture","value":"ExternalImageMemory::D3D11Texture(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20603,"byte_end":20618,"line_start":469,"line_end":469,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20623,"byte_end":20661,"line_start":470,"line_end":470,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20666,"byte_end":20792,"line_start":471,"line_end":471,"column_start":5,"column_end":131}}]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21025,"byte_end":21040,"line_start":476,"line_end":476,"column_start":5,"column_end":20},"name":"D3D11TextureKmt","qualname":"::ExternalImageMemory::D3D11TextureKmt","value":"ExternalImageMemory::D3D11TextureKmt(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20823,"byte_end":20838,"line_start":473,"line_end":473,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20843,"byte_end":20881,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":20886,"byte_end":21020,"line_start":475,"line_end":475,"column_start":5,"column_end":139}}]},{"kind":"TupleVariant","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21242,"byte_end":21251,"line_start":480,"line_end":480,"column_start":5,"column_end":14},"name":"D3D12Heap","qualname":"::ExternalImageMemory::D3D12Heap","value":"ExternalImageMemory::D3D12Heap(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21054,"byte_end":21069,"line_start":477,"line_end":477,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21074,"byte_end":21112,"line_start":478,"line_end":478,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21117,"byte_end":21237,"line_start":479,"line_end":479,"column_start":5,"column_end":125}}]},{"kind":"TupleVariant","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21461,"byte_end":21474,"line_start":484,"line_end":484,"column_start":5,"column_end":18},"name":"D3D12Resource","qualname":"::ExternalImageMemory::D3D12Resource","value":"ExternalImageMemory::D3D12Resource(Handle)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE] while holding a [Handle][Handle].\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21265,"byte_end":21280,"line_start":481,"line_end":481,"column_start":5,"column_end":20}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21285,"byte_end":21323,"line_start":482,"line_end":482,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE] while holding a [Handle][Handle].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":21328,"byte_end":21456,"line_start":483,"line_end":483,"column_start":5,"column_end":133}}]},{"kind":"TupleVariant","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22146,"byte_end":22160,"line_start":494,"line_end":494,"column_start":5,"column_end":19},"name":"HostAllocation","qualname":"::ExternalImageMemory::HostAllocation","value":"ExternalImageMemory::HostAllocation(Ptr)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION] while holding a [Ptr][Ptr].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION] while holding a [Ptr][Ptr].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22017,"byte_end":22141,"line_start":493,"line_end":493,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22322,"byte_end":22345,"line_start":496,"line_end":496,"column_start":5,"column_end":28},"name":"HostMappedForeignMemory","qualname":"::ExternalImageMemory::HostMappedForeignMemory","value":"ExternalImageMemory::HostMappedForeignMemory(Ptr)","parent":{"krate":0,"index":263},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY] while holding a [Ptr][Ptr].\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY] while holding a [Ptr][Ptr].","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22171,"byte_end":22317,"line_start":495,"line_end":495,"column_start":5,"column_end":151}}]},{"kind":"Enum","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19942,"byte_end":19961,"line_start":456,"line_end":456,"column_start":10,"column_end":29},"name":"ExternalImageMemory","qualname":"::ExternalImageMemory","value":"pub enum ExternalImageMemory {\n    OpaqueWin32(Handle),\n    OpaqueWin32Kmt(Handle),\n    D3D11Texture(Handle),\n    D3D11TextureKmt(Handle),\n    D3D12Heap(Handle),\n    D3D12Resource(Handle),\n    HostAllocation(Ptr),\n    HostMappedForeignMemory(Ptr),\n}","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285}],"decl_id":null,"docs":" Representation of an external memory for image creation.\n","sig":null,"attributes":[{"value":"/ Representation of an external memory for image creation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":19855,"byte_end":19915,"line_start":454,"line_end":454,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22465,"byte_end":22485,"line_start":500,"line_end":500,"column_start":12,"column_end":32},"name":"external_memory_type","qualname":"<ExternalImageMemory>::external_memory_type","value":"pub fn external_memory_type(&Self) -> ExternalMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Get the [ExternalMemoryType][ExternalMemoryType] from this enum.\n","sig":null,"attributes":[{"value":"/ Get the [ExternalMemoryType][ExternalMemoryType] from this enum.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22385,"byte_end":22453,"line_start":499,"line_end":499,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":23754,"byte_end":23774,"line_start":526,"line_end":526,"column_start":12,"column_end":32},"name":"platform_memory_type","qualname":"<ExternalImageMemory>::platform_memory_type","value":"pub fn platform_memory_type(&Self) -> PlatformMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Get the [PlatformMemoryType][PlatformMemoryType] from this enum.\n","sig":null,"attributes":[{"value":"/ Get the [PlatformMemoryType][PlatformMemoryType] from this enum.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":23674,"byte_end":23742,"line_start":525,"line_end":525,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":25413,"byte_end":25419,"line_start":566,"line_end":566,"column_start":12,"column_end":18},"name":"handle","qualname":"<ExternalImageMemory>::handle","value":"pub fn handle(&Self) -> Option<&Handle>","parent":null,"children":[],"decl_id":null,"docs":" Get the associated windows handle as ([Handle][Handle]).\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":25321,"byte_end":25336,"line_start":564,"line_end":564,"column_start":5,"column_end":20}},{"value":"/ Get the associated windows handle as ([Handle][Handle]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":25341,"byte_end":25401,"line_start":565,"line_end":565,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":25915,"byte_end":25918,"line_start":579,"line_end":579,"column_start":12,"column_end":15},"name":"ptr","qualname":"<ExternalImageMemory>::ptr","value":"pub fn ptr(&Self) -> Option<&Ptr>","parent":null,"children":[],"decl_id":null,"docs":" Get the associated host pointer as ([Ptr][Ptr]).\n","sig":null,"attributes":[{"value":"/ Get the associated host pointer as ([Ptr][Ptr]).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":25851,"byte_end":25903,"line_start":578,"line_end":578,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26743,"byte_end":26754,"line_start":601,"line_end":601,"column_start":5,"column_end":16},"name":"OpaqueWin32","qualname":"::ExternalImageMemoryType::OpaqueWin32","value":"ExternalImageMemoryType::OpaqueWin32","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26575,"byte_end":26600,"line_start":598,"line_end":598,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26605,"byte_end":26643,"line_start":599,"line_end":599,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32][ExternalMemoryTypeFlags::OPAQUE_WIN32]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26648,"byte_end":26738,"line_start":600,"line_end":600,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26936,"byte_end":26950,"line_start":605,"line_end":605,"column_start":5,"column_end":19},"name":"OpaqueWin32Kmt","qualname":"::ExternalImageMemoryType::OpaqueWin32Kmt","value":"ExternalImageMemoryType::OpaqueWin32Kmt","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26760,"byte_end":26785,"line_start":602,"line_end":602,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26790,"byte_end":26828,"line_start":603,"line_end":603,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT][ExternalMemoryTypeFlags::OPAQUE_WIN32_KMT]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26833,"byte_end":26931,"line_start":604,"line_end":604,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27126,"byte_end":27138,"line_start":609,"line_end":609,"column_start":5,"column_end":17},"name":"D3D11Texture","qualname":"::ExternalImageMemoryType::D3D11Texture","value":"ExternalImageMemoryType::D3D11Texture","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26956,"byte_end":26981,"line_start":606,"line_end":606,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26986,"byte_end":27024,"line_start":607,"line_end":607,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE][ExternalMemoryTypeFlags::D3D11_TEXTURE]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27029,"byte_end":27121,"line_start":608,"line_end":608,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27322,"byte_end":27337,"line_start":613,"line_end":613,"column_start":5,"column_end":20},"name":"D3D11TextureKmt","qualname":"::ExternalImageMemoryType::D3D11TextureKmt","value":"ExternalImageMemoryType::D3D11TextureKmt","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27144,"byte_end":27169,"line_start":610,"line_end":610,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27174,"byte_end":27212,"line_start":611,"line_end":611,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT][ExternalMemoryTypeFlags::D3D11_TEXTURE_KMT]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27217,"byte_end":27317,"line_start":612,"line_end":612,"column_start":5,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27507,"byte_end":27516,"line_start":617,"line_end":617,"column_start":5,"column_end":14},"name":"D3D12Heap","qualname":"::ExternalImageMemoryType::D3D12Heap","value":"ExternalImageMemoryType::D3D12Heap","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27343,"byte_end":27368,"line_start":614,"line_end":614,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27373,"byte_end":27411,"line_start":615,"line_end":615,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_HEAP][ExternalMemoryTypeFlags::D3D12_HEAP]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27416,"byte_end":27502,"line_start":616,"line_end":616,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27694,"byte_end":27707,"line_start":621,"line_end":621,"column_start":5,"column_end":18},"name":"D3D12Resource","qualname":"::ExternalImageMemoryType::D3D12Resource","value":"ExternalImageMemoryType::D3D12Resource","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" This is supported on Windows only.\n Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE]\n","sig":null,"attributes":[{"value":"cfg(any(windows, doc))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27522,"byte_end":27547,"line_start":618,"line_end":618,"column_start":5,"column_end":30}},{"value":"/ This is supported on Windows only.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27552,"byte_end":27590,"line_start":619,"line_end":619,"column_start":5,"column_end":43}},{"value":"/ Same as [ExternalMemoryTypeFlags::D3D12_RESOURCE][ExternalMemoryTypeFlags::D3D12_RESOURCE]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":27595,"byte_end":27689,"line_start":620,"line_end":620,"column_start":5,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28277,"byte_end":28291,"line_start":631,"line_end":631,"column_start":5,"column_end":19},"name":"HostAllocation","qualname":"::ExternalImageMemoryType::HostAllocation","value":"ExternalImageMemoryType::HostAllocation","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION]\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_ALLOCATION][ExternalMemoryTypeFlags::HOST_ALLOCATION]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28176,"byte_end":28272,"line_start":630,"line_end":630,"column_start":5,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28420,"byte_end":28443,"line_start":633,"line_end":633,"column_start":5,"column_end":28},"name":"HostMappedForeignMemory","qualname":"::ExternalImageMemoryType::HostMappedForeignMemory","value":"ExternalImageMemoryType::HostMappedForeignMemory","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY]\n","sig":null,"attributes":[{"value":"/ Same as [ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY][ExternalMemoryTypeFlags::HOST_MAPPED_FOREIGN_MEMORY]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28297,"byte_end":28415,"line_start":632,"line_end":632,"column_start":5,"column_end":123}}]},{"kind":"Enum","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26375,"byte_end":26398,"line_start":593,"line_end":593,"column_start":10,"column_end":33},"name":"ExternalImageMemoryType","qualname":"::ExternalImageMemoryType","value":"pub enum ExternalImageMemoryType {\n    OpaqueWin32,\n    OpaqueWin32Kmt,\n    D3D11Texture,\n    D3D11TextureKmt,\n    D3D12Heap,\n    D3D12Resource,\n    HostAllocation,\n    HostMappedForeignMemory,\n}","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305}],"decl_id":null,"docs":" Representation of an external memory type for images.\n","sig":null,"attributes":[{"value":"/ Representation of an external memory type for images.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":26273,"byte_end":26330,"line_start":591,"line_end":591,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28562,"byte_end":28582,"line_start":637,"line_end":637,"column_start":12,"column_end":32},"name":"external_memory_type","qualname":"<ExternalImageMemoryType>::external_memory_type","value":"pub fn external_memory_type(&Self) -> ExternalMemoryType","parent":null,"children":[],"decl_id":null,"docs":" Get the [ExternalMemoryType][ExternalMemoryType] from this enum.\n","sig":null,"attributes":[{"value":"/ Get the [ExternalMemoryType][ExternalMemoryType] from this enum.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28482,"byte_end":28550,"line_start":636,"line_end":636,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":29918,"byte_end":29929,"line_start":668,"line_end":668,"column_start":12,"column_end":23},"name":"PlaneLayout","qualname":"::PlaneLayout","value":"PlaneLayout { slice, row_pitch, array_pitch, depth_pitch }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"decl_id":null,"docs":" Footprint of a plane layout in memory.\n","sig":null,"attributes":[{"value":"/ Footprint of a plane layout in memory.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":29756,"byte_end":29798,"line_start":665,"line_end":665,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":29988,"byte_end":29993,"line_start":670,"line_end":670,"column_start":9,"column_end":14},"name":"slice","qualname":"::PlaneLayout::slice","value":"std::ops::Range<u64>","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Byte slice occupied by the subresource.\n","sig":null,"attributes":[{"value":"/ Byte slice occupied by the subresource.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":29936,"byte_end":29979,"line_start":669,"line_end":669,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30054,"byte_end":30063,"line_start":672,"line_end":672,"column_start":9,"column_end":18},"name":"row_pitch","qualname":"::PlaneLayout::row_pitch","value":"u64","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Byte distance between rows.\n","sig":null,"attributes":[{"value":"/ Byte distance between rows.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30014,"byte_end":30045,"line_start":671,"line_end":671,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30125,"byte_end":30136,"line_start":674,"line_end":674,"column_start":9,"column_end":20},"name":"array_pitch","qualname":"::PlaneLayout::array_pitch","value":"u64","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Byte distance between array layers.\n","sig":null,"attributes":[{"value":"/ Byte distance between array layers.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30077,"byte_end":30116,"line_start":673,"line_end":673,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30198,"byte_end":30209,"line_start":676,"line_end":676,"column_start":9,"column_end":20},"name":"depth_pitch","qualname":"::PlaneLayout::depth_pitch","value":"u64","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Byte distance between depth slices.\n","sig":null,"attributes":[{"value":"/ Byte distance between depth slices.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30150,"byte_end":30189,"line_start":675,"line_end":675,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30370,"byte_end":30394,"line_start":681,"line_end":681,"column_start":12,"column_end":36},"name":"DrmFormatImageProperties","qualname":"::DrmFormatImageProperties","value":"DrmFormatImageProperties { drm_modifier, plane_layouts }","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" Description of drm format properties used to create an image using drm format modifier.\n","sig":null,"attributes":[{"value":"/ Description of drm format properties used to create an image using drm format modifier.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30222,"byte_end":30313,"line_start":679,"line_end":679,"column_start":1,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30433,"byte_end":30445,"line_start":683,"line_end":683,"column_start":9,"column_end":21},"name":"drm_modifier","qualname":"::DrmFormatImageProperties::drm_modifier","value":"drm_fourcc::DrmModifier","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Drm format modifier\n","sig":null,"attributes":[{"value":"/ Drm format modifier","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30401,"byte_end":30424,"line_start":682,"line_end":682,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30502,"byte_end":30515,"line_start":685,"line_end":685,"column_start":9,"column_end":22},"name":"plane_layouts","qualname":"::DrmFormatImageProperties::plane_layouts","value":"std::vec::Vec<PlaneLayout>","parent":{"krate":0,"index":333},"children":[],"decl_id":null,"docs":" Plane subresource layouts\n","sig":null,"attributes":[{"value":"/ Plane subresource layouts","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":30464,"byte_end":30493,"line_start":684,"line_end":684,"column_start":5,"column_end":34}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30654,"byte_end":30660,"line_start":4,"line_end":4,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30798,"byte_end":30804,"line_start":10,"line_end":10,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":7}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30918,"byte_end":30924,"line_start":15,"line_end":15,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31133,"byte_end":31136,"line_start":4,"line_end":4,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31269,"byte_end":31272,"line_start":10,"line_end":10,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31393,"byte_end":31396,"line_start":15,"line_end":15,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":492,"byte_end":506,"line_start":28,"line_end":28,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":1691,"byte_end":1705,"line_start":72,"line_end":72,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2091,"byte_end":2105,"line_start":85,"line_end":85,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2629,"byte_end":2643,"line_start":106,"line_end":106,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2741,"byte_end":2755,"line_start":112,"line_end":112,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":7364,"byte_end":7387,"line_start":189,"line_end":189,"column_start":35,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":8649,"byte_end":8672,"line_start":216,"line_end":216,"column_start":40,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":12130,"byte_end":12148,"line_start":288,"line_end":288,"column_start":35,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15855,"byte_end":15875,"line_start":359,"line_end":359,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22359,"byte_end":22378,"line_start":498,"line_end":498,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28452,"byte_end":28475,"line_start":635,"line_end":635,"column_start":6,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30654,"byte_end":30660,"line_start":4,"line_end":4,"column_start":38,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":73},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30798,"byte_end":30804,"line_start":10,"line_end":10,"column_start":44,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":73},"to":{"krate":1,"index":6011}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\handle.rs","byte_start":30918,"byte_end":30924,"line_start":15,"line_end":15,"column_start":26,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":73},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31133,"byte_end":31136,"line_start":4,"line_end":4,"column_start":6,"column_end":9},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31269,"byte_end":31272,"line_start":10,"line_end":10,"column_start":26,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":78},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\ptr.rs","byte_start":31393,"byte_end":31396,"line_start":15,"line_end":15,"column_start":26,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":78},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":492,"byte_end":506,"line_start":28,"line_end":28,"column_start":6,"column_end":20},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":1691,"byte_end":1705,"line_start":72,"line_end":72,"column_start":40,"column_end":54},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":2966}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2091,"byte_end":2105,"line_start":85,"line_end":85,"column_start":37,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":2966}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2629,"byte_end":2643,"line_start":106,"line_end":106,"column_start":23,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":2741,"byte_end":2755,"line_start":112,"line_end":112,"column_start":20,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":7364,"byte_end":7387,"line_start":189,"line_end":189,"column_start":35,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":8649,"byte_end":8672,"line_start":216,"line_end":216,"column_start":40,"column_end":63},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":12130,"byte_end":12148,"line_start":288,"line_end":288,"column_start":35,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":211},"to":{"krate":2,"index":2960}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":15855,"byte_end":15875,"line_start":359,"line_end":359,"column_start":6,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":22359,"byte_end":22378,"line_start":498,"line_end":498,"column_start":6,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\external-memory-0.0.1\\src\\lib.rs","byte_start":28452,"byte_end":28475,"line_start":635,"line_end":635,"column_start":6,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}}]}