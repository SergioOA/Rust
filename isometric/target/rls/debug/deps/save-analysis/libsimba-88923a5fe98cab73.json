{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","simba","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","--cfg","feature=\"wide\"","-C","metadata=88923a5fe98cab73","-C","extra-filename=-88923a5fe98cab73","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","--extern","approx=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libapprox-05f36c85db4b1f3d.rmeta","--extern","num_complex=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libnum_complex-a07ff4380fda4b16.rmeta","--extern","num_traits=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libnum_traits-297befecaba3c9be.rmeta","--extern","paste=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\paste-8dc92792cd786e39.dll","--extern","wide=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libwide-21c6bd9d9a3b0284.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libsimba-88923a5fe98cab73.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[7571330691535096746,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","num":16,"id":{"name":"num_traits","disambiguator":[5402895190348354751,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","num":17,"id":{"name":"approx","disambiguator":[15255342555949291988,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","num":18,"id":{"name":"num_complex","disambiguator":[12217655096360217670,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","num":19,"id":{"name":"wide","disambiguator":[13036478578387036777,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","num":20,"id":{"name":"safe_arch","disambiguator":[8225226741313275532,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","num":21,"id":{"name":"bytemuck","disambiguator":[9396970804000534196,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","num":22,"id":{"name":"bytemuck_derive","disambiguator":[16691534005265990648,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","num":23,"id":{"name":"paste","disambiguator":[18031045734007913693,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2303,"byte_end":2312,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2337,"byte_end":2345,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2347,"byte_end":2357,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57502,"byte_end":57503,"line_start":3,"line_end":3,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57597,"byte_end":57605,"line_start":6,"line_end":6,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57635,"byte_end":57651,"line_start":7,"line_end":7,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57680,"byte_end":57690,"line_start":8,"line_end":8,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57724,"byte_end":57738,"line_start":9,"line_end":9,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57765,"byte_end":57778,"line_start":10,"line_end":10,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57807,"byte_end":57817,"line_start":11,"line_end":11,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57846,"byte_end":57864,"line_start":12,"line_end":12,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57866,"byte_end":57875,"line_start":12,"line_end":12,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43119},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57934,"byte_end":57947,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43120},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57934,"byte_end":57947,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43135},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57949,"byte_end":57962,"line_start":14,"line_end":14,"column_start":47,"column_end":60},"alias_span":null,"name":"WideBoolF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43136},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57949,"byte_end":57962,"line_start":14,"line_end":14,"column_start":47,"column_end":60},"alias_span":null,"name":"WideBoolF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43111},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57964,"byte_end":57973,"line_start":14,"line_end":14,"column_start":62,"column_end":71},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43112},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57964,"byte_end":57973,"line_start":14,"line_end":14,"column_start":62,"column_end":71},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43127},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57975,"byte_end":57984,"line_start":14,"line_end":14,"column_start":73,"column_end":82},"alias_span":null,"name":"WideF32x8","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":43128},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57975,"byte_end":57984,"line_start":14,"line_end":14,"column_start":73,"column_end":82},"alias_span":null,"name":"WideF32x8","value":"","parent":{"krate":0,"index":289}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":289}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"*\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":84},{"krate":0,"index":190},{"krate":0,"index":255}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":2982,"byte_end":2991,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + PartialOrd","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":2918,"byte_end":2948,"line_start":20,"line_end":20,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":2949,"byte_end":2971,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3179,"byte_end":3195,"line_start":30,"line_end":30,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"pub fn is_sign_positive(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3126,"byte_end":3171,"line_start":29,"line_end":29,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3269,"byte_end":3285,"line_start":32,"line_end":32,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"pub fn is_sign_negative(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3216,"byte_end":3261,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3515,"byte_end":3523,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"pub fn copysign(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3306,"byte_end":3346,"line_start":33,"line_end":33,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3351,"byte_end":3354,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3359,"byte_end":3430,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3435,"byte_end":3507,"line_start":36,"line_end":36,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3559,"byte_end":3562,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3598,"byte_end":3601,"line_start":40,"line_end":40,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3637,"byte_end":3642,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"pub fn clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3687,"byte_end":3692,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"pub fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3803,"byte_end":3812,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"min_value","qualname":"::scalar::real::RealField::min_value","value":"pub fn min_value() -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The smallest finite positive value representable using this type.\n","sig":null,"attributes":[{"value":"/ The smallest finite positive value representable using this type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3726,"byte_end":3795,"line_start":44,"line_end":44,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3912,"byte_end":3921,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"max_value","qualname":"::scalar::real::RealField::max_value","value":"pub fn max_value() -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The largest finite positive value representable using this type.\n","sig":null,"attributes":[{"value":"/ The largest finite positive value representable using this type.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3836,"byte_end":3904,"line_start":46,"line_end":46,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3949,"byte_end":3951,"line_start":49,"line_end":49,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"pub fn pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3970,"byte_end":3976,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"pub fn two_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3995,"byte_end":4004,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4023,"byte_end":4032,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4051,"byte_end":4060,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4079,"byte_end":4088,"line_start":54,"line_end":54,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"pub fn frac_pi_6() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4107,"byte_end":4116,"line_start":55,"line_end":55,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"pub fn frac_pi_8() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4135,"byte_end":4144,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"pub fn frac_1_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4163,"byte_end":4172,"line_start":57,"line_end":57,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"pub fn frac_2_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4191,"byte_end":4205,"line_start":58,"line_end":58,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"pub fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4225,"byte_end":4226,"line_start":60,"line_end":60,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"pub fn e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4245,"byte_end":4251,"line_start":61,"line_end":61,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"pub fn log2_e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4270,"byte_end":4277,"line_start":62,"line_end":62,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"pub fn log10_e() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4296,"byte_end":4300,"line_start":63,"line_end":63,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"pub fn ln_2() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":4319,"byte_end":4324,"line_start":64,"line_end":64,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"pub fn ln_10() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16189,"byte_end":16201,"line_start":169,"line_end":169,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + FromPrimitive + Field<Element = Self,\nSimdBool = Self> + Neg<Output = Self> + Clone + Send + Sync + Any + 'static +\nDebug + Display","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":15707,"byte_end":15784,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":15785,"byte_end":15788,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":15789,"byte_end":15889,"line_start":164,"line_end":164,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":15890,"byte_end":15994,"line_start":165,"line_end":165,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16156,"byte_end":16178,"line_start":168,"line_end":168,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16477,"byte_end":16486,"line_start":185,"line_end":185,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16546,"byte_end":16555,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"pub fn is_finite(&Self) -> bool","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16579,"byte_end":16587,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"pub fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":132},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48222,"byte_end":48231,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48138,"byte_end":48211,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48388,"byte_end":48397,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48304,"byte_end":48377,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48554,"byte_end":48563,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48470,"byte_end":48543,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48720,"byte_end":48729,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48636,"byte_end":48709,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48870,"byte_end":48879,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48802,"byte_end":48859,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49410,"byte_end":49415,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49333,"byte_end":49399,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51000,"byte_end":51008,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":49808,"byte_end":49902,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":49903,"byte_end":49999,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50000,"byte_end":50092,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50093,"byte_end":50112,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50113,"byte_end":50116,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50117,"byte_end":50209,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50210,"byte_end":50301,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50302,"byte_end":50314,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50315,"byte_end":50411,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50412,"byte_end":50448,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50449,"byte_end":50547,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50548,"byte_end":50567,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50568,"byte_end":50664,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50665,"byte_end":50703,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50704,"byte_end":50707,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50708,"byte_end":50803,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50804,"byte_end":50892,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":50893,"byte_end":50989,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51114,"byte_end":51125,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"pub fn to_superset(&Self) -> T","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51025,"byte_end":51106,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51341,"byte_end":51354,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"pub fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51144,"byte_end":51238,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51243,"byte_end":51256,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51261,"byte_end":51264,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51269,"byte_end":51333,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51642,"byte_end":51665,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"pub fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51539,"byte_end":51634,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51792,"byte_end":51804,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"pub fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51693,"byte_end":51784,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52977,"byte_end":52987,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51830,"byte_end":51927,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51928,"byte_end":52016,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52017,"byte_end":52087,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52088,"byte_end":52091,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52092,"byte_end":52184,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52185,"byte_end":52276,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52277,"byte_end":52289,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52290,"byte_end":52386,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52387,"byte_end":52423,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52424,"byte_end":52521,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52522,"byte_end":52544,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52545,"byte_end":52641,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52642,"byte_end":52680,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52681,"byte_end":52684,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52685,"byte_end":52780,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52781,"byte_end":52869,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52870,"byte_end":52966,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53201,"byte_end":53210,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"pub fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53004,"byte_end":53098,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53103,"byte_end":53116,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53121,"byte_end":53124,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53129,"byte_end":53193,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53459,"byte_end":53471,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"pub fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53366,"byte_end":53451,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53594,"byte_end":53613,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"pub fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53493,"byte_end":53586,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53721,"byte_end":53732,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"pub fn from_subset(&T) -> Self","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53632,"byte_end":53713,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":566},{"krate":0,"index":635},{"krate":0,"index":740},{"krate":0,"index":761},{"krate":0,"index":790},{"krate":0,"index":843},{"krate":0,"index":863},{"krate":0,"index":896}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"/ Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\mod.rs","byte_start":57414,"byte_end":57470,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1842},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60835,"byte_end":60843,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"AutoSimd","qualname":"::simd::auto_simd_impl::AutoSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60622,"byte_end":60706,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60707,"byte_end":60710,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60711,"byte_end":60759,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60760,"byte_end":60778,"line_start":42,"line_end":42,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60847,"byte_end":60852,"line_start":44,"line_end":44,"column_start":24,"column_end":29},"name":"0","qualname":"::simd::auto_simd_impl::AutoSimd::0","value":"N","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":61076,"byte_end":61088,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"AutoBoolSimd","qualname":"::simd::auto_simd_impl::AutoBoolSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60855,"byte_end":60947,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60948,"byte_end":60951,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":60952,"byte_end":61000,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":61001,"byte_end":61019,"line_start":48,"line_end":48,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":61092,"byte_end":61097,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"name":"0","qualname":"::simd::auto_simd_impl::AutoBoolSimd::0","value":"N","parent":{"krate":0,"index":1865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112411,"byte_end":112420,"line_start":1561,"line_end":1561,"column_start":10,"column_end":19},"name":"AutoF32x2","qualname":"::simd::auto_simd_impl::AutoF32x2","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112452,"byte_end":112461,"line_start":1562,"line_end":1562,"column_start":10,"column_end":19},"name":"AutoF32x4","qualname":"::simd::auto_simd_impl::AutoF32x4","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112493,"byte_end":112502,"line_start":1563,"line_end":1563,"column_start":10,"column_end":19},"name":"AutoF32x8","qualname":"::simd::auto_simd_impl::AutoF32x8","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112534,"byte_end":112544,"line_start":1564,"line_end":1564,"column_start":10,"column_end":20},"name":"AutoF32x16","qualname":"::simd::auto_simd_impl::AutoF32x16","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112577,"byte_end":112586,"line_start":1565,"line_end":1565,"column_start":10,"column_end":19},"name":"AutoF64x2","qualname":"::simd::auto_simd_impl::AutoF64x2","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112618,"byte_end":112627,"line_start":1566,"line_end":1566,"column_start":10,"column_end":19},"name":"AutoF64x4","qualname":"::simd::auto_simd_impl::AutoF64x4","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112659,"byte_end":112668,"line_start":1567,"line_end":1567,"column_start":10,"column_end":19},"name":"AutoF64x8","qualname":"::simd::auto_simd_impl::AutoF64x8","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112700,"byte_end":112710,"line_start":1568,"line_end":1568,"column_start":10,"column_end":20},"name":"AutoI128x1","qualname":"::simd::auto_simd_impl::AutoI128x1","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112743,"byte_end":112753,"line_start":1569,"line_end":1569,"column_start":10,"column_end":20},"name":"AutoI128x2","qualname":"::simd::auto_simd_impl::AutoI128x2","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112786,"byte_end":112796,"line_start":1570,"line_end":1570,"column_start":10,"column_end":20},"name":"AutoI128x4","qualname":"::simd::auto_simd_impl::AutoI128x4","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112829,"byte_end":112838,"line_start":1571,"line_end":1571,"column_start":10,"column_end":19},"name":"AutoI16x2","qualname":"::simd::auto_simd_impl::AutoI16x2","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112870,"byte_end":112879,"line_start":1572,"line_end":1572,"column_start":10,"column_end":19},"name":"AutoI16x4","qualname":"::simd::auto_simd_impl::AutoI16x4","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112911,"byte_end":112920,"line_start":1573,"line_end":1573,"column_start":10,"column_end":19},"name":"AutoI16x8","qualname":"::simd::auto_simd_impl::AutoI16x8","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112952,"byte_end":112962,"line_start":1574,"line_end":1574,"column_start":10,"column_end":20},"name":"AutoI16x16","qualname":"::simd::auto_simd_impl::AutoI16x16","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":112995,"byte_end":113005,"line_start":1575,"line_end":1575,"column_start":10,"column_end":20},"name":"AutoI16x32","qualname":"::simd::auto_simd_impl::AutoI16x32","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113038,"byte_end":113047,"line_start":1576,"line_end":1576,"column_start":10,"column_end":19},"name":"AutoI32x2","qualname":"::simd::auto_simd_impl::AutoI32x2","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113079,"byte_end":113088,"line_start":1577,"line_end":1577,"column_start":10,"column_end":19},"name":"AutoI32x4","qualname":"::simd::auto_simd_impl::AutoI32x4","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113120,"byte_end":113129,"line_start":1578,"line_end":1578,"column_start":10,"column_end":19},"name":"AutoI32x8","qualname":"::simd::auto_simd_impl::AutoI32x8","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113161,"byte_end":113171,"line_start":1579,"line_end":1579,"column_start":10,"column_end":20},"name":"AutoI32x16","qualname":"::simd::auto_simd_impl::AutoI32x16","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113204,"byte_end":113213,"line_start":1580,"line_end":1580,"column_start":10,"column_end":19},"name":"AutoI64x2","qualname":"::simd::auto_simd_impl::AutoI64x2","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113245,"byte_end":113254,"line_start":1581,"line_end":1581,"column_start":10,"column_end":19},"name":"AutoI64x4","qualname":"::simd::auto_simd_impl::AutoI64x4","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113286,"byte_end":113295,"line_start":1582,"line_end":1582,"column_start":10,"column_end":19},"name":"AutoI64x8","qualname":"::simd::auto_simd_impl::AutoI64x8","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113327,"byte_end":113335,"line_start":1583,"line_end":1583,"column_start":10,"column_end":18},"name":"AutoI8x2","qualname":"::simd::auto_simd_impl::AutoI8x2","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113366,"byte_end":113374,"line_start":1584,"line_end":1584,"column_start":10,"column_end":18},"name":"AutoI8x4","qualname":"::simd::auto_simd_impl::AutoI8x4","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113405,"byte_end":113413,"line_start":1585,"line_end":1585,"column_start":10,"column_end":18},"name":"AutoI8x8","qualname":"::simd::auto_simd_impl::AutoI8x8","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113444,"byte_end":113453,"line_start":1586,"line_end":1586,"column_start":10,"column_end":19},"name":"AutoI8x16","qualname":"::simd::auto_simd_impl::AutoI8x16","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113485,"byte_end":113494,"line_start":1587,"line_end":1587,"column_start":10,"column_end":19},"name":"AutoI8x32","qualname":"::simd::auto_simd_impl::AutoI8x32","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113570,"byte_end":113581,"line_start":1589,"line_end":1589,"column_start":10,"column_end":21},"name":"AutoIsizex2","qualname":"::simd::auto_simd_impl::AutoIsizex2","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113615,"byte_end":113626,"line_start":1590,"line_end":1590,"column_start":10,"column_end":21},"name":"AutoIsizex4","qualname":"::simd::auto_simd_impl::AutoIsizex4","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113660,"byte_end":113671,"line_start":1591,"line_end":1591,"column_start":10,"column_end":21},"name":"AutoIsizex8","qualname":"::simd::auto_simd_impl::AutoIsizex8","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113705,"byte_end":113715,"line_start":1592,"line_end":1592,"column_start":10,"column_end":20},"name":"AutoU128x1","qualname":"::simd::auto_simd_impl::AutoU128x1","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113748,"byte_end":113758,"line_start":1593,"line_end":1593,"column_start":10,"column_end":20},"name":"AutoU128x2","qualname":"::simd::auto_simd_impl::AutoU128x2","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113791,"byte_end":113801,"line_start":1594,"line_end":1594,"column_start":10,"column_end":20},"name":"AutoU128x4","qualname":"::simd::auto_simd_impl::AutoU128x4","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113834,"byte_end":113843,"line_start":1595,"line_end":1595,"column_start":10,"column_end":19},"name":"AutoU16x2","qualname":"::simd::auto_simd_impl::AutoU16x2","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113875,"byte_end":113884,"line_start":1596,"line_end":1596,"column_start":10,"column_end":19},"name":"AutoU16x4","qualname":"::simd::auto_simd_impl::AutoU16x4","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113916,"byte_end":113925,"line_start":1597,"line_end":1597,"column_start":10,"column_end":19},"name":"AutoU16x8","qualname":"::simd::auto_simd_impl::AutoU16x8","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":113957,"byte_end":113967,"line_start":1598,"line_end":1598,"column_start":10,"column_end":20},"name":"AutoU16x16","qualname":"::simd::auto_simd_impl::AutoU16x16","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114000,"byte_end":114010,"line_start":1599,"line_end":1599,"column_start":10,"column_end":20},"name":"AutoU16x32","qualname":"::simd::auto_simd_impl::AutoU16x32","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114043,"byte_end":114052,"line_start":1600,"line_end":1600,"column_start":10,"column_end":19},"name":"AutoU32x2","qualname":"::simd::auto_simd_impl::AutoU32x2","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114084,"byte_end":114093,"line_start":1601,"line_end":1601,"column_start":10,"column_end":19},"name":"AutoU32x4","qualname":"::simd::auto_simd_impl::AutoU32x4","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114125,"byte_end":114134,"line_start":1602,"line_end":1602,"column_start":10,"column_end":19},"name":"AutoU32x8","qualname":"::simd::auto_simd_impl::AutoU32x8","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114166,"byte_end":114176,"line_start":1603,"line_end":1603,"column_start":10,"column_end":20},"name":"AutoU32x16","qualname":"::simd::auto_simd_impl::AutoU32x16","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114209,"byte_end":114218,"line_start":1604,"line_end":1604,"column_start":10,"column_end":19},"name":"AutoU64x2","qualname":"::simd::auto_simd_impl::AutoU64x2","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114250,"byte_end":114259,"line_start":1605,"line_end":1605,"column_start":10,"column_end":19},"name":"AutoU64x4","qualname":"::simd::auto_simd_impl::AutoU64x4","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114291,"byte_end":114300,"line_start":1606,"line_end":1606,"column_start":10,"column_end":19},"name":"AutoU64x8","qualname":"::simd::auto_simd_impl::AutoU64x8","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114332,"byte_end":114340,"line_start":1607,"line_end":1607,"column_start":10,"column_end":18},"name":"AutoU8x2","qualname":"::simd::auto_simd_impl::AutoU8x2","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114371,"byte_end":114379,"line_start":1608,"line_end":1608,"column_start":10,"column_end":18},"name":"AutoU8x4","qualname":"::simd::auto_simd_impl::AutoU8x4","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114410,"byte_end":114418,"line_start":1609,"line_end":1609,"column_start":10,"column_end":18},"name":"AutoU8x8","qualname":"::simd::auto_simd_impl::AutoU8x8","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114449,"byte_end":114458,"line_start":1610,"line_end":1610,"column_start":10,"column_end":19},"name":"AutoU8x16","qualname":"::simd::auto_simd_impl::AutoU8x16","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114490,"byte_end":114499,"line_start":1611,"line_end":1611,"column_start":10,"column_end":19},"name":"AutoU8x32","qualname":"::simd::auto_simd_impl::AutoU8x32","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114575,"byte_end":114586,"line_start":1613,"line_end":1613,"column_start":10,"column_end":21},"name":"AutoUsizex2","qualname":"::simd::auto_simd_impl::AutoUsizex2","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114620,"byte_end":114631,"line_start":1614,"line_end":1614,"column_start":10,"column_end":21},"name":"AutoUsizex4","qualname":"::simd::auto_simd_impl::AutoUsizex4","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114665,"byte_end":114676,"line_start":1615,"line_end":1615,"column_start":10,"column_end":21},"name":"AutoUsizex8","qualname":"::simd::auto_simd_impl::AutoUsizex8","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114711,"byte_end":114721,"line_start":1617,"line_end":1617,"column_start":10,"column_end":20},"name":"AutoBoolx1","qualname":"::simd::auto_simd_impl::AutoBoolx1","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114754,"byte_end":114765,"line_start":1618,"line_end":1618,"column_start":10,"column_end":21},"name":"AutoBoolx16","qualname":"::simd::auto_simd_impl::AutoBoolx16","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114799,"byte_end":114809,"line_start":1619,"line_end":1619,"column_start":10,"column_end":20},"name":"AutoBoolx2","qualname":"::simd::auto_simd_impl::AutoBoolx2","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114842,"byte_end":114853,"line_start":1620,"line_end":1620,"column_start":10,"column_end":21},"name":"AutoBoolx32","qualname":"::simd::auto_simd_impl::AutoBoolx32","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114887,"byte_end":114897,"line_start":1621,"line_end":1621,"column_start":10,"column_end":20},"name":"AutoBoolx4","qualname":"::simd::auto_simd_impl::AutoBoolx4","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":114978,"byte_end":114988,"line_start":1623,"line_end":1623,"column_start":10,"column_end":20},"name":"AutoBoolx8","qualname":"::simd::auto_simd_impl::AutoBoolx8","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117690,"byte_end":117698,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self> + Not<Output = Self>","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":595},{"krate":0,"index":601}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117397,"byte_end":117454,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117455,"byte_end":117458,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117459,"byte_end":117552,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117553,"byte_end":117647,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117648,"byte_end":117679,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118013,"byte_end":118020,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"pub fn bitmask(Self) -> u64","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117841,"byte_end":117911,"line_start":16,"line_end":16,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117916,"byte_end":117919,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117924,"byte_end":118005,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118096,"byte_end":118099,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"pub fn and(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118039,"byte_end":118088,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118175,"byte_end":118177,"line_start":23,"line_end":23,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"pub fn or(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118119,"byte_end":118167,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118254,"byte_end":118257,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"pub fn xor(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118197,"byte_end":118246,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118315,"byte_end":118318,"line_start":27,"line_end":27,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"pub fn all(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118277,"byte_end":118307,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118374,"byte_end":118377,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"pub fn any(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118338,"byte_end":118366,"line_start":28,"line_end":28,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118436,"byte_end":118440,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"pub fn none(Self) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118397,"byte_end":118428,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118930,"byte_end":118937,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"pub fn if_else<Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce()\n-> Res, impl FnOnce() -> Res: FnOnce() ->\nRes>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118460,"byte_end":118549,"line_start":32,"line_end":32,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118554,"byte_end":118557,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118562,"byte_end":118671,"line_start":34,"line_end":34,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118676,"byte_end":118787,"line_start":35,"line_end":35,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118792,"byte_end":118795,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118800,"byte_end":118906,"line_start":37,"line_end":37,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":118911,"byte_end":118922,"line_start":38,"line_end":38,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119814,"byte_end":119822,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"pub fn if_else2<Res: SimdValue<SimdBool = Self>,\nimpl FnOnce() -> Res: FnOnce() -> Res, impl FnOnce() -> Self: FnOnce() ->\nSelf, impl FnOnce() -> Res: FnOnce() -> Res, impl FnOnce() -> Res: FnOnce() ->\nRes>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119087,"byte_end":119212,"line_start":45,"line_end":45,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119217,"byte_end":119220,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119225,"byte_end":119334,"line_start":47,"line_end":47,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119339,"byte_end":119511,"line_start":48,"line_end":48,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119516,"byte_end":119689,"line_start":49,"line_end":49,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119694,"byte_end":119697,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":119702,"byte_end":119806,"line_start":51,"line_end":51,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120899,"byte_end":120907,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"pub fn if_else3<Res: SimdValue<SimdBool = Self>,\nimpl FnOnce() -> Res: FnOnce() -> Res, impl FnOnce() -> Self: FnOnce() ->\nSelf, impl FnOnce() -> Res: FnOnce() -> Res, impl FnOnce() -> Self: FnOnce()\n-> Self, impl FnOnce() -> Res: FnOnce() -> Res, impl FnOnce() -> Res: FnOnce()\n->\nRes>(Self, impl FnOnce() -> Res,\n(impl FnOnce() -> Self, impl FnOnce() -> Res),\n(impl FnOnce() -> Self, impl FnOnce() -> Res), impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120036,"byte_end":120207,"line_start":59,"line_end":59,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120212,"byte_end":120215,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120220,"byte_end":120329,"line_start":61,"line_end":61,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120334,"byte_end":120506,"line_start":62,"line_end":62,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120511,"byte_end":120697,"line_start":63,"line_end":63,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120702,"byte_end":120774,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120779,"byte_end":120782,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":120787,"byte_end":120891,"line_start":66,"line_end":66,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123338,"byte_end":123354,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Clone + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":42893},{"krate":0,"index":42894},{"krate":0,"index":42895},{"krate":0,"index":42896},{"krate":0,"index":42897},{"krate":0,"index":42898},{"krate":0,"index":42899},{"krate":0,"index":42900},{"krate":0,"index":42901},{"krate":0,"index":42902},{"krate":0,"index":42903},{"krate":0,"index":42904},{"krate":0,"index":42905},{"krate":0,"index":42906},{"krate":0,"index":42907},{"krate":0,"index":42908},{"krate":0,"index":42909},{"krate":0,"index":42910},{"krate":0,"index":42911},{"krate":0,"index":42912},{"krate":0,"index":42913},{"krate":0,"index":42914},{"krate":0,"index":42915},{"krate":0,"index":42916},{"krate":0,"index":42917},{"krate":0,"index":42918},{"krate":0,"index":42919},{"krate":0,"index":42920},{"krate":0,"index":42921},{"krate":0,"index":42922},{"krate":0,"index":42923},{"krate":0,"index":42924},{"krate":0,"index":42925},{"krate":0,"index":42926},{"krate":0,"index":42927},{"krate":0,"index":42928},{"krate":0,"index":42929},{"krate":0,"index":42930},{"krate":0,"index":42931},{"krate":0,"index":42932},{"krate":0,"index":42933},{"krate":0,"index":42934},{"krate":0,"index":42935},{"krate":0,"index":42936},{"krate":0,"index":42937},{"krate":0,"index":42938},{"krate":0,"index":42939},{"krate":0,"index":42940},{"krate":0,"index":42941},{"krate":0,"index":42942},{"krate":0,"index":42943},{"krate":0,"index":42944},{"krate":0,"index":42945},{"krate":0,"index":680},{"krate":0,"index":681}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123155,"byte_end":123227,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123228,"byte_end":123231,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123232,"byte_end":123304,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123305,"byte_end":123327,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123665,"byte_end":123678,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123606,"byte_end":123655,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123848,"byte_end":123867,"line_start":36,"line_end":36,"column_start":8,"column_end":27},"name":"simd_horizontal_sum","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_sum","value":"pub fn simd_horizontal_sum(Self) -> Self::Element","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the sum of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the sum of all the lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123792,"byte_end":123840,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123957,"byte_end":123980,"line_start":39,"line_end":39,"column_start":8,"column_end":31},"name":"simd_horizontal_product","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_product","value":"pub fn simd_horizontal_product(Self) -> Self::Element","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the product of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the product of all the lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123897,"byte_end":123949,"line_start":38,"line_end":38,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130086,"byte_end":130096,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130024,"byte_end":130074,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130307,"byte_end":130310,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"pub fn new(V, V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130190,"byte_end":130295,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130448,"byte_end":130452,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"pub fn mask(&Self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130392,"byte_end":130436,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130561,"byte_end":130566,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"pub fn value(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130506,"byte_end":130549,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130835,"byte_end":130841,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"pub fn option(Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130611,"byte_end":130663,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130668,"byte_end":130671,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130676,"byte_end":130757,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130762,"byte_end":130823,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131134,"byte_end":131145,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"pub fn simd_unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130974,"byte_end":131045,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131050,"byte_end":131053,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131058,"byte_end":131108,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131113,"byte_end":131122,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131855,"byte_end":131869,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"pub fn simd_unwrap_or<impl FnOnce() -> V: FnOnce() ->\nV>(Self, impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131320,"byte_end":131377,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131382,"byte_end":131385,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131390,"byte_end":131519,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131524,"byte_end":131648,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131653,"byte_end":131656,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131661,"byte_end":131781,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131786,"byte_end":131821,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":131826,"byte_end":131843,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132077,"byte_end":132091,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":131992,"byte_end":132066,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132160,"byte_end":132167,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"pub fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132109,"byte_end":132152,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132258,"byte_end":132265,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"pub fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132210,"byte_end":132250,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132364,"byte_end":132371,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"pub fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132308,"byte_end":132356,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132467,"byte_end":132474,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"pub fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132414,"byte_end":132459,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132562,"byte_end":132569,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"pub fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132517,"byte_end":132554,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132661,"byte_end":132668,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"pub fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132612,"byte_end":132653,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132743,"byte_end":132751,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"pub fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132712,"byte_end":132735,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132815,"byte_end":132823,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"pub fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132784,"byte_end":132807,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132945,"byte_end":132955,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"pub fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132856,"byte_end":132937,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":133050,"byte_end":133069,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"pub fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132998,"byte_end":133042,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":133150,"byte_end":133169,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"pub fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":133098,"byte_end":133142,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135011,"byte_end":135024,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":134738,"byte_end":134796,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":134797,"byte_end":134800,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":134801,"byte_end":134867,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":134868,"byte_end":134977,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":134978,"byte_end":135000,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135314,"byte_end":135327,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"pub fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135105,"byte_end":135145,"line_start":12,"line_end":12,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135150,"byte_end":135153,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135158,"byte_end":135229,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135234,"byte_end":135306,"line_start":15,"line_end":15,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135362,"byte_end":135372,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"pub fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135409,"byte_end":135429,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"pub fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135448,"byte_end":135455,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"pub fn simd_pi() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135474,"byte_end":135485,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"pub fn simd_two_pi() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135504,"byte_end":135518,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"pub fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135537,"byte_end":135551,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"pub fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135570,"byte_end":135584,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"pub fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135603,"byte_end":135617,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"pub fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135636,"byte_end":135650,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"pub fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135669,"byte_end":135683,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"pub fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135702,"byte_end":135716,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"pub fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135735,"byte_end":135754,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"pub fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135774,"byte_end":135780,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"pub fn simd_e() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135799,"byte_end":135810,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"pub fn simd_log2_e() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135829,"byte_end":135841,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"pub fn simd_log10_e() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135860,"byte_end":135869,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"pub fn simd_ln_2() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135888,"byte_end":135898,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"pub fn simd_ln_10() -> Self","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137751,"byte_end":137761,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137620,"byte_end":137740,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137833,"byte_end":137841,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"pub fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137779,"byte_end":137825,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138132,"byte_end":138144,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"pub fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137862,"byte_end":137913,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137918,"byte_end":137921,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137926,"byte_end":138031,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138036,"byte_end":138124,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138225,"byte_end":138236,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"pub fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138179,"byte_end":138217,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138298,"byte_end":138314,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"pub fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138257,"byte_end":138290,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138386,"byte_end":138402,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"pub fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138345,"byte_end":138378,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139063,"byte_end":139072,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139016,"byte_end":139052,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139157,"byte_end":139164,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139086,"byte_end":139147,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139297,"byte_end":139305,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139223,"byte_end":139287,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139373,"byte_end":139378,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"pub fn lanes() -> usize","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139322,"byte_end":139365,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139462,"byte_end":139467,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"pub fn splat(Self::Element) -> Self","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139395,"byte_end":139454,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139594,"byte_end":139601,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"pub fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139501,"byte_end":139538,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139543,"byte_end":139546,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139551,"byte_end":139586,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139716,"byte_end":139733,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"pub unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139641,"byte_end":139701,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139875,"byte_end":139882,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"pub fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139773,"byte_end":139819,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139824,"byte_end":139827,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139832,"byte_end":139867,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140013,"byte_end":140030,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"pub unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139929,"byte_end":139998,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140380,"byte_end":140386,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"pub fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140078,"byte_end":140141,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140146,"byte_end":140149,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140154,"byte_end":140260,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140265,"byte_end":140372,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140712,"byte_end":140721,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"pub fn map_lanes<impl Fn(Self::Element) -> Self::Element: Fn(Self::Element) ->\nSelf::Element>(Self, impl Fn(Self::Element) -> Self::Element) -> Self where\nSelf: Clone","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140442,"byte_end":140488,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140493,"byte_end":140496,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140501,"byte_end":140575,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140580,"byte_end":140656,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140661,"byte_end":140682,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":140687,"byte_end":140704,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141323,"byte_end":141336,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"pub fn zip_map_lanes<impl Fn(Self::Element, Self::Element) -> Self::Element: Fn(Self::Element,\nSelf::Element) ->\nSelf::Element>(Self, Self,\nimpl Fn(Self::Element, Self::Element) -> Self::Element) -> Self where\nSelf: Clone","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141011,"byte_end":141099,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141104,"byte_end":141107,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141112,"byte_end":141186,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141191,"byte_end":141267,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141272,"byte_end":141293,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141298,"byte_end":141315,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142156,"byte_end":142174,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141785,"byte_end":141860,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141861,"byte_end":141864,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141865,"byte_end":141942,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":141943,"byte_end":142029,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142030,"byte_end":142119,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142120,"byte_end":142145,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":43111},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145976,"byte_end":145985,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"WideF32x4","qualname":"::simd::wide_simd_impl::WideF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145761,"byte_end":145860,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145861,"byte_end":145864,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145865,"byte_end":145913,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145914,"byte_end":145934,"line_start":25,"line_end":25,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43113},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":145986,"byte_end":146001,"line_start":27,"line_end":27,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43119},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146232,"byte_end":146245,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"WideBoolF32x4","qualname":"::simd::wide_simd_impl::WideBoolF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146005,"byte_end":146116,"line_start":29,"line_end":29,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146117,"byte_end":146120,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146121,"byte_end":146169,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146170,"byte_end":146190,"line_start":32,"line_end":32,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43121},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146246,"byte_end":146261,"line_start":34,"line_end":34,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43119},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43127},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146480,"byte_end":146489,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"WideF32x8","qualname":"::simd::wide_simd_impl::WideF32x8","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f32x8` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f32x8` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146265,"byte_end":146364,"line_start":36,"line_end":36,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146365,"byte_end":146368,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146369,"byte_end":146417,"line_start":38,"line_end":38,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146418,"byte_end":146438,"line_start":39,"line_end":39,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43129},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146490,"byte_end":146505,"line_start":41,"line_end":41,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF32x8::0","value":"wide::f32x8","parent":{"krate":0,"index":43127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43135},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146736,"byte_end":146749,"line_start":48,"line_end":48,"column_start":12,"column_end":25},"name":"WideBoolF32x8","qualname":"::simd::wide_simd_impl::WideBoolF32x8","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f32x8` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f32x8` that implements all the relevant traits from `simba`.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146509,"byte_end":146620,"line_start":43,"line_end":43,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146621,"byte_end":146624,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146625,"byte_end":146673,"line_start":45,"line_end":45,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146674,"byte_end":146694,"line_start":46,"line_end":46,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43137},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\wide_simd_impl.rs","byte_start":146750,"byte_end":146765,"line_start":48,"line_end":48,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF32x8::0","value":"wide::f32x8","parent":{"krate":0,"index":43135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":33860,"byte_end":33867,"line_start":1060,"line_end":1060,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48948,"byte_end":48949,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49040,"byte_end":49041,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49132,"byte_end":49133,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49224,"byte_end":49225,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49302,"byte_end":49303,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49529,"byte_end":49536,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53804,"byte_end":53806,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":56022,"byte_end":56029,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":124101,"byte_end":124102,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130170,"byte_end":130180,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":133278,"byte_end":133279,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135993,"byte_end":135994,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138492,"byte_end":138493,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142243,"byte_end":142250,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":143673,"byte_end":143680,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":289}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":2997,"byte_end":3009,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":132},"to":{"krate":0,"index":58}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3034,"byte_end":3044,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":17,"index":60},"to":{"krate":0,"index":58}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3067,"byte_end":3073,"line_start":25,"line_end":25,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":17,"index":100},"to":{"krate":0,"index":58}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3096,"byte_end":3102,"line_start":26,"line_end":26,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":16,"index":943},"to":{"krate":0,"index":58}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\real.rs","byte_start":3109,"byte_end":3119,"line_start":27,"line_end":27,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2755},"to":{"krate":0,"index":58}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16207,"byte_end":16215,"line_start":170,"line_end":170,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16228,"byte_end":16238,"line_start":171,"line_end":171,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":268},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16250,"byte_end":16263,"line_start":172,"line_end":172,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":16,"index":337},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16270,"byte_end":16275,"line_start":173,"line_end":173,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16315,"byte_end":16318,"line_start":174,"line_end":174,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3152},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16340,"byte_end":16345,"line_start":175,"line_end":175,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16400,"byte_end":16404,"line_start":178,"line_end":178,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16411,"byte_end":16415,"line_start":179,"line_end":179,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16422,"byte_end":16425,"line_start":180,"line_end":180,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3778},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16446,"byte_end":16451,"line_start":182,"line_end":182,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":16458,"byte_end":16465,"line_start":183,"line_end":183,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":9692},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\complex.rs","byte_start":33860,"byte_end":33867,"line_start":1060,"line_end":1060,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":18,"index":524},"to":{"krate":0,"index":132}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48247,"byte_end":48252,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48255,"byte_end":48258,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3125},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48283,"byte_end":48292,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3156},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48413,"byte_end":48418,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48421,"byte_end":48424,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3130},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48449,"byte_end":48458,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3160},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48579,"byte_end":48584,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":232}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48587,"byte_end":48590,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3135},"to":{"krate":0,"index":232}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48615,"byte_end":48624,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3164},"to":{"krate":0,"index":232}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48745,"byte_end":48750,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48753,"byte_end":48756,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":3140},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48781,"byte_end":48790,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":3168},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48881,"byte_end":48886,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48889,"byte_end":48892,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":3152},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":48948,"byte_end":48949,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":228}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49040,"byte_end":49041,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":241},"to":{"krate":0,"index":230}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49132,"byte_end":49133,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":244},"to":{"krate":0,"index":232}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49224,"byte_end":49225,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":234}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49302,"byte_end":49303,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":250},"to":{"krate":0,"index":236}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49417,"byte_end":49426,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":867},"to":{"krate":0,"index":251}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49429,"byte_end":49438,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":16,"index":995},"to":{"krate":0,"index":251}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49441,"byte_end":49450,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":236},"to":{"krate":0,"index":251}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\field.rs","byte_start":49529,"byte_end":49536,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":18,"index":524},"to":{"krate":0,"index":251}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":51013,"byte_end":51018,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":52992,"byte_end":52997,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":53804,"byte_end":53806,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":276},"to":{"krate":0,"index":268}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\scalar\\subset.rs","byte_start":56022,"byte_end":56029,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":18,"index":524},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\auto_simd_impl.rs","byte_start":115079,"byte_end":115088,"line_start":1628,"line_end":1628,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":867},"to":{"krate":0,"index":555}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117704,"byte_end":117708,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":583}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117715,"byte_end":117721,"line_start":11,"line_end":11,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":583}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117749,"byte_end":117754,"line_start":12,"line_end":12,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":3189},"to":{"krate":0,"index":583}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117782,"byte_end":117788,"line_start":13,"line_end":13,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3194},"to":{"krate":0,"index":583}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_bool.rs","byte_start":117816,"byte_end":117819,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3177},"to":{"krate":0,"index":583}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123360,"byte_end":123368,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123381,"byte_end":123391,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":268},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123403,"byte_end":123408,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123415,"byte_end":123420,"line_start":18,"line_end":18,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123427,"byte_end":123430,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3152},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123500,"byte_end":123504,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123511,"byte_end":123515,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123522,"byte_end":123525,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3778},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123546,"byte_end":123551,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123558,"byte_end":123570,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":16,"index":990},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123577,"byte_end":123583,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":16,"index":971},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":123590,"byte_end":123599,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2709},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_complex.rs","byte_start":124101,"byte_end":124102,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":683},"to":{"krate":0,"index":678}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_option.rs","byte_start":130170,"byte_end":130180,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":132093,"byte_end":132102,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":867},"to":{"krate":0,"index":765}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_partial_ord.rs","byte_start":133278,"byte_end":133279,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":778},"to":{"krate":0,"index":765}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135030,"byte_end":135044,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":765},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135047,"byte_end":135057,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":850},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135060,"byte_end":135076,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":678},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_real.rs","byte_start":135993,"byte_end":135994,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":824},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":137763,"byte_end":137772,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":867},"to":{"krate":0,"index":850}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_signed.rs","byte_start":138492,"byte_end":138493,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":857},"to":{"krate":0,"index":850}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":139074,"byte_end":139079,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":867}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142176,"byte_end":142180,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":881}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142183,"byte_end":142192,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":867},"to":{"krate":0,"index":881}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":142243,"byte_end":142250,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":169}},"from":{"krate":18,"index":524},"to":{"krate":0,"index":867}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simba-0.7.1\\src\\simd\\simd_value.rs","byte_start":143673,"byte_end":143680,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":170}},"from":{"krate":18,"index":524},"to":{"krate":0,"index":881}}]}