{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31","program":"C:\\Users\\sergi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","blue_engine","--edition=2018","C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","rlib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=973a1e0a75262e87","-C","extra-filename=-973a1e0a75262e87","--out-dir","c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps","--extern","anyhow=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libanyhow-79de6a4de140c32d.rmeta","--extern","bytemuck=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libbytemuck-b66ea2c171ff158f.rmeta","--extern","env_logger=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libenv_logger-1cc2564f200ce644.rmeta","--extern","futures=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libfutures-ecaf6a7bba9eebdf.rmeta","--extern","image=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libimage-47877090261fd1cc.rmeta","--extern","nalgebra_glm=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libnalgebra_glm-9ca09aa7e141bf33.rmeta","--extern","wgpu=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libwgpu-10667acb78c8300b.rmeta","--extern","winit=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libwinit-e6cecdb32c5c0879.rmeta","--extern","winit_input_helper=c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libwinit_input_helper-e62a98a64d1a5822.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\sergi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\sergi\\Desktop\\Rust\\isometric\\target\\rls\\debug\\deps\\libblue_engine-973a1e0a75262e87.rmeta"},"prelude":{"crate_id":{"name":"blue_engine","disambiguator":[2743177461093357845,0]},"crate_root":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src","external_crates":[{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":16,"id":{"name":"image","disambiguator":[10223086094682193840,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":17,"id":{"name":"exr","disambiguator":[3725432552512294411,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":18,"id":{"name":"smallvec","disambiguator":[10277631765112003654,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":19,"id":{"name":"half","disambiguator":[15571168083725315114,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":20,"id":{"name":"lebe","disambiguator":[8112140278770659698,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":21,"id":{"name":"deflate","disambiguator":[4190854500736815383,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":22,"id":{"name":"adler32","disambiguator":[755946652197954418,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":23,"id":{"name":"inflate","disambiguator":[11263685404478296899,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":24,"id":{"name":"bit_field","disambiguator":[15450065853592124084,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":25,"id":{"name":"threadpool","disambiguator":[10811570431307038845,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":26,"id":{"name":"num_cpus","disambiguator":[9680463424726089930,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":27,"id":{"name":"flume","disambiguator":[11376702131928038320,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":28,"id":{"name":"nanorand","disambiguator":[8890535151849500248,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":29,"id":{"name":"getrandom","disambiguator":[5121056801131521323,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":30,"id":{"name":"cfg_if","disambiguator":[17941200006019888196,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":31,"id":{"name":"futures_core","disambiguator":[3723873047831018300,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":32,"id":{"name":"futures_sink","disambiguator":[4673055852618601067,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":33,"id":{"name":"pin_project","disambiguator":[3395031209040610451,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":34,"id":{"name":"pin_project_internal","disambiguator":[9415484706063707384,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":35,"id":{"name":"spin","disambiguator":[461407544850272279,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":36,"id":{"name":"lock_api","disambiguator":[2157842252132152726,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":37,"id":{"name":"scopeguard","disambiguator":[14791793103096291185,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":38,"id":{"name":"tiff","disambiguator":[7544782981579064233,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":39,"id":{"name":"jpeg_decoder","disambiguator":[4974111611647713858,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":40,"id":{"name":"rayon","disambiguator":[6623402228181533820,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":41,"id":{"name":"either","disambiguator":[7464863777084611118,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":42,"id":{"name":"rayon_core","disambiguator":[16648258661140591635,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":43,"id":{"name":"crossbeam_channel","disambiguator":[10208144800051560213,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":44,"id":{"name":"crossbeam_utils","disambiguator":[13548143170511223058,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":45,"id":{"name":"lazy_static","disambiguator":[17608421772039054989,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":46,"id":{"name":"crossbeam_deque","disambiguator":[7715213230057767423,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":47,"id":{"name":"crossbeam_epoch","disambiguator":[5736158919263291491,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":48,"id":{"name":"memoffset","disambiguator":[5083723864139456129,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":49,"id":{"name":"weezl","disambiguator":[17359080844105848502,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":50,"id":{"name":"flate2","disambiguator":[5324602596803392851,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":51,"id":{"name":"crc32fast","disambiguator":[7521281354712788951,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":52,"id":{"name":"miniz_oxide","disambiguator":[7988008994643460599,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":53,"id":{"name":"adler","disambiguator":[8964059262800736621,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":54,"id":{"name":"num_traits","disambiguator":[5402895190348354751,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":55,"id":{"name":"byteorder","disambiguator":[7485636545642705259,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":56,"id":{"name":"gif","disambiguator":[8342493512752863625,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":57,"id":{"name":"color_quant","disambiguator":[1166519531328614451,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":58,"id":{"name":"num_rational","disambiguator":[4329101804926251179,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":59,"id":{"name":"num_integer","disambiguator":[15186409350510498812,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":60,"id":{"name":"scoped_threadpool","disambiguator":[11224797199635509713,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":61,"id":{"name":"num_iter","disambiguator":[11696964576874551325,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":62,"id":{"name":"png","disambiguator":[13105329331899044653,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":63,"id":{"name":"bitflags","disambiguator":[3297404274272602299,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":64,"id":{"name":"bytemuck","disambiguator":[9396970804000534196,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":65,"id":{"name":"bytemuck_derive","disambiguator":[16691534005265990648,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":66,"id":{"name":"wgpu","disambiguator":[12278269989700843155,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":67,"id":{"name":"arrayvec","disambiguator":[1734128083007581672,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":68,"id":{"name":"parking_lot","disambiguator":[4613392899863507610,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":69,"id":{"name":"instant","disambiguator":[16329396685048429385,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":70,"id":{"name":"parking_lot_core","disambiguator":[5428828280201032589,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":71,"id":{"name":"winapi","disambiguator":[6721470396146605459,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":72,"id":{"name":"wgpu_core","disambiguator":[11207279657886572760,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":73,"id":{"name":"thiserror","disambiguator":[2999061780281131312,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":74,"id":{"name":"thiserror_impl","disambiguator":[18208422604514076696,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":75,"id":{"name":"wgpu_hal","disambiguator":[8529069847787556379,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":76,"id":{"name":"wgpu_types","disambiguator":[16415882750293293195,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":77,"id":{"name":"bit_set","disambiguator":[5585856997285675628,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":78,"id":{"name":"bit_vec","disambiguator":[15540447192776056237,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":79,"id":{"name":"range_alloc","disambiguator":[3764191522841136074,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":80,"id":{"name":"naga","disambiguator":[8470155692689324639,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":81,"id":{"name":"spirv","disambiguator":[14923118517052690566,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":82,"id":{"name":"codespan_reporting","disambiguator":[11159441376267793718,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":83,"id":{"name":"termcolor","disambiguator":[14160505142808019959,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":84,"id":{"name":"winapi_util","disambiguator":[2619686112543089256,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":85,"id":{"name":"unicode_width","disambiguator":[8954281253664246213,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":86,"id":{"name":"log","disambiguator":[500290388089087630,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":87,"id":{"name":"fxhash","disambiguator":[12266767315980423606,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":88,"id":{"name":"ash","disambiguator":[8637571670146092342,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":89,"id":{"name":"libloading","disambiguator":[7952334235199643111,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":90,"id":{"name":"inplace_it","disambiguator":[557361132257339746,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":91,"id":{"name":"gpu_alloc","disambiguator":[16967654568380285678,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":92,"id":{"name":"gpu_alloc_types","disambiguator":[14259952318506080642,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":93,"id":{"name":"raw_window_handle","disambiguator":[6431720779849338088,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":94,"id":{"name":"libc","disambiguator":[4245277395814316444,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":95,"id":{"name":"raw_window_handle","disambiguator":[6190540948978235620,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":96,"id":{"name":"cty","disambiguator":[10737354382509807030,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":97,"id":{"name":"d3d12","disambiguator":[7178395180408876160,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":98,"id":{"name":"gpu_descriptor","disambiguator":[2637863430663215612,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":99,"id":{"name":"gpu_descriptor_types","disambiguator":[16808871869703342249,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":100,"id":{"name":"hashbrown","disambiguator":[9400526309099196326,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":101,"id":{"name":"ahash","disambiguator":[13308142890937893010,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":102,"id":{"name":"once_cell","disambiguator":[15291982990485021499,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":103,"id":{"name":"renderdoc_sys","disambiguator":[16217600782733704372,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":104,"id":{"name":"copyless","disambiguator":[3051251854820899731,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","num":105,"id":{"name":"profiling","disambiguator":[16159988031341341108,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":106,"id":{"name":"winit","disambiguator":[1206343780969027004,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\render.rs","num":107,"id":{"name":"anyhow","disambiguator":[17163227959855713594,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":108,"id":{"name":"winit_input_helper","disambiguator":[10143074525330695746,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":109,"id":{"name":"nalgebra_glm","disambiguator":[9348117192048626002,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":110,"id":{"name":"approx","disambiguator":[15255342555949291988,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":111,"id":{"name":"nalgebra","disambiguator":[11091156248707745008,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":112,"id":{"name":"simba","disambiguator":[7571330691535096746,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":113,"id":{"name":"num_complex","disambiguator":[12217655096360217670,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":114,"id":{"name":"wide","disambiguator":[13036478578387036777,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":115,"id":{"name":"safe_arch","disambiguator":[8225226741313275532,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":116,"id":{"name":"paste","disambiguator":[18031045734007913693,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":117,"id":{"name":"typenum","disambiguator":[5371539035448183228,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":118,"id":{"name":"matrixmultiply","disambiguator":[5256985494334375146,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","num":119,"id":{"name":"rawpointer","disambiguator":[13527157798103432211,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":120,"id":{"name":"env_logger","disambiguator":[5439626608394740778,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":121,"id":{"name":"regex","disambiguator":[11539251433438082100,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":122,"id":{"name":"regex_syntax","disambiguator":[18405453952142915221,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":123,"id":{"name":"aho_corasick","disambiguator":[12649285025809385464,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":124,"id":{"name":"memchr","disambiguator":[11795001318777741512,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":125,"id":{"name":"humantime","disambiguator":[3956291442409525023,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":126,"id":{"name":"atty","disambiguator":[2869697875633682793,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":127,"id":{"name":"futures","disambiguator":[18250324497698285643,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":128,"id":{"name":"futures_util","disambiguator":[5555683621891847900,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":129,"id":{"name":"pin_utils","disambiguator":[13643175944386566012,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":130,"id":{"name":"futures_macro","disambiguator":[1176560117706473488,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":131,"id":{"name":"futures_task","disambiguator":[549887119324496450,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":132,"id":{"name":"pin_project_lite","disambiguator":[11650812661830545456,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":133,"id":{"name":"futures_channel","disambiguator":[2976194647179739121,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":134,"id":{"name":"slab","disambiguator":[12351521486338416791,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":135,"id":{"name":"futures_io","disambiguator":[10722248012823961366,0]}},{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","num":136,"id":{"name":"futures_executor","disambiguator":[12018203541858458656,0]}}],"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":90,"byte_end":248,"line_start":7,"line_end":14,"column_start":1,"column_end":26}},"imports":[{"kind":"Use","ref_id":{"krate":106,"index":3098},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27061,"byte_end":27072,"line_start":345,"line_end":345,"column_start":23,"column_end":34},"alias_span":null,"name":"DeviceEvent","value":"","parent":{"krate":0,"index":62}},{"kind":"Use","ref_id":{"krate":106,"index":3220},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27128,"byte_end":27139,"line_start":347,"line_end":347,"column_start":23,"column_end":34},"alias_span":null,"name":"MouseButton","value":"","parent":{"krate":0,"index":62}},{"kind":"Use","ref_id":{"krate":106,"index":3262},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27192,"byte_end":27206,"line_start":349,"line_end":349,"column_start":23,"column_end":37},"alias_span":null,"name":"KeyboardKeys","value":"","parent":{"krate":0,"index":62}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","byte_start":44587,"byte_end":44588,"line_start":3,"line_end":3,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":224}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","byte_start":44614,"byte_end":44615,"line_start":4,"line_end":4,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":224}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":246,"byte_end":247,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Camera, Engine, DeviceEvent, Vertex, Object, ObjectSettings, KeyboardKeys","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":90,"byte_end":248,"line_start":7,"line_end":14,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":62},{"krate":0,"index":157},{"krate":0,"index":224},{"krate":0,"index":259},{"krate":0,"index":312},{"krate":0,"index":377},{"krate":0,"index":428}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":755,"byte_end":769,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"build_pipeline","qualname":"<crate::header::Renderer>::build_pipeline","value":"pub fn build_pipeline(&mut Self, Shaders, VertexBuffers, Textures,\nOption<UniformBuffers>) -> Result<Pipeline, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new render pipeline. Could be thought of as like materials in game engines.\n","sig":null,"attributes":[{"value":"/ Creates a new render pipeline. Could be thought of as like materials in game engines.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":654,"byte_end":743,"line_start":16,"line_end":16,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":1197,"byte_end":1209,"line_start":33,"line_end":33,"column_start":12,"column_end":24},"name":"build_shader","qualname":"<crate::header::Renderer>::build_shader","value":"pub fn build_shader(&mut Self, &str, String, Option<&BindGroupLayout>,\nShaderSettings) -> Result<Shaders, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader group, the input must be spir-v compiled vertex and fragment shader\n","sig":null,"attributes":[{"value":"/ Creates a shader group, the input must be spir-v compiled vertex and fragment shader","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":1097,"byte_end":1185,"line_start":32,"line_end":32,"column_start":5,"column_end":93}}]},{"kind":"Const","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":4320,"byte_end":4332,"line_start":110,"line_end":110,"column_start":15,"column_end":27},"name":"DEPTH_FORMAT","qualname":"::definition::<impl header::Renderer>::DEPTH_FORMAT","value":"wgpu::TextureFormat","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":4438,"byte_end":4451,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"build_texture","qualname":"<crate::header::Renderer>::build_texture","value":"pub fn build_texture(&mut Self, &'static str, TextureData, TextureMode)\n-> anyhow::Result<Textures>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new texture data\n","sig":null,"attributes":[{"value":"/ Creates a new texture data","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":4396,"byte_end":4426,"line_start":112,"line_end":112,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":9350,"byte_end":9370,"line_start":244,"line_end":244,"column_start":12,"column_end":32},"name":"build_uniform_buffer","qualname":"<crate::header::Renderer>::build_uniform_buffer","value":"pub fn build_uniform_buffer(&mut Self, Vec<UniformBuffer>)\n-> Result<(UniformBuffers, BindGroupLayout), anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new uniform buffer group, according to a list of types\n","sig":null,"attributes":[{"value":"/ Creates a new uniform buffer group, according to a list of types","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":9270,"byte_end":9338,"line_start":243,"line_end":243,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":12632,"byte_end":12651,"line_start":321,"line_end":321,"column_start":12,"column_end":31},"name":"build_vertex_buffer","qualname":"<crate::header::Renderer>::build_vertex_buffer","value":"pub fn build_vertex_buffer(&mut Self, Vec<Vertex>, Vec<u16>)\n-> Result<VertexBuffers, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new vertex buffer and indecies\n","sig":null,"attributes":[{"value":"/ Creates a new vertex buffer and indecies","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":12576,"byte_end":12620,"line_start":320,"line_end":320,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"header","qualname":"::header","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":449},{"krate":0,"index":455},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":468},{"krate":0,"index":474},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":79},{"krate":0,"index":565},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":578},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":128},{"krate":0,"index":589},{"krate":0,"index":601},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":603},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":620},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":141},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":667},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":155}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14166,"byte_end":14172,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Vertex","qualname":"::header::Vertex","value":"Vertex { position, texture }","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":432}],"decl_id":null,"docs":" Will contain all details about a vertex and will be sent to GPU\n","sig":null,"attributes":[{"value":"/ Will contain all details about a vertex and will be sent to GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":13967,"byte_end":14034,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14079,"byte_end":14089,"line_start":9,"line_end":9,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14241,"byte_end":14249,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"name":"position","qualname":"::header::Vertex::position","value":"[f32; 3]","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Contains position data for the vertex in 3D space\n","sig":null,"attributes":[{"value":"/ Contains position data for the vertex in 3D space","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14179,"byte_end":14232,"line_start":12,"line_end":12,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14323,"byte_end":14330,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"name":"texture","qualname":"::header::Vertex::texture","value":"[f32; 2]","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":" Contains texture position data for the vertex\n","sig":null,"attributes":[{"value":"/ Contains texture position data for the vertex","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14265,"byte_end":14314,"line_start":14,"line_end":14,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15130,"byte_end":15142,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"uniform_type","qualname":"::header::uniform_type","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":494},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":509},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":539},{"krate":0,"index":75},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":553},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":564},{"krate":0,"index":77}],"decl_id":null,"docs":" A container for uniform buffer types\n","sig":null,"attributes":[{"value":"/ A container for uniform buffer types","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15081,"byte_end":15121,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15296,"byte_end":15302,"line_start":44,"line_end":44,"column_start":16,"column_end":22},"name":"Matrix","qualname":"::header::uniform_type::Matrix","value":"Matrix { data }","parent":null,"children":[{"krate":0,"index":476}],"decl_id":null,"docs":" 4 by 4, 32 bit float matrix uniform buffer\n","sig":null,"attributes":[{"value":"/ 4 by 4, 32 bit float matrix uniform buffer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15150,"byte_end":15196,"line_start":41,"line_end":41,"column_start":5,"column_end":51}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15201,"byte_end":15211,"line_start":42,"line_end":42,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15317,"byte_end":15321,"line_start":45,"line_end":45,"column_start":13,"column_end":17},"name":"data","qualname":"::header::uniform_type::Matrix::data","value":"[[f32; 4]; 4]","parent":{"krate":0,"index":475},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15437,"byte_end":15443,"line_start":49,"line_end":49,"column_start":16,"column_end":22},"name":"update","qualname":"<Matrix>::update","value":"pub fn update(&mut Self, Matrix)","parent":null,"children":[],"decl_id":null,"docs":" Replaces it's values by the new values provided\n","sig":null,"attributes":[{"value":"/ Replaces it's values by the new values provided","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15370,"byte_end":15421,"line_start":48,"line_end":48,"column_start":9,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15597,"byte_end":15604,"line_start":54,"line_end":54,"column_start":16,"column_end":23},"name":"from_im","qualname":"<Matrix>::from_im","value":"pub fn from_im(nalgebra_glm::Mat4) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts internal matrix to the uniform matrix\n","sig":null,"attributes":[{"value":"/ Converts internal matrix to the uniform matrix","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15531,"byte_end":15581,"line_start":53,"line_end":53,"column_start":9,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":16064,"byte_end":16069,"line_start":68,"line_end":68,"column_start":16,"column_end":21},"name":"to_im","qualname":"<Matrix>::to_im","value":"pub fn to_im(&Self) -> nalgebra_glm::Mat4","parent":null,"children":[],"decl_id":null,"docs":" Converts uniform matrix to internal matrix\n","sig":null,"attributes":[{"value":"/ Converts uniform matrix to internal matrix","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":16002,"byte_end":16048,"line_start":67,"line_end":67,"column_start":9,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17733,"byte_end":17738,"line_start":118,"line_end":118,"column_start":16,"column_end":21},"name":"Array","qualname":"::header::uniform_type::Array","value":"Array { data }","parent":null,"children":[{"krate":0,"index":511}],"decl_id":null,"docs":" An array with length 4, each 32 bit float value, uniform buffer\n","sig":null,"attributes":[{"value":"/ An array with length 4, each 32 bit float value, uniform buffer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17566,"byte_end":17633,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17638,"byte_end":17648,"line_start":116,"line_end":116,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17753,"byte_end":17757,"line_start":119,"line_end":119,"column_start":13,"column_end":17},"name":"data","qualname":"::header::uniform_type::Array::data","value":"[f32; 4]","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17807,"byte_end":17813,"line_start":122,"line_end":122,"column_start":16,"column_end":22},"name":"update","qualname":"<Array>::update","value":"pub fn update(&mut Self, Array)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18035,"byte_end":18040,"line_start":130,"line_end":130,"column_start":16,"column_end":21},"name":"Float","qualname":"::header::uniform_type::Float","value":"Float { data }","parent":null,"children":[{"krate":0,"index":541}],"decl_id":null,"docs":" A 32 bit float uniform buffer\n","sig":null,"attributes":[{"value":"/ A 32 bit float uniform buffer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17902,"byte_end":17935,"line_start":127,"line_end":127,"column_start":5,"column_end":38}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17940,"byte_end":17950,"line_start":128,"line_end":128,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18055,"byte_end":18059,"line_start":131,"line_end":131,"column_start":13,"column_end":17},"name":"data","qualname":"::header::uniform_type::Float::data","value":"f32","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18104,"byte_end":18110,"line_start":134,"line_end":134,"column_start":16,"column_end":22},"name":"update","qualname":"<Float>::update","value":"pub fn update(&mut Self, Float)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18532,"byte_end":18538,"line_start":144,"line_end":144,"column_start":12,"column_end":18},"name":"Object","qualname":"::header::Object","value":"Object { name, vertices, indices, uniform_layout, pipeline, size, scale, position, transformation_matrix, color, object_index, camera_effect, shader_settings }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" Objects make it easier to work with Blue Engine, it automates most of work needed for\n creating 3D objects and showing them on screen. A range of default objects are available\n as well as ability to customize each of them and even create your own! You can also\n customize almost everything there is about them!\n","sig":null,"attributes":[{"value":"/ Objects make it easier to work with Blue Engine, it automates most of work needed for","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18197,"byte_end":18286,"line_start":140,"line_end":140,"column_start":1,"column_end":90}},{"value":"/ creating 3D objects and showing them on screen. A range of default objects are available","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18287,"byte_end":18379,"line_start":141,"line_end":141,"column_start":1,"column_end":93}},{"value":"/ as well as ability to customize each of them and even create your own! You can also","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18380,"byte_end":18467,"line_start":142,"line_end":142,"column_start":1,"column_end":88}},{"value":"/ customize almost everything there is about them!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18468,"byte_end":18520,"line_start":143,"line_end":143,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18621,"byte_end":18625,"line_start":146,"line_end":146,"column_start":9,"column_end":13},"name":"name","qualname":"::header::Object::name","value":"std::option::Option<&'static str>","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Give your object a name, which can help later on for debugging.\n","sig":null,"attributes":[{"value":"/ Give your object a name, which can help later on for debugging.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18545,"byte_end":18612,"line_start":145,"line_end":145,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18682,"byte_end":18690,"line_start":148,"line_end":148,"column_start":9,"column_end":17},"name":"vertices","qualname":"::header::Object::vertices","value":"std::vec::Vec<header::Vertex>","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" A list of Vertex\n","sig":null,"attributes":[{"value":"/ A list of Vertex","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18653,"byte_end":18673,"line_start":147,"line_end":147,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18784,"byte_end":18791,"line_start":150,"line_end":150,"column_start":9,"column_end":16},"name":"indices","qualname":"::header::Object::indices","value":"std::vec::Vec<u16>","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" A list of indices that dictates the order that vertices appear\n","sig":null,"attributes":[{"value":"/ A list of indices that dictates the order that vertices appear","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18709,"byte_end":18775,"line_start":149,"line_end":149,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18811,"byte_end":18825,"line_start":151,"line_end":151,"column_start":9,"column_end":23},"name":"uniform_layout","qualname":"::header::Object::uniform_layout","value":"wgpu::BindGroupLayout","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18946,"byte_end":18954,"line_start":153,"line_end":153,"column_start":9,"column_end":17},"name":"pipeline","qualname":"::header::Object::pipeline","value":"header::Pipeline","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Pipeline holds all the data that is sent to GPU, including shaders and textures\n","sig":null,"attributes":[{"value":"/ Pipeline holds all the data that is sent to GPU, including shaders and textures","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18854,"byte_end":18937,"line_start":152,"line_end":152,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19025,"byte_end":19029,"line_start":155,"line_end":155,"column_start":9,"column_end":13},"name":"size","qualname":"::header::Object::size","value":"(f32, f32, f32)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Dictates the size of your object in pixels\n","sig":null,"attributes":[{"value":"/ Dictates the size of your object in pixels","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18970,"byte_end":19016,"line_start":154,"line_end":154,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19056,"byte_end":19061,"line_start":156,"line_end":156,"column_start":9,"column_end":14},"name":"scale","qualname":"::header::Object::scale","value":"(f32, f32, f32)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19143,"byte_end":19151,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"name":"position","qualname":"::header::Object::position","value":"(f32, f32, f32)","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Dictates the position of your object in pixels\n","sig":null,"attributes":[{"value":"/ Dictates the position of your object in pixels","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19084,"byte_end":19134,"line_start":157,"line_end":157,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19427,"byte_end":19448,"line_start":163,"line_end":163,"column_start":9,"column_end":30},"name":"transformation_matrix","qualname":"::header::Object::transformation_matrix","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<4_usize>, nalgebra::base::dimension::Const<4_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 4_usize, 4_usize>>","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Transformation matrix helps to apply changes to your object, including position, orientation, ...\n Best choice is to let the Object system handle it\n","sig":null,"attributes":[{"value":"/ Transformation matrix helps to apply changes to your object, including position, orientation, ...","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19259,"byte_end":19360,"line_start":161,"line_end":161,"column_start":5,"column_end":106}},{"value":"/ Best choice is to let the Object system handle it","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19365,"byte_end":19418,"line_start":162,"line_end":162,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19536,"byte_end":19541,"line_start":165,"line_end":165,"column_start":9,"column_end":14},"name":"color","qualname":"::header::Object::color","value":"header::uniform_type::Array","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" The color of your object, A.K.A. albedo sometimes\n","sig":null,"attributes":[{"value":"/ The color of your object, A.K.A. albedo sometimes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19474,"byte_end":19527,"line_start":164,"line_end":164,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19617,"byte_end":19629,"line_start":167,"line_end":167,"column_start":9,"column_end":21},"name":"object_index","qualname":"::header::Object::object_index","value":"usize","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" The index of the object in the queue\n","sig":null,"attributes":[{"value":"/ The index of the object in the queue","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19568,"byte_end":19608,"line_start":166,"line_end":166,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19687,"byte_end":19700,"line_start":169,"line_end":169,"column_start":9,"column_end":22},"name":"camera_effect","qualname":"::header::Object::camera_effect","value":"bool","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Should it be affected by camera?\n","sig":null,"attributes":[{"value":"/ Should it be affected by camera?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19642,"byte_end":19678,"line_start":168,"line_end":168,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19740,"byte_end":19755,"line_start":171,"line_end":171,"column_start":9,"column_end":24},"name":"shader_settings","qualname":"::header::Object::shader_settings","value":"header::ShaderSettings","parent":{"krate":0,"index":79},"children":[],"decl_id":null,"docs":" Shader settings\n","sig":null,"attributes":[{"value":"/ Shader settings","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19712,"byte_end":19731,"line_start":170,"line_end":170,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19877,"byte_end":19891,"line_start":176,"line_end":176,"column_start":12,"column_end":26},"name":"ObjectSettings","qualname":"::header::ObjectSettings","value":"ObjectSettings { name, size, scale, position, color, camera_effect, shader_settings }","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572}],"decl_id":null,"docs":" Extra settings to customize objects on time of creation\n","sig":null,"attributes":[{"value":"/ Extra settings to customize objects on time of creation","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19776,"byte_end":19835,"line_start":174,"line_end":174,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19974,"byte_end":19978,"line_start":178,"line_end":178,"column_start":9,"column_end":13},"name":"name","qualname":"::header::ObjectSettings::name","value":"std::option::Option<&'static str>","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" Give your object a name, which can help later on for debugging.\n","sig":null,"attributes":[{"value":"/ Give your object a name, which can help later on for debugging.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":19898,"byte_end":19965,"line_start":177,"line_end":177,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20061,"byte_end":20065,"line_start":180,"line_end":180,"column_start":9,"column_end":13},"name":"size","qualname":"::header::ObjectSettings::size","value":"(f32, f32, f32)","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" Dictates the size of your object in pixels\n","sig":null,"attributes":[{"value":"/ Dictates the size of your object in pixels","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20006,"byte_end":20052,"line_start":179,"line_end":179,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20092,"byte_end":20097,"line_start":181,"line_end":181,"column_start":9,"column_end":14},"name":"scale","qualname":"::header::ObjectSettings::scale","value":"(f32, f32, f32)","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20179,"byte_end":20187,"line_start":183,"line_end":183,"column_start":9,"column_end":17},"name":"position","qualname":"::header::ObjectSettings::position","value":"(f32, f32, f32)","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" Dictates the position of your object in pixels\n","sig":null,"attributes":[{"value":"/ Dictates the position of your object in pixels","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20120,"byte_end":20170,"line_start":182,"line_end":182,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20272,"byte_end":20277,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"name":"color","qualname":"::header::ObjectSettings::color","value":"header::uniform_type::Array","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" The color of your object, A.K.A. albedo sometimes\n","sig":null,"attributes":[{"value":"/ The color of your object, A.K.A. albedo sometimes","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20210,"byte_end":20263,"line_start":184,"line_end":184,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20349,"byte_end":20362,"line_start":187,"line_end":187,"column_start":9,"column_end":22},"name":"camera_effect","qualname":"::header::ObjectSettings::camera_effect","value":"bool","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" Should it be affected by camera?\n","sig":null,"attributes":[{"value":"/ Should it be affected by camera?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20304,"byte_end":20340,"line_start":186,"line_end":186,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20402,"byte_end":20417,"line_start":189,"line_end":189,"column_start":9,"column_end":24},"name":"shader_settings","qualname":"::header::ObjectSettings::shader_settings","value":"header::ShaderSettings","parent":{"krate":0,"index":565},"children":[],"decl_id":null,"docs":" Shader Settings\n","sig":null,"attributes":[{"value":"/ Shader Settings","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20374,"byte_end":20393,"line_start":188,"line_end":188,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20918,"byte_end":20926,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"Geometry","qualname":"::header::Geometry","value":"Geometry { vertices, indices }","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20962,"byte_end":20970,"line_start":209,"line_end":209,"column_start":9,"column_end":17},"name":"vertices","qualname":"::header::Geometry::vertices","value":"std::vec::Vec<header::Vertex>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" A list of Vertex\n","sig":null,"attributes":[{"value":"/ A list of Vertex","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20933,"byte_end":20953,"line_start":208,"line_end":208,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21064,"byte_end":21071,"line_start":211,"line_end":211,"column_start":9,"column_end":16},"name":"indices","qualname":"::header::Geometry::indices","value":"std::vec::Vec<u16>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" A list of indices that dictates the order that vertices appear\n","sig":null,"attributes":[{"value":"/ A list of indices that dictates the order that vertices appear","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20989,"byte_end":21055,"line_start":210,"line_end":210,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22767,"byte_end":22773,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"Engine","qualname":"::header::Engine","value":"Engine { renderer, window, objects, camera }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" The engine is the main starting point of using the Blue Engine. Everything that runs on Blue Engine will be under this struct.\n The structure of engine is monolithic, but the underlying data and the way it works is not.\n It gives a set of default data to work with, but also allow you to go beyond that and work as low level as you wish to.","sig":null,"attributes":[{"value":"/ The engine is the main starting point of using the Blue Engine. Everything that runs on Blue Engine will be under this struct.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21086,"byte_end":21216,"line_start":214,"line_end":214,"column_start":1,"column_end":131}},{"value":"/ The structure of engine is monolithic, but the underlying data and the way it works is not.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21217,"byte_end":21312,"line_start":215,"line_end":215,"column_start":1,"column_end":96}},{"value":"/ It gives a set of default data to work with, but also allow you to go beyond that and work as low level as you wish to.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21313,"byte_end":21436,"line_start":216,"line_end":216,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21437,"byte_end":21440,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ You can also use the Engine to build you own custom structure the way you wish for it to be. Possibilities are endless!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21441,"byte_end":21564,"line_start":218,"line_end":218,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21565,"byte_end":21568,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ To start using the Blue Engine, you can start by creating a new Engine like follows:","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21569,"byte_end":21657,"line_start":220,"line_end":220,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21658,"byte_end":21665,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ use blue_engine::header::{Engine, WindowDescriptor};","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21666,"byte_end":21722,"line_start":222,"line_end":222,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21723,"byte_end":21726,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21727,"byte_end":21742,"line_start":224,"line_end":224,"column_start":1,"column_end":16}},{"value":"/     let engine = Engine::new(WindowDescriptor::default()).expect(\"Couldn't create the engine\");","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21743,"byte_end":21842,"line_start":225,"line_end":225,"column_start":1,"column_end":100}},{"value":"/ }","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21843,"byte_end":21848,"line_start":226,"line_end":226,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21849,"byte_end":21856,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ The WindowDescriptor simply holds what features you would like for your window. If you are reading this on later version of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21857,"byte_end":21984,"line_start":228,"line_end":228,"column_start":1,"column_end":128}},{"value":"/ the engine, you might be able to even run the engine in headless mode meaning there would not be a need for a window and the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":21985,"byte_end":22113,"line_start":229,"line_end":229,"column_start":1,"column_end":129}},{"value":"/ renders would come as image files.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22114,"byte_end":22152,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22153,"byte_end":22156,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ If you so wish to have a window, you would need to start a window update loop. The update loop of window runs a frame every few milisecond,","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22157,"byte_end":22300,"line_start":232,"line_end":232,"column_start":1,"column_end":144}},{"value":"/ and gives you details of what is happening during this time, like input events. You can also modify existing parts of the engine during","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22301,"byte_end":22440,"line_start":233,"line_end":233,"column_start":1,"column_end":140}},{"value":"/ this update loop, such as changing camera to look differently, or creating a new object on the scene, or even changing window details!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22441,"byte_end":22579,"line_start":234,"line_end":234,"column_start":1,"column_end":139}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22580,"byte_end":22583,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ The update loop is just a method of the Engine struct that have one argument which is a callback function.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22584,"byte_end":22694,"line_start":236,"line_end":236,"column_start":1,"column_end":111}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22695,"byte_end":22702,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22703,"byte_end":22706,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22707,"byte_end":22714,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"/ [THE DATA HERE IS WORK IN PROGRESS!]","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22715,"byte_end":22755,"line_start":240,"line_end":240,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22911,"byte_end":22919,"line_start":243,"line_end":243,"column_start":9,"column_end":17},"name":"renderer","qualname":"::header::Engine::renderer","value":"header::Renderer","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" The renderer does exactly what it is called. It works with the GPU to render frames according to the data you gave it.\n","sig":null,"attributes":[{"value":"/ The renderer does exactly what it is called. It works with the GPU to render frames according to the data you gave it.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":22780,"byte_end":22902,"line_start":242,"line_end":242,"column_start":5,"column_end":127}}]},{"kind":"Field","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23234,"byte_end":23240,"line_start":247,"line_end":247,"column_start":9,"column_end":15},"name":"window","qualname":"::header::Engine::window","value":"winit::window::Window","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" The window handles everything about window and inputs. This includes ability to modify window and listen to input devices for changes.\n","sig":null,"attributes":[{"value":"/ The window handles everything about window and inputs. This includes ability to modify window and listen to input devices for changes.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23087,"byte_end":23225,"line_start":246,"line_end":246,"column_start":5,"column_end":143}}]},{"kind":"Field","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23502,"byte_end":23509,"line_start":250,"line_end":250,"column_start":9,"column_end":16},"name":"objects","qualname":"::header::Engine::objects","value":"std::vec::Vec<header::Object>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" The object system is a way to make it easier to work with the engine. Obviously you can work without it, but it's for those who\n do not have the know-how, or wish to handle all the work of rendering data manually.\n","sig":null,"attributes":[{"value":"/ The object system is a way to make it easier to work with the engine. Obviously you can work without it, but it's for those who","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23269,"byte_end":23400,"line_start":248,"line_end":248,"column_start":5,"column_end":136}},{"value":"/ do not have the know-how, or wish to handle all the work of rendering data manually.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23405,"byte_end":23493,"line_start":249,"line_end":249,"column_start":5,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23657,"byte_end":23663,"line_start":252,"line_end":252,"column_start":9,"column_end":15},"name":"camera","qualname":"::header::Engine::camera","value":"header::Camera","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" The camera handles the way the scene looks when rendered. You can modify everything there is to camera through this.\n","sig":null,"attributes":[{"value":"/ The camera handles the way the scene looks when rendered. You can modify everything there is to camera through this.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23528,"byte_end":23648,"line_start":251,"line_end":251,"column_start":5,"column_end":125}}]},{"kind":"Struct","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23840,"byte_end":23848,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"Pipeline","qualname":"::header::Pipeline","value":"Pipeline { shader, vertex_buffer, texture, uniform }","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" Container for pipeline values. Each pipeline takes only 1 vertex shader, 1 fragment shader, 1 texture data, and optionally a vector of uniform data.\n","sig":null,"attributes":[{"value":"/ Container for pipeline values. Each pipeline takes only 1 vertex shader, 1 fragment shader, 1 texture data, and optionally a vector of uniform data.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23676,"byte_end":23828,"line_start":255,"line_end":255,"column_start":1,"column_end":153}}]},{"kind":"Field","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23859,"byte_end":23865,"line_start":257,"line_end":257,"column_start":9,"column_end":15},"name":"shader","qualname":"::header::Pipeline::shader","value":"wgpu::RenderPipeline","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23884,"byte_end":23897,"line_start":258,"line_end":258,"column_start":9,"column_end":22},"name":"vertex_buffer","qualname":"::header::Pipeline::vertex_buffer","value":"header::VertexBuffers","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23922,"byte_end":23929,"line_start":259,"line_end":259,"column_start":9,"column_end":16},"name":"texture","qualname":"::header::Pipeline::texture","value":"wgpu::BindGroup","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23949,"byte_end":23956,"line_start":260,"line_end":260,"column_start":9,"column_end":16},"name":"uniform","qualname":"::header::Pipeline::uniform","value":"std::option::Option<wgpu::BindGroup>","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24038,"byte_end":24051,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"VertexBuffers","qualname":"::header::VertexBuffers","value":"VertexBuffers { vertex_buffer, index_buffer, length }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"decl_id":null,"docs":" Container for vertex and index buffer\n","sig":null,"attributes":[{"value":"/ Container for vertex and index buffer","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":23985,"byte_end":24026,"line_start":263,"line_end":263,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24181,"byte_end":24194,"line_start":266,"line_end":266,"column_start":9,"column_end":22},"name":"vertex_buffer","qualname":"::header::VertexBuffers::vertex_buffer","value":"wgpu::Buffer","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" An array of vertices. A vertex is a point in 3D space containing an X, Y, and a Z coordinate between -1 and +1\n","sig":null,"attributes":[{"value":"/ An array of vertices. A vertex is a point in 3D space containing an X, Y, and a Z coordinate between -1 and +1","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24058,"byte_end":24172,"line_start":265,"line_end":265,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24375,"byte_end":24387,"line_start":268,"line_end":268,"column_start":9,"column_end":21},"name":"index_buffer","qualname":"::header::VertexBuffers::index_buffer","value":"wgpu::Buffer","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" An array of indices. Indices are a way to reuse vertices, this in turn helps greatly in reduction of amount of vertices needed to be sent to the GPU\n","sig":null,"attributes":[{"value":"/ An array of indices. Indices are a way to reuse vertices, this in turn helps greatly in reduction of amount of vertices needed to be sent to the GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24214,"byte_end":24366,"line_start":267,"line_end":267,"column_start":5,"column_end":157}}]},{"kind":"Field","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24411,"byte_end":24417,"line_start":269,"line_end":269,"column_start":9,"column_end":15},"name":"length","qualname":"::header::VertexBuffers::length","value":"u32","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24482,"byte_end":24489,"line_start":273,"line_end":273,"column_start":10,"column_end":17},"name":"Shaders","qualname":"::header::Shaders","value":"wgpu::RenderPipeline","parent":null,"children":[],"decl_id":null,"docs":" Shaders are programs that runs on the GPU\n","sig":null,"attributes":[{"value":"/ Shaders are programs that runs on the GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24427,"byte_end":24472,"line_start":272,"line_end":272,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24598,"byte_end":24612,"line_start":275,"line_end":275,"column_start":10,"column_end":24},"name":"UniformBuffers","qualname":"::header::UniformBuffers","value":"wgpu::BindGroup","parent":null,"children":[],"decl_id":null,"docs":" Uniform Buffers are small amount of data that are sent from CPU to GPU\n","sig":null,"attributes":[{"value":"/ Uniform Buffers are small amount of data that are sent from CPU to GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24514,"byte_end":24588,"line_start":274,"line_end":274,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24713,"byte_end":24721,"line_start":277,"line_end":277,"column_start":10,"column_end":18},"name":"Textures","qualname":"::header::Textures","value":"wgpu::BindGroup","parent":null,"children":[],"decl_id":null,"docs":" Textures are image data that are sent to GPU to be set to a surface\n","sig":null,"attributes":[{"value":"/ Textures are image data that are sent to GPU to be set to a surface","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24632,"byte_end":24703,"line_start":276,"line_end":276,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":24840,"byte_end":24848,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"Renderer","qualname":"::header::Renderer","value":"Renderer { default_data, camera }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25291,"byte_end":25303,"line_start":289,"line_end":289,"column_start":9,"column_end":21},"name":"default_data","qualname":"::header::Renderer::default_data","value":"std::option::Option<(wgpu::BindGroup, wgpu::RenderPipeline, wgpu::BindGroup)>","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25358,"byte_end":25364,"line_start":290,"line_end":290,"column_start":9,"column_end":15},"name":"camera","qualname":"::header::Renderer::camera","value":"std::option::Option<wgpu::BindGroup>","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25476,"byte_end":25492,"line_start":295,"line_end":295,"column_start":12,"column_end":28},"name":"WindowDescriptor","qualname":"::header::WindowDescriptor","value":"WindowDescriptor { width, height, title, decorations, resizable }","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583}],"decl_id":null,"docs":" Descriptor and settings for a window.\n","sig":null,"attributes":[{"value":"/ Descriptor and settings for a window.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25393,"byte_end":25434,"line_start":293,"line_end":293,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25535,"byte_end":25540,"line_start":297,"line_end":297,"column_start":9,"column_end":14},"name":"width","qualname":"::header::WindowDescriptor::width","value":"u32","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" The width of the window\n","sig":null,"attributes":[{"value":"/ The width of the window","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25499,"byte_end":25526,"line_start":296,"line_end":296,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25588,"byte_end":25594,"line_start":299,"line_end":299,"column_start":9,"column_end":15},"name":"height","qualname":"::header::WindowDescriptor::height","value":"u32","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" The height of the window\n","sig":null,"attributes":[{"value":"/ The height of the window","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25551,"byte_end":25579,"line_start":298,"line_end":298,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":581},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25641,"byte_end":25646,"line_start":301,"line_end":301,"column_start":9,"column_end":14},"name":"title","qualname":"::header::WindowDescriptor::title","value":"&'static str","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" The title of the window\n","sig":null,"attributes":[{"value":"/ The title of the window","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25605,"byte_end":25632,"line_start":300,"line_end":300,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25749,"byte_end":25760,"line_start":303,"line_end":303,"column_start":9,"column_end":20},"name":"decorations","qualname":"::header::WindowDescriptor::decorations","value":"bool","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Should the window contain the keys like minimize, maximize, or resize?\n","sig":null,"attributes":[{"value":"/ Should the window contain the keys like minimize, maximize, or resize?","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25666,"byte_end":25740,"line_start":302,"line_end":302,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25815,"byte_end":25824,"line_start":305,"line_end":305,"column_start":9,"column_end":18},"name":"resizable","qualname":"::header::WindowDescriptor::resizable","value":"bool","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Should the window be resizable\n","sig":null,"attributes":[{"value":"/ Should the window be resizable","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25772,"byte_end":25806,"line_start":304,"line_end":304,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26349,"byte_end":26355,"line_start":323,"line_end":323,"column_start":12,"column_end":18},"name":"Camera","qualname":"::header::Camera","value":"Camera { position, target, up, aspect, fov, near, far, view_data }","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"decl_id":null,"docs":" Container for the camera feature. The settings here are needed for\n algebra equations needed for camera vision and movement. Please leave it to the renderer to handle\n","sig":null,"attributes":[{"value":"/ Container for the camera feature. The settings here are needed for","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26147,"byte_end":26217,"line_start":320,"line_end":320,"column_start":1,"column_end":71}},{"value":"/ algebra equations needed for camera vision and movement. Please leave it to the renderer to handle","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26218,"byte_end":26320,"line_start":321,"line_end":321,"column_start":1,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26413,"byte_end":26421,"line_start":325,"line_end":325,"column_start":9,"column_end":17},"name":"position","qualname":"::header::Camera::position","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<3_usize>, nalgebra::base::dimension::Const<1_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 3_usize, 1_usize>>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The position of the camera in 3D space\n","sig":null,"attributes":[{"value":"/ The position of the camera in 3D space","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26362,"byte_end":26404,"line_start":324,"line_end":324,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26508,"byte_end":26514,"line_start":327,"line_end":327,"column_start":9,"column_end":15},"name":"target","qualname":"::header::Camera::target","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<3_usize>, nalgebra::base::dimension::Const<1_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 3_usize, 1_usize>>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The target at which the camera should be looking\n","sig":null,"attributes":[{"value":"/ The target at which the camera should be looking","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26447,"byte_end":26499,"line_start":326,"line_end":326,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26544,"byte_end":26546,"line_start":328,"line_end":328,"column_start":9,"column_end":11},"name":"up","qualname":"::header::Camera::up","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<3_usize>, nalgebra::base::dimension::Const<1_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 3_usize, 1_usize>>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26576,"byte_end":26582,"line_start":329,"line_end":329,"column_start":9,"column_end":15},"name":"aspect","qualname":"::header::Camera::aspect","value":"f32","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26637,"byte_end":26640,"line_start":331,"line_end":331,"column_start":9,"column_end":12},"name":"fov","qualname":"::header::Camera::fov","value":"f32","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The field of view of the camera\n","sig":null,"attributes":[{"value":"/ The field of view of the camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26593,"byte_end":26628,"line_start":330,"line_end":330,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26690,"byte_end":26694,"line_start":333,"line_end":333,"column_start":9,"column_end":13},"name":"near","qualname":"::header::Camera::near","value":"f32","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The closest view of camera\n","sig":null,"attributes":[{"value":"/ The closest view of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26651,"byte_end":26681,"line_start":332,"line_end":332,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26745,"byte_end":26748,"line_start":335,"line_end":335,"column_start":9,"column_end":12},"name":"far","qualname":"::header::Camera::far","value":"f32","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The furthest view of camera\n","sig":null,"attributes":[{"value":"/ The furthest view of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26705,"byte_end":26736,"line_start":334,"line_end":334,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26811,"byte_end":26820,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"name":"view_data","qualname":"::header::Camera::view_data","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<4_usize>, nalgebra::base::dimension::Const<4_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 4_usize, 4_usize>>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" The final data that will be sent to GPU\n","sig":null,"attributes":[{"value":"/ The final data that will be sent to GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":26759,"byte_end":26802,"line_start":336,"line_end":336,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27339,"byte_end":27345,"line_start":354,"line_end":354,"column_start":5,"column_end":11},"name":"Matrix","qualname":"::header::UniformBuffer::Matrix","value":"UniformBuffer::Matrix(&'static str, uniform_type::Matrix)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27387,"byte_end":27392,"line_start":355,"line_end":355,"column_start":5,"column_end":10},"name":"Array","qualname":"::header::UniformBuffer::Array","value":"UniformBuffer::Array(&'static str, uniform_type::Array)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27433,"byte_end":27438,"line_start":356,"line_end":356,"column_start":5,"column_end":10},"name":"Float","qualname":"::header::UniformBuffer::Float","value":"UniformBuffer::Float(&'static str, uniform_type::Float)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27319,"byte_end":27332,"line_start":353,"line_end":353,"column_start":10,"column_end":23},"name":"UniformBuffer","qualname":"::header::UniformBuffer","value":"pub enum UniformBuffer {\n    Matrix(&'static str, uniform_type::Matrix),\n    Array(&'static str, uniform_type::Array),\n    Float(&'static str, uniform_type::Float),\n}","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":608},{"krate":0,"index":612}],"decl_id":null,"docs":" Buffer type enum, allowing for multiple types to be sent\n","sig":null,"attributes":[{"value":"/ Buffer type enum, allowing for multiple types to be sent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27225,"byte_end":27285,"line_start":351,"line_end":351,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27574,"byte_end":27583,"line_start":360,"line_end":360,"column_start":8,"column_end":17},"name":"normalize","qualname":"::header::normalize","value":"pub fn normalize(f32, u32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" This function helps in converting pixel value to the value that is between -1 and +1\n","sig":null,"attributes":[{"value":"/ This function helps in converting pixel value to the value that is between -1 and +1","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27478,"byte_end":27566,"line_start":359,"line_end":359,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27872,"byte_end":27882,"line_start":376,"line_end":376,"column_start":8,"column_end":18},"name":"percentage","qualname":"::header::percentage","value":"pub fn percentage(f32, f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns\n","sig":null,"attributes":[{"value":"/ Returns","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":27853,"byte_end":27864,"line_start":375,"line_end":375,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28038,"byte_end":28039,"line_start":384,"line_end":384,"column_start":5,"column_end":6},"name":"X","qualname":"::header::RotateAxis::X","value":"RotateAxis::X","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28045,"byte_end":28046,"line_start":385,"line_end":385,"column_start":5,"column_end":6},"name":"Y","qualname":"::header::RotateAxis::Y","value":"RotateAxis::Y","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28052,"byte_end":28053,"line_start":386,"line_end":386,"column_start":5,"column_end":6},"name":"Z","qualname":"::header::RotateAxis::Z","value":"RotateAxis::Z","parent":{"krate":0,"index":620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28021,"byte_end":28031,"line_start":383,"line_end":383,"column_start":10,"column_end":20},"name":"RotateAxis","qualname":"::header::RotateAxis","value":"pub enum RotateAxis { X, Y, Z, }","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":625}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28109,"byte_end":28114,"line_start":391,"line_end":391,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::header::TextureData::Bytes","value":"TextureData::Bytes(Vec<u8>)","parent":{"krate":0,"index":638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28129,"byte_end":28134,"line_start":392,"line_end":392,"column_start":5,"column_end":10},"name":"Image","qualname":"::header::TextureData::Image","value":"TextureData::Image(image::DynamicImage)","parent":{"krate":0,"index":638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28091,"byte_end":28102,"line_start":390,"line_end":390,"column_start":10,"column_end":21},"name":"TextureData","qualname":"::header::TextureData","value":"pub enum TextureData { Bytes(Vec<u8>), Image(image::DynamicImage), }","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":642}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28333,"byte_end":28338,"line_start":399,"line_end":399,"column_start":5,"column_end":10},"name":"Clamp","qualname":"::header::TextureMode::Clamp","value":"TextureMode::Clamp","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Expands the texture to fit the object\n","sig":null,"attributes":[{"value":"/ Expands the texture to fit the object","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28287,"byte_end":28328,"line_start":398,"line_end":398,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28394,"byte_end":28400,"line_start":401,"line_end":401,"column_start":5,"column_end":11},"name":"Repeat","qualname":"::header::TextureMode::Repeat","value":"TextureMode::Repeat","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Repeats the texture instead of stretching\n","sig":null,"attributes":[{"value":"/ Repeats the texture instead of stretching","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28344,"byte_end":28389,"line_start":400,"line_end":400,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28459,"byte_end":28471,"line_start":403,"line_end":403,"column_start":5,"column_end":17},"name":"MirrorRepeat","qualname":"::header::TextureMode::MirrorRepeat","value":"TextureMode::MirrorRepeat","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Repeats the texture, but mirrors it on edges\n","sig":null,"attributes":[{"value":"/ Repeats the texture, but mirrors it on edges","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28406,"byte_end":28454,"line_start":402,"line_end":402,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28269,"byte_end":28280,"line_start":397,"line_end":397,"column_start":10,"column_end":21},"name":"TextureMode","qualname":"::header::TextureMode","value":"pub enum TextureMode { Clamp, Repeat, MirrorRepeat, }","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654}],"decl_id":null,"docs":" Defines how the borders of texture would look like\n","sig":null,"attributes":[{"value":"/ Defines how the borders of texture would look like","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28160,"byte_end":28214,"line_start":395,"line_end":395,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28552,"byte_end":28555,"line_start":408,"line_end":408,"column_start":5,"column_end":8},"name":"PNG","qualname":"::header::TextureFormat::PNG","value":"TextureFormat::PNG","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28561,"byte_end":28564,"line_start":409,"line_end":409,"column_start":5,"column_end":8},"name":"BMP","qualname":"::header::TextureFormat::BMP","value":"TextureFormat::BMP","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28570,"byte_end":28574,"line_start":410,"line_end":410,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::header::TextureFormat::JPEG","value":"TextureFormat::JPEG","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28580,"byte_end":28583,"line_start":411,"line_end":411,"column_start":5,"column_end":8},"name":"PNM","qualname":"::header::TextureFormat::PNM","value":"TextureFormat::PNM","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28532,"byte_end":28545,"line_start":407,"line_end":407,"column_start":10,"column_end":23},"name":"TextureFormat","qualname":"::header::TextureFormat","value":"pub enum TextureFormat { PNG, BMP, JPEG, PNM, }","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148}],"decl_id":null,"docs":" Defines file format of the texture to load\n","sig":null,"attributes":[{"value":"/ Defines file format of the texture to load","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28476,"byte_end":28522,"line_start":406,"line_end":406,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28597,"byte_end":28612,"line_start":414,"line_end":414,"column_start":10,"column_end":25},"name":"ShaderPrimitive","qualname":"::header::ShaderPrimitive","value":"wgpu::PrimitiveTopology","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28649,"byte_end":28660,"line_start":415,"line_end":415,"column_start":10,"column_end":21},"name":"IndexFormat","qualname":"::header::IndexFormat","value":"wgpu::IndexFormat","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28691,"byte_end":28700,"line_start":416,"line_end":416,"column_start":10,"column_end":19},"name":"FrontFace","qualname":"::header::FrontFace","value":"wgpu::FrontFace","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28729,"byte_end":28737,"line_start":417,"line_end":417,"column_start":10,"column_end":18},"name":"CullMode","qualname":"::header::CullMode","value":"wgpu::Face","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28761,"byte_end":28772,"line_start":418,"line_end":418,"column_start":10,"column_end":21},"name":"PolygonMode","qualname":"::header::PolygonMode","value":"wgpu::PolygonMode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28888,"byte_end":28902,"line_start":422,"line_end":422,"column_start":12,"column_end":26},"name":"ShaderSettings","qualname":"::header::ShaderSettings","value":"ShaderSettings { topology, strip_index_format, front_face, cull_mode, polygon_mode, clamp_depth, conservative, count, mask, alpha_to_coverage_enabled }","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29003,"byte_end":29011,"line_start":425,"line_end":425,"column_start":9,"column_end":17},"name":"topology","qualname":"::header::ShaderSettings::topology","value":"wgpu::PrimitiveTopology","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" The primitive topology used to interpret vertices\n","sig":null,"attributes":[{"value":"/ The primitive topology used to interpret vertices","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":28941,"byte_end":28994,"line_start":424,"line_end":424,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29210,"byte_end":29228,"line_start":429,"line_end":429,"column_start":9,"column_end":27},"name":"strip_index_format","qualname":"::header::ShaderSettings::strip_index_format","value":"std::option::Option<wgpu::IndexFormat>","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" When drawing strip topologies with indices, this is the\n required format for the index buffer. This has no effect\n on non-indexed or non-strip draws.\n","sig":null,"attributes":[{"value":"/ When drawing strip topologies with indices, this is the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29034,"byte_end":29093,"line_start":426,"line_end":426,"column_start":5,"column_end":64}},{"value":"/ required format for the index buffer. This has no effect","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29098,"byte_end":29158,"line_start":427,"line_end":427,"column_start":5,"column_end":65}},{"value":"/ on non-indexed or non-strip draws.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29163,"byte_end":29201,"line_start":428,"line_end":428,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29357,"byte_end":29367,"line_start":432,"line_end":432,"column_start":9,"column_end":19},"name":"front_face","qualname":"::header::ShaderSettings::front_face","value":"wgpu::FrontFace","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" The face to consider the front for the purpose of\n culling and stencil operations.\n","sig":null,"attributes":[{"value":"/ The face to consider the front for the purpose of","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29255,"byte_end":29308,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"/ culling and stencil operations.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29313,"byte_end":29348,"line_start":431,"line_end":431,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29418,"byte_end":29427,"line_start":434,"line_end":434,"column_start":9,"column_end":18},"name":"cull_mode","qualname":"::header::ShaderSettings::cull_mode","value":"std::option::Option<wgpu::Face>","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" The face culling mode\n","sig":null,"attributes":[{"value":"/ The face culling mode","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29384,"byte_end":29409,"line_start":433,"line_end":433,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29689,"byte_end":29701,"line_start":440,"line_end":440,"column_start":9,"column_end":21},"name":"polygon_mode","qualname":"::header::ShaderSettings::polygon_mode","value":"wgpu::PolygonMode","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Controls the way each polygon is rasterized. Can be\n either `Fill` (default), `Line` or `Point`","sig":null,"attributes":[{"value":"/ Controls the way each polygon is rasterized. Can be","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29451,"byte_end":29506,"line_start":435,"line_end":435,"column_start":5,"column_end":60}},{"value":"/ either `Fill` (default), `Line` or `Point`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29511,"byte_end":29557,"line_start":436,"line_end":436,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29562,"byte_end":29565,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Setting this to something other than `Fill` requires","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29570,"byte_end":29626,"line_start":438,"line_end":438,"column_start":5,"column_end":61}},{"value":"/ `NON_FILL_POLYGON_MODE` feature to be enabled","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29631,"byte_end":29680,"line_start":439,"line_end":439,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29914,"byte_end":29925,"line_start":446,"line_end":446,"column_start":9,"column_end":20},"name":"clamp_depth","qualname":"::header::ShaderSettings::clamp_depth","value":"bool","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" If set to true, the polygon depth is clamped to 0-1\n range instead of being clipped.","sig":null,"attributes":[{"value":"/ If set to true, the polygon depth is clamped to 0-1","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29720,"byte_end":29775,"line_start":441,"line_end":441,"column_start":5,"column_end":60}},{"value":"/ range instead of being clipped.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29780,"byte_end":29815,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29820,"byte_end":29823,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Enabling this requires the `DEPTH_CLAMPING` feature","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29828,"byte_end":29883,"line_start":444,"line_end":444,"column_start":5,"column_end":60}},{"value":"/ to be enabled","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29888,"byte_end":29905,"line_start":445,"line_end":445,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30226,"byte_end":30238,"line_start":453,"line_end":453,"column_start":9,"column_end":21},"name":"conservative","qualname":"::header::ShaderSettings::conservative","value":"bool","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" If set to true, the primitives are rendered with\n conservative overestimation. I.e. any rastered\n pixel touched by it is filled. Only valid for PolygonMode::Fill!","sig":null,"attributes":[{"value":"/ If set to true, the primitives are rendered with","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29937,"byte_end":29989,"line_start":447,"line_end":447,"column_start":5,"column_end":57}},{"value":"/ conservative overestimation. I.e. any rastered","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":29994,"byte_end":30044,"line_start":448,"line_end":448,"column_start":5,"column_end":55}},{"value":"/ pixel touched by it is filled. Only valid for PolygonMode::Fill!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30049,"byte_end":30117,"line_start":449,"line_end":449,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30122,"byte_end":30125,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Enabling this requires `CONSERVATIVE_RASTERIZATION`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30130,"byte_end":30185,"line_start":451,"line_end":451,"column_start":5,"column_end":60}},{"value":"/ features to be enabled.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30190,"byte_end":30217,"line_start":452,"line_end":452,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30410,"byte_end":30415,"line_start":458,"line_end":458,"column_start":9,"column_end":14},"name":"count","qualname":"::header::ShaderSettings::count","value":"u32","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" The number of samples calculated per pixel (for MSAA).\n For non-multisampled textures, this should be `1`\n","sig":null,"attributes":[{"value":"/ The number of samples calculated per pixel (for MSAA).","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30285,"byte_end":30343,"line_start":456,"line_end":456,"column_start":5,"column_end":63}},{"value":"/ For non-multisampled textures, this should be `1`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30348,"byte_end":30401,"line_start":457,"line_end":457,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30575,"byte_end":30579,"line_start":462,"line_end":462,"column_start":9,"column_end":13},"name":"mask","qualname":"::header::ShaderSettings::mask","value":"u64","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Bitmask that restricts the samples of a pixel modified\n by this pipeline. All samples can be enabled using the\n value `!0`\n","sig":null,"attributes":[{"value":"/ Bitmask that restricts the samples of a pixel modified","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30426,"byte_end":30484,"line_start":459,"line_end":459,"column_start":5,"column_end":63}},{"value":"/ by this pipeline. All samples can be enabled using the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30489,"byte_end":30547,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"/ value `!0`","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30552,"byte_end":30566,"line_start":461,"line_end":461,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30976,"byte_end":31001,"line_start":471,"line_end":471,"column_start":9,"column_end":34},"name":"alpha_to_coverage_enabled","qualname":"::header::ShaderSettings::alpha_to_coverage_enabled","value":"bool","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" When enabled, produces another sample mask per pixel\n based on the alpha output value, that is ANDed with the\n sample_mask and the primitive coverage to restrict the\n set of samples affected by a primitive.\n The implicit mask produced for alpha of zero is guaranteed\n to be zero, and for alpha of one is guaranteed to be all\n 1-s.\n","sig":null,"attributes":[{"value":"/ When enabled, produces another sample mask per pixel","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30590,"byte_end":30646,"line_start":463,"line_end":463,"column_start":5,"column_end":61}},{"value":"/ based on the alpha output value, that is ANDed with the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30651,"byte_end":30710,"line_start":464,"line_end":464,"column_start":5,"column_end":64}},{"value":"/ sample_mask and the primitive coverage to restrict the","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30715,"byte_end":30773,"line_start":465,"line_end":465,"column_start":5,"column_end":63}},{"value":"/ set of samples affected by a primitive.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30778,"byte_end":30821,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/ The implicit mask produced for alpha of zero is guaranteed","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30827,"byte_end":30889,"line_start":468,"line_end":468,"column_start":5,"column_end":67}},{"value":"/ to be zero, and for alpha of one is guaranteed to be all","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30894,"byte_end":30954,"line_start":469,"line_end":469,"column_start":5,"column_end":65}},{"value":"/ 1-s.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":30959,"byte_end":30967,"line_start":470,"line_end":470,"column_start":5,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"objects","qualname":"::objects","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":32434,"byte_end":32444,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"new_object","qualname":"<Engine>::new_object","value":"pub fn new_object(&mut Self, Vec<Vertex>, Vec<u16>, ObjectSettings)\n-> anyhow::Result<&mut Object>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object\n","sig":null,"attributes":[{"value":"/ Creates a new object","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":32398,"byte_end":32422,"line_start":15,"line_end":15,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":34759,"byte_end":34769,"line_start":85,"line_end":85,"column_start":12,"column_end":22},"name":"get_object","qualname":"<Engine>::get_object","value":"pub fn get_object(&mut Self, usize) -> Option<&mut Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns mutable object\n","sig":null,"attributes":[{"value":"/ Returns mutable object","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":34721,"byte_end":34747,"line_start":84,"line_end":84,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":35038,"byte_end":35043,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"scale","qualname":"<Object>::scale","value":"pub fn scale(&mut Self, f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Scales an object. e.g. 2.0 doubles the size and 0.5 halves\n","sig":null,"attributes":[{"value":"/ Scales an object. e.g. 2.0 doubles the size and 0.5 halves","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":34964,"byte_end":35026,"line_start":90,"line_end":90,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":35606,"byte_end":35612,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"resize","qualname":"<Object>::resize","value":"pub fn resize(&mut Self, f32, f32, f32, winit::dpi::PhysicalSize<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Resizes an object in pixels which are relative to the window\n","sig":null,"attributes":[{"value":"/ Resizes an object in pixels which are relative to the window","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":35530,"byte_end":35594,"line_start":106,"line_end":106,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":37019,"byte_end":37025,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"rotate","qualname":"<Object>::rotate","value":"pub fn rotate(&mut Self, f32, RotateAxis)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the object in the axis you specify\n","sig":null,"attributes":[{"value":"/ Rotates the object in the axis you specify","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":36961,"byte_end":37007,"line_start":155,"line_end":155,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":37623,"byte_end":37632,"line_start":170,"line_end":170,"column_start":12,"column_end":21},"name":"translate","qualname":"<Object>::translate","value":"pub fn translate(&mut Self, f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Moves the object by the amount you specify in the axis you specify\n","sig":null,"attributes":[{"value":"/ Moves the object by the amount you specify in the axis you specify","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":37541,"byte_end":37611,"line_start":169,"line_end":169,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":38008,"byte_end":38016,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"position","qualname":"<Object>::position","value":"pub fn position(&mut Self, f32, f32, f32, winit::dpi::PhysicalSize<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Sets the position of the object in 3D space relative to the window\n","sig":null,"attributes":[{"value":"/ Sets the position of the object in 3D space relative to the window","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":37926,"byte_end":37996,"line_start":178,"line_end":178,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":39587,"byte_end":39599,"line_start":228,"line_end":228,"column_start":12,"column_end":24},"name":"change_color","qualname":"<Object>::change_color","value":"pub fn change_color(&mut Self, f32, f32, f32, f32) -> anyhow::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the color of the object. If textures exist, the color of textures will change\n","sig":null,"attributes":[{"value":"/ Changes the color of the object. If textures exist, the color of textures will change","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":39486,"byte_end":39575,"line_start":227,"line_end":227,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":39931,"byte_end":39945,"line_start":244,"line_end":244,"column_start":12,"column_end":26},"name":"change_texture","qualname":"<Object>::change_texture","value":"pub fn change_texture(&mut Self, Textures) -> anyhow::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the object's texture with provided one\n","sig":null,"attributes":[{"value":"/ Replaces the object's texture with provided one","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":39868,"byte_end":39919,"line_start":243,"line_end":243,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":40155,"byte_end":40161,"line_start":252,"line_end":252,"column_start":12,"column_end":18},"name":"update","qualname":"<Object>::update","value":"pub fn update(&mut Self, &mut Renderer) -> anyhow::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Update and apply changes done to an object\n","sig":null,"attributes":[{"value":"/ Update and apply changes done to an object","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":40097,"byte_end":40143,"line_start":251,"line_end":251,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"primitive_shapes","qualname":"::primitive_shapes","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":241},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\three_dimensions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"three_dimensions","qualname":"::primitive_shapes::three_dimensions","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\three_dimensions.rs","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\three_dimensions.rs","byte_start":44679,"byte_end":44683,"line_start":3,"line_end":3,"column_start":8,"column_end":12},"name":"cube","qualname":"::primitive_shapes::three_dimensions::cube","value":"pub fn cube<'a>(Option<&'static str>, &'a mut Engine)\n-> Result<&'a mut Object, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"two_dimensions","qualname":"::primitive_shapes::two_dimensions","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":256}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","byte_start":48408,"byte_end":48416,"line_start":10,"line_end":10,"column_start":8,"column_end":16},"name":"triangle","qualname":"::primitive_shapes::two_dimensions::triangle","value":"pub fn triangle(ObjectSettings, &mut Engine)\n-> Result<&mut Object, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2D triangle\n","sig":null,"attributes":[{"value":"/ Creates a 2D triangle","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","byte_start":48375,"byte_end":48400,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","byte_start":49038,"byte_end":49044,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"square","qualname":"::primitive_shapes::two_dimensions::square","value":"pub fn square(ObjectSettings, &mut Engine)\n-> Result<&mut Object, anyhow::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2D square\n","sig":null,"attributes":[{"value":"/ Creates a 2D square","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes\\two_dimensions.rs","byte_start":49007,"byte_end":49030,"line_start":36,"line_end":36,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\render.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"render","qualname":"::render","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\render.rs","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils.rs","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":349},{"krate":0,"index":355}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"camera","qualname":"::utils::camera","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":58644,"byte_end":58647,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Camera>::new","value":"pub fn new(PhysicalSize<u32>, &mut Renderer) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new camera. this should've been automatically done at the time of creating an engine\n","sig":null,"attributes":[{"value":"/ Creates a new camera. this should've been automatically done at the time of creating an engine","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":58534,"byte_end":58632,"line_start":14,"line_end":14,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":59598,"byte_end":59626,"line_start":40,"line_end":40,"column_start":12,"column_end":40},"name":"build_view_projection_matrix","qualname":"<Camera>::build_view_projection_matrix","value":"pub fn build_view_projection_matrix(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Updates the view uniform matrix that decides how camera works\n","sig":null,"attributes":[{"value":"/ Updates the view uniform matrix that decides how camera works","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":59521,"byte_end":59586,"line_start":39,"line_end":39,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60187,"byte_end":60208,"line_start":58,"line_end":58,"column_start":12,"column_end":33},"name":"camera_uniform_buffer","qualname":"<Camera>::camera_uniform_buffer","value":"pub fn camera_uniform_buffer(&Self) -> Result<Matrix>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix uniform buffer from camera data that can be sent to GPU\n","sig":null,"attributes":[{"value":"/ Returns a matrix uniform buffer from camera data that can be sent to GPU","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60099,"byte_end":60175,"line_start":57,"line_end":57,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60334,"byte_end":60346,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"set_position","qualname":"<Camera>::set_position","value":"pub fn set_position(&mut Self, f32, f32, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the position of camera\n","sig":null,"attributes":[{"value":"/ Sets the position of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60291,"byte_end":60322,"line_start":62,"line_end":62,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60565,"byte_end":60575,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"set_target","qualname":"<Camera>::set_target","value":"pub fn set_target(&mut Self, f32, f32, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the target of camera\n","sig":null,"attributes":[{"value":"/ Sets the target of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60524,"byte_end":60553,"line_start":70,"line_end":70,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60788,"byte_end":60794,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"set_up","qualname":"<Camera>::set_up","value":"pub fn set_up(&mut Self, f32, f32, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the up of camera\n","sig":null,"attributes":[{"value":"/ Sets the up of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60751,"byte_end":60776,"line_start":78,"line_end":78,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61014,"byte_end":61021,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"set_fov","qualname":"<Camera>::set_fov","value":"pub fn set_fov(&mut Self, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the field of view of camera\n","sig":null,"attributes":[{"value":"/ Sets the field of view of camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":60966,"byte_end":61002,"line_start":86,"line_end":86,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61208,"byte_end":61215,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"set_far","qualname":"<Camera>::set_far","value":"pub fn set_far(&mut Self, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets how far camera can look\n","sig":null,"attributes":[{"value":"/ Sets how far camera can look","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61164,"byte_end":61196,"line_start":94,"line_end":94,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61407,"byte_end":61415,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"set_near","qualname":"<Camera>::set_near","value":"pub fn set_near(&mut Self, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets how near the camera can look\n","sig":null,"attributes":[{"value":"/ Sets how near the camera can look","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61358,"byte_end":61395,"line_start":102,"line_end":102,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61612,"byte_end":61622,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"set_aspect","qualname":"<Camera>::set_aspect","value":"pub fn set_aspect(&mut Self, f32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the aspect ratio of the camera\n","sig":null,"attributes":[{"value":"/ Sets the aspect ratio of the camera","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61561,"byte_end":61600,"line_start":110,"line_end":110,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61844,"byte_end":61867,"line_start":119,"line_end":119,"column_start":12,"column_end":35},"name":"add_position_and_target","qualname":"<Camera>::add_position_and_target","value":"pub fn add_position_and_target(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Enables adding position and target for the view target\n","sig":null,"attributes":[{"value":"/ Enables adding position and target for the view target","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61774,"byte_end":61832,"line_start":118,"line_end":118,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":62062,"byte_end":62084,"line_start":124,"line_end":124,"column_start":12,"column_end":34},"name":"update_view_projection","qualname":"<Camera>::update_view_projection","value":"pub fn update_view_projection(&mut Self, &mut Renderer) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This builds a uniform buffer data from camera view data that is sent to the GPU in next frame\n","sig":null,"attributes":[{"value":"/ This builds a uniform buffer data from camera view data that is sent to the GPU in next frame","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":61953,"byte_end":62050,"line_start":123,"line_end":123,"column_start":5,"column_end":102}}]},{"kind":"Mod","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"default_resources","qualname":"::utils::default_resources","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","byte_start":62893,"byte_end":62907,"line_start":7,"line_end":7,"column_start":11,"column_end":25},"name":"DEFAULT_SHADER","qualname":"::utils::default_resources::DEFAULT_SHADER","value":"&str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","byte_start":64262,"byte_end":64277,"line_start":63,"line_end":63,"column_start":11,"column_end":26},"name":"DEFAULT_TEXTURE","qualname":"::utils::default_resources::DEFAULT_TEXTURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","byte_start":66570,"byte_end":66583,"line_start":90,"line_end":90,"column_start":11,"column_end":24},"name":"DEFAULT_COLOR","qualname":"::utils::default_resources::DEFAULT_COLOR","value":"[f32; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\default_resources.rs","byte_start":66629,"byte_end":66645,"line_start":92,"line_end":92,"column_start":11,"column_end":27},"name":"DEFAULT_MATRIX_4","qualname":"::utils::default_resources::DEFAULT_MATRIX_4","value":"crate::header::uniform_type::Matrix","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flycamera","qualname":"::utils::flycamera","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":373}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67057,"byte_end":67066,"line_start":5,"line_end":5,"column_start":12,"column_end":21},"name":"FlyCamera","qualname":"::utils::flycamera::FlyCamera","value":"FlyCamera { camera_right, yaw, pitch, last_x, last_y, is_focus, camera_speed, camera_sensitivity, timer, last_frame }","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67077,"byte_end":67089,"line_start":6,"line_end":6,"column_start":9,"column_end":21},"name":"camera_right","qualname":"::utils::flycamera::FlyCamera::camera_right","value":"nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::Const<3_usize>, nalgebra::base::dimension::Const<1_usize>, nalgebra::base::array_storage::ArrayStorage<f32, 3_usize, 1_usize>>","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67119,"byte_end":67122,"line_start":7,"line_end":7,"column_start":9,"column_end":12},"name":"yaw","qualname":"::utils::flycamera::FlyCamera::yaw","value":"f32","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67137,"byte_end":67142,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"name":"pitch","qualname":"::utils::flycamera::FlyCamera::pitch","value":"f32","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67157,"byte_end":67163,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"last_x","qualname":"::utils::flycamera::FlyCamera::last_x","value":"f64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67178,"byte_end":67184,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"last_y","qualname":"::utils::flycamera::FlyCamera::last_y","value":"f64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67200,"byte_end":67208,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"is_focus","qualname":"::utils::flycamera::FlyCamera::is_focus","value":"bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67224,"byte_end":67236,"line_start":13,"line_end":13,"column_start":9,"column_end":21},"name":"camera_speed","qualname":"::utils::flycamera::FlyCamera::camera_speed","value":"f32","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67251,"byte_end":67269,"line_start":14,"line_end":14,"column_start":9,"column_end":27},"name":"camera_sensitivity","qualname":"::utils::flycamera::FlyCamera::camera_sensitivity","value":"f32","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67284,"byte_end":67289,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"timer","qualname":"::utils::flycamera::FlyCamera::timer","value":"std::time::Instant","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67319,"byte_end":67329,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"last_frame","qualname":"::utils::flycamera::FlyCamera::last_frame","value":"f32","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67367,"byte_end":67370,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<FlyCamera>::new","value":"pub fn new(&mut Camera) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67862,"byte_end":67868,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"update","qualname":"<FlyCamera>::update","value":"pub fn update(&mut Self, &mut Camera, &Window, &crate::DeviceEvent,\n&winit_input_helper::WinitInputHelper)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"window","qualname":"::window","value":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":72627,"byte_end":72630,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Engine>::new","value":"pub fn new(WindowDescriptor) -> anyhow::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new window in current thread.\n","sig":null,"attributes":[{"value":"/ Creates a new window in current thread.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":72541,"byte_end":72584,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"allow(unreachable_code)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":72589,"byte_end":72615,"line_start":17,"line_end":17,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74665,"byte_end":74676,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"update_loop","qualname":"<Engine>::update_loop","value":"pub fn update_loop<F>(Self, F) -> anyhow::Result<()> where F: 'static +\nFnMut(&mut Renderer, &Window, &mut Vec<Object>,\n(&winit::event::DeviceEvent, &WinitInputHelper), &mut Camera) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Runs the block of code that you pass to it every frame. The update code is used\n to modify the engine on the fly thus creating interactive graphics and making things\n happy in the engine!","sig":null,"attributes":[{"value":"/ Runs the block of code that you pass to it every frame. The update code is used","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74317,"byte_end":74400,"line_start":58,"line_end":58,"column_start":5,"column_end":88}},{"value":"/ to modify the engine on the fly thus creating interactive graphics and making things","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74405,"byte_end":74493,"line_start":59,"line_end":59,"column_start":5,"column_end":93}},{"value":"/ happy in the engine!","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74498,"byte_end":74522,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74527,"byte_end":74530,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Renderer, window, vec of objects, events, and camera are passed to the update code.","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74535,"byte_end":74622,"line_start":62,"line_end":62,"column_start":5,"column_end":92}},{"value":"allow(unreachable_code)","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":74627,"byte_end":74653,"line_start":63,"line_end":63,"column_start":5,"column_end":31}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":639,"byte_end":647,"line_start":15,"line_end":15,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14349,"byte_end":14355,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15353,"byte_end":15359,"line_start":47,"line_end":47,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":16448,"byte_end":16454,"line_start":78,"line_end":78,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17784,"byte_end":17789,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18081,"byte_end":18086,"line_start":133,"line_end":133,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20454,"byte_end":20468,"line_start":191,"line_end":191,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25865,"byte_end":25881,"line_start":307,"line_end":307,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":31028,"byte_end":31042,"line_start":473,"line_end":473,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":32385,"byte_end":32391,"line_start":14,"line_end":14,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":34951,"byte_end":34957,"line_start":89,"line_end":89,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\render.rs","byte_start":50365,"byte_end":50373,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":58521,"byte_end":58527,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67344,"byte_end":67353,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":72528,"byte_end":72534,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":125,"byte_end":131,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":62}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":141,"byte_end":148,"line_start":9,"line_end":9,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":157}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":158,"byte_end":174,"line_start":10,"line_end":10,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":224}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","byte_start":44519,"byte_end":44535,"line_start":1,"line_end":1,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":225}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\primitive_shapes.rs","byte_start":44545,"byte_end":44559,"line_start":2,"line_end":2,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":241}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":184,"byte_end":190,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":259}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":200,"byte_end":205,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":312}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils.rs","byte_start":58116,"byte_end":58122,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":313}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils.rs","byte_start":58148,"byte_end":58165,"line_start":9,"line_end":9,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":349}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils.rs","byte_start":58175,"byte_end":58184,"line_start":10,"line_end":10,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":355}},{"kind":"Mod","span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\lib.rs","byte_start":215,"byte_end":221,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":377}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\definition.rs","byte_start":639,"byte_end":647,"line_start":15,"line_end":15,"column_start":21,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":14349,"byte_end":14355,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":15353,"byte_end":15359,"line_start":47,"line_end":47,"column_start":10,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":16448,"byte_end":16454,"line_start":78,"line_end":78,"column_start":28,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":3135}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":17784,"byte_end":17789,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":18081,"byte_end":18086,"line_start":133,"line_end":133,"column_start":10,"column_end":15},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":20454,"byte_end":20468,"line_start":191,"line_end":191,"column_start":18,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":565},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":25865,"byte_end":25881,"line_start":307,"line_end":307,"column_start":32,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":578},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\header.rs","byte_start":31028,"byte_end":31042,"line_start":473,"line_end":473,"column_start":18,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":667},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":32385,"byte_end":32391,"line_start":14,"line_end":14,"column_start":6,"column_end":12},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\objects.rs","byte_start":34951,"byte_end":34957,"line_start":89,"line_end":89,"column_start":6,"column_end":12},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\render.rs","byte_start":50365,"byte_end":50373,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\camera.rs","byte_start":58521,"byte_end":58527,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\utils\\flycamera.rs","byte_start":67344,"byte_end":67353,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\sergi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\blue_engine-0.3.31\\src\\window.rs","byte_start":72528,"byte_end":72534,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}}]}